/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * Discord HTTP API (Preview)
 * Preview of the Discord v10 HTTP API specification. See https://discord.com/developers/docs for more details.
 * OpenAPI spec version: 10
 */
import axios from 'axios'
import type {
  AxiosRequestConfig,
  AxiosResponse
} from 'axios'
export type GetGuildParams = {
with_counts?: boolean;
};

export type InviteRevoke200 = FriendInviteResponse | GroupDMInviteResponse | GuildInviteResponse;

export type InviteResolve200 = FriendInviteResponse | GroupDMInviteResponse | GuildInviteResponse;

export type InviteResolveParams = {
with_counts?: boolean;
guild_scheduled_event_id?: SnowflakeType;
};

export type UpdateChannel200 = GuildChannelResponse | PrivateChannelResponse | PrivateGroupChannelResponse | ThreadResponse;

export type UpdateChannelBody = PrivateChannelRequestPartial | UpdateGuildChannelRequestPartial | UpdateThreadRequestPartial;

export type DeleteChannel200 = GuildChannelResponse | PrivateChannelResponse | PrivateGroupChannelResponse | ThreadResponse;

export type GetChannel200 = GuildChannelResponse | PrivateChannelResponse | PrivateGroupChannelResponse | ThreadResponse;

export type UpdateWebhook200 = ApplicationIncomingWebhookResponse | ChannelFollowerWebhookResponse | GuildIncomingWebhookResponse;

export type UpdateWebhookBodyChannelId = null | SnowflakeType;

export type UpdateWebhookBodyAvatar = string | null;

export type UpdateWebhookBody = {
  avatar?: UpdateWebhookBodyAvatar;
  channel_id?: UpdateWebhookBodyChannelId;
  /**
   * @minLength 1
   * @maxLength 80
   */
  name?: string;
};

export type GetWebhook200 = ApplicationIncomingWebhookResponse | ChannelFollowerWebhookResponse | GuildIncomingWebhookResponse;

export type GetSticker200 = GuildStickerResponse | StandardStickerResponse;

export type UpdateWebhookByToken200 = ApplicationIncomingWebhookResponse | ChannelFollowerWebhookResponse | GuildIncomingWebhookResponse;

export type UpdateWebhookByTokenBodyAvatar = string | null;

export type UpdateWebhookByTokenBody = {
  avatar?: UpdateWebhookByTokenBodyAvatar;
  /**
   * @minLength 1
   * @maxLength 80
   */
  name?: string;
};

export type ExecuteWebhookBodyThree = IncomingWebhookRequestPartial | IncomingWebhookUpdateRequestPartial;

export type ExecuteWebhookBodyTwo = IncomingWebhookRequestPartial | IncomingWebhookUpdateRequestPartial;

export type ExecuteWebhookBodyOne = IncomingWebhookRequestPartial | IncomingWebhookUpdateRequestPartial;

export type ExecuteWebhookParams = {
wait?: boolean;
thread_id?: SnowflakeType;
};

export type GetWebhookByToken200 = ApplicationIncomingWebhookResponse | ChannelFollowerWebhookResponse | GuildIncomingWebhookResponse;

export type UpdateStageInstanceBody = {
  privacy_level?: StageInstancesPrivacyLevels;
  /**
   * @minLength 1
   * @maxLength 120
   */
  topic?: string;
};

export type SetGuildMfaLevelBody = {
  level: GuildMFALevel;
};

export type ListGuildBans200 = GuildBanResponse[] | null;

export type ListGuildBansParams = {
limit?: number;
before?: SnowflakeType;
after?: SnowflakeType;
};

/**
 * @minimum 0
 * @maximum 604800
 */
export type BanUserFromGuildBodyDeleteMessageSeconds = number | null;

/**
 * @minimum 0
 * @maximum 7
 */
export type BanUserFromGuildBodyDeleteMessageDays = number | null;

export type BanUserFromGuildBody = {
  /**
   * @minimum 0
   * @maximum 7
   */
  delete_message_days?: BanUserFromGuildBodyDeleteMessageDays;
  /**
   * @minimum 0
   * @maximum 604800
   */
  delete_message_seconds?: BanUserFromGuildBodyDeleteMessageSeconds;
};

export type PruneGuildBodyIncludeRolesOneOfItem = null | SnowflakeType;

export type PruneGuildBodyIncludeRoles = string | PruneGuildBodyIncludeRolesOneOfItem[] | null;

/**
 * @minimum 1
 * @maximum 30
 */
export type PruneGuildBodyDays = number | null;

export type PruneGuildBodyComputePruneCount = boolean | null;

export type PruneGuildBody = {
  compute_prune_count?: PruneGuildBodyComputePruneCount;
  /**
   * @minimum 1
   * @maximum 30
   */
  days?: PruneGuildBodyDays;
  include_roles?: PruneGuildBodyIncludeRoles;
};

export type PreviewPruneGuildIncludeRolesOneOfItem = null | SnowflakeType;

export type PreviewPruneGuildParams = {
days?: number;
include_roles?: string | PreviewPruneGuildIncludeRolesOneOfItem[];
};

export type BulkUpdateGuildRolesBodyItemPosition = number | null;

export type BulkUpdateGuildRolesBodyItemId = null | SnowflakeType;

export type BulkUpdateGuildRolesBodyItem = {
  id?: BulkUpdateGuildRolesBodyItemId;
  position?: BulkUpdateGuildRolesBodyItemPosition;
};

/**
 * @maxLength 100
 */
export type CreateGuildRoleBodyUnicodeEmoji = string | null;

export type CreateGuildRoleBodyPermissions = number | null;

/**
 * @maxLength 100
 */
export type CreateGuildRoleBodyName = string | null;

export type CreateGuildRoleBodyMentionable = boolean | null;

export type CreateGuildRoleBodyIcon = string | null;

export type CreateGuildRoleBodyHoist = boolean | null;

/**
 * @minimum 0
 * @maximum 16777215
 */
export type CreateGuildRoleBodyColor = number | null;

export type CreateGuildRoleBody = {
  /**
   * @minimum 0
   * @maximum 16777215
   */
  color?: CreateGuildRoleBodyColor;
  hoist?: CreateGuildRoleBodyHoist;
  icon?: CreateGuildRoleBodyIcon;
  mentionable?: CreateGuildRoleBodyMentionable;
  /** @maxLength 100 */
  name?: CreateGuildRoleBodyName;
  permissions?: CreateGuildRoleBodyPermissions;
  /** @maxLength 100 */
  unicode_emoji?: CreateGuildRoleBodyUnicodeEmoji;
};

/**
 * @maxLength 100
 */
export type UpdateGuildRoleBodyUnicodeEmoji = string | null;

export type UpdateGuildRoleBodyPermissions = number | null;

/**
 * @maxLength 100
 */
export type UpdateGuildRoleBodyName = string | null;

export type UpdateGuildRoleBodyMentionable = boolean | null;

export type UpdateGuildRoleBodyIcon = string | null;

export type UpdateGuildRoleBodyHoist = boolean | null;

/**
 * @minimum 0
 * @maximum 16777215
 */
export type UpdateGuildRoleBodyColor = number | null;

export type UpdateGuildRoleBody = {
  /**
   * @minimum 0
   * @maximum 16777215
   */
  color?: UpdateGuildRoleBodyColor;
  hoist?: UpdateGuildRoleBodyHoist;
  icon?: UpdateGuildRoleBodyIcon;
  mentionable?: UpdateGuildRoleBodyMentionable;
  /** @maxLength 100 */
  name?: UpdateGuildRoleBodyName;
  permissions?: UpdateGuildRoleBodyPermissions;
  /** @maxLength 100 */
  unicode_emoji?: UpdateGuildRoleBodyUnicodeEmoji;
};

export type UpdateGuildWidgetSettingsBodyEnabled = boolean | null;

export type UpdateGuildWidgetSettingsBodyChannelId = null | SnowflakeType;

export type UpdateGuildWidgetSettingsBody = {
  channel_id?: UpdateGuildWidgetSettingsBodyChannelId;
  enabled?: UpdateGuildWidgetSettingsBodyEnabled;
};

export type CreateGuildEmojiBodyRolesAnyOfItem = null | SnowflakeType;

/**
 * @maxItems 1521
 */
export type CreateGuildEmojiBodyRoles = CreateGuildEmojiBodyRolesAnyOfItem[] | null;

export type CreateGuildEmojiBody = {
  image: string;
  /**
   * @minLength 2
   * @maxLength 32
   */
  name: string;
  /** @maxItems 1521 */
  roles?: CreateGuildEmojiBodyRoles;
};

export type ListGuildEmojis200 = EmojiResponse[] | null;

export type UpdateGuildEmojiBodyRolesAnyOfItem = null | SnowflakeType;

/**
 * @maxItems 1521
 */
export type UpdateGuildEmojiBodyRoles = UpdateGuildEmojiBodyRolesAnyOfItem[] | null;

export type UpdateGuildEmojiBody = {
  /**
   * @minLength 2
   * @maxLength 32
   */
  name?: string;
  /** @maxItems 1521 */
  roles?: UpdateGuildEmojiBodyRoles;
};

export type ListGuildVoiceRegions200 = VoiceRegionResponse[] | null;

export type ListGuildInvites200AnyOfItem = FriendInviteResponse | GroupDMInviteResponse | GuildInviteResponse;

export type ListGuildInvites200 = ListGuildInvites200AnyOfItem[] | null;

export type ListGuildMembersParams = {
limit?: number;
after?: number;
};

export type UpdateGuildMemberBodyRolesAnyOfItem = null | SnowflakeType;

/**
 * @maxItems 1521
 */
export type UpdateGuildMemberBodyRoles = UpdateGuildMemberBodyRolesAnyOfItem[] | null;

/**
 * @maxLength 32
 */
export type UpdateGuildMemberBodyNick = string | null;

export type UpdateGuildMemberBodyMute = boolean | null;

export type UpdateGuildMemberBodyFlags = number | null;

export type UpdateGuildMemberBodyDeaf = boolean | null;

export type UpdateGuildMemberBodyCommunicationDisabledUntil = string | null;

export type UpdateGuildMemberBodyChannelId = null | SnowflakeType;

export type UpdateGuildMemberBody = {
  channel_id?: UpdateGuildMemberBodyChannelId;
  communication_disabled_until?: UpdateGuildMemberBodyCommunicationDisabledUntil;
  deaf?: UpdateGuildMemberBodyDeaf;
  flags?: UpdateGuildMemberBodyFlags;
  mute?: UpdateGuildMemberBodyMute;
  /** @maxLength 32 */
  nick?: UpdateGuildMemberBodyNick;
  /** @maxItems 1521 */
  roles?: UpdateGuildMemberBodyRoles;
};

export type AddGuildMemberBodyRolesAnyOfItem = null | SnowflakeType;

/**
 * @maxItems 1521
 */
export type AddGuildMemberBodyRoles = AddGuildMemberBodyRolesAnyOfItem[] | null;

/**
 * @maxLength 32
 */
export type AddGuildMemberBodyNick = string | null;

export type AddGuildMemberBodyMute = boolean | null;

export type AddGuildMemberBodyFlags = number | null;

export type AddGuildMemberBodyDeaf = boolean | null;

export type AddGuildMemberBody = {
  /** @maxLength 152133 */
  access_token: string;
  deaf?: AddGuildMemberBodyDeaf;
  flags?: AddGuildMemberBodyFlags;
  mute?: AddGuildMemberBodyMute;
  /** @maxLength 32 */
  nick?: AddGuildMemberBodyNick;
  /** @maxItems 1521 */
  roles?: AddGuildMemberBodyRoles;
};

/**
 * @minimum 0
 */
export type BulkUpdateGuildChannelsBodyItemPosition = number | null;

export type BulkUpdateGuildChannelsBodyItemParentId = null | SnowflakeType;

export type BulkUpdateGuildChannelsBodyItemLockPermissions = boolean | null;

export type BulkUpdateGuildChannelsBodyItem = {
  id?: SnowflakeType;
  lock_permissions?: BulkUpdateGuildChannelsBodyItemLockPermissions;
  parent_id?: BulkUpdateGuildChannelsBodyItemParentId;
  /** @minimum 0 */
  position?: BulkUpdateGuildChannelsBodyItemPosition;
};

export type ListGuildChannels200AnyOfItem = GuildChannelResponse | PrivateChannelResponse | PrivateGroupChannelResponse | ThreadResponse;

export type ListGuildChannels200 = ListGuildChannels200AnyOfItem[] | null;

export type GetGuildWebhooks200AnyOfItem = ApplicationIncomingWebhookResponse | ChannelFollowerWebhookResponse | GuildIncomingWebhookResponse;

export type GetGuildWebhooks200 = GetGuildWebhooks200AnyOfItem[] | null;

/**
 * @maxLength 100
 */
export type CreateGuildStickerBodyDescription = string | null;

export type CreateGuildStickerBody = {
  /** @maxLength 100 */
  description?: CreateGuildStickerBodyDescription;
  file: string;
  /**
   * @minLength 2
   * @maxLength 30
   */
  name: string;
  /**
   * @minLength 1
   * @maxLength 200
   */
  tags: string;
};

/**
 * @minimum 0
 * @maximum 604800
 */
export type BulkBanUsersFromGuildBodyDeleteMessageSeconds = number | null;

export type BulkBanUsersFromGuildBody = {
  /**
   * @minimum 0
   * @maximum 604800
   */
  delete_message_seconds?: BulkBanUsersFromGuildBodyDeleteMessageSeconds;
  /** @maxItems 200 */
  user_ids: SnowflakeType[];
};

/**
 * @maxLength 100
 */
export type UpdateGuildStickerBodyDescription = string | null;

export type UpdateGuildStickerBody = {
  /** @maxLength 100 */
  description?: UpdateGuildStickerBodyDescription;
  /**
   * @minLength 2
   * @maxLength 30
   */
  name?: string;
  /**
   * @minLength 1
   * @maxLength 200
   */
  tags?: string;
};

/**
 * @maxLength 120
 */
export type CreateGuildTemplateBodyDescription = string | null;

export type CreateGuildTemplateBody = {
  /** @maxLength 120 */
  description?: CreateGuildTemplateBodyDescription;
  /**
   * @minLength 1
   * @maxLength 100
   */
  name: string;
};

export type ListGuildTemplates200 = GuildTemplateResponse[] | null;

/**
 * @maxLength 120
 */
export type UpdateGuildTemplateBodyDescription = string | null;

export type UpdateGuildTemplateBody = {
  /** @maxLength 120 */
  description?: UpdateGuildTemplateBodyDescription;
  /**
   * @minLength 1
   * @maxLength 100
   */
  name?: string;
};

export type GetGuildWidgetPngParams = {
style?: WidgetImageStyles;
};

export type ListGuildAuditLogEntriesParams = {
user_id?: SnowflakeType;
target_id?: SnowflakeType;
action_type?: number;
before?: SnowflakeType;
after?: SnowflakeType;
limit?: number;
};

export type ListGuildIntegrations200AnyOfItem = DiscordIntegrationResponse | ExternalConnectionIntegrationResponse | GuildSubscriptionIntegrationResponse;

export type ListGuildIntegrations200 = ListGuildIntegrations200AnyOfItem[] | null;

export type UpdateVoiceStateBodySuppress = boolean | null;

export type UpdateVoiceStateBodyChannelId = null | SnowflakeType;

export type UpdateVoiceStateBody = {
  channel_id?: UpdateVoiceStateBodyChannelId;
  suppress?: UpdateVoiceStateBodySuppress;
};

export type CreateGuildScheduledEvent200 = ExternalScheduledEventResponse | StageScheduledEventResponse | VoiceScheduledEventResponse;

export type CreateGuildScheduledEventBody = ExternalScheduledEventCreateRequest | StageScheduledEventCreateRequest | VoiceScheduledEventCreateRequest;

export type ListGuildScheduledEvents200AnyOfItem = ExternalScheduledEventResponse | StageScheduledEventResponse | VoiceScheduledEventResponse;

export type ListGuildScheduledEvents200 = ListGuildScheduledEvents200AnyOfItem[] | null;

export type ListGuildScheduledEventsParams = {
with_user_count?: boolean;
};

export type UpdateGuildScheduledEvent200 = ExternalScheduledEventResponse | StageScheduledEventResponse | VoiceScheduledEventResponse;

export type UpdateGuildScheduledEventBody = ExternalScheduledEventPatchRequestPartial | StageScheduledEventPatchRequestPartial | VoiceScheduledEventPatchRequestPartial;

export type GetGuildScheduledEvent200 = ExternalScheduledEventResponse | StageScheduledEventResponse | VoiceScheduledEventResponse;

export type GetGuildScheduledEventParams = {
with_user_count?: boolean;
};

export type CreateGuildFromTemplateBodyIcon = string | null;

export type CreateGuildFromTemplateBody = {
  icon?: CreateGuildFromTemplateBodyIcon;
  /**
   * @minLength 2
   * @maxLength 100
   */
  name: string;
};

export type ExecuteSlackCompatibleWebhook200 = string | null;

export type ExecuteSlackCompatibleWebhookParams = {
wait?: boolean;
thread_id?: SnowflakeType;
};

export type ExecuteGithubCompatibleWebhookParams = {
wait?: boolean;
thread_id?: SnowflakeType;
};

export type UpdateWebhookMessageBodyThreeAllOf = {
  'files[0]'?: string;
  'files[1]'?: string;
  'files[2]'?: string;
  'files[3]'?: string;
  'files[4]'?: string;
  'files[5]'?: string;
  'files[6]'?: string;
  'files[7]'?: string;
  'files[8]'?: string;
  'files[9]'?: string;
};

export type UpdateWebhookMessageBodyThree = IncomingWebhookUpdateRequestPartial & UpdateWebhookMessageBodyThreeAllOf;

export type UpdateWebhookMessageParams = {
thread_id?: SnowflakeType;
};

export type DeleteWebhookMessageParams = {
thread_id?: SnowflakeType;
};

export type GetWebhookMessageParams = {
thread_id?: SnowflakeType;
};

export type ListPinnedMessages200 = MessageResponse[] | null;

export type CreateThreadBodyThree = CreateForumThreadRequest | CreateTextThreadWithoutMessageRequest;

export type CreateThreadBodyTwo = CreateForumThreadRequest | CreateTextThreadWithoutMessageRequest;

export type CreateThreadBodyOne = CreateForumThreadRequest | CreateTextThreadWithoutMessageRequest;

export type CreateChannelInvite200 = FriendInviteResponse | GroupDMInviteResponse | GuildInviteResponse;

export type CreateChannelInviteBody = CreateGroupDMInviteRequest | CreateGuildInviteRequest;

export type ListChannelInvites200AnyOfItem = FriendInviteResponse | GroupDMInviteResponse | GuildInviteResponse;

export type ListChannelInvites200 = ListChannelInvites200AnyOfItem[] | null;

export type CreateWebhookBodyAvatar = string | null;

export type CreateWebhookBody = {
  avatar?: CreateWebhookBodyAvatar;
  /**
   * @minLength 1
   * @maxLength 80
   */
  name: string;
};

export type ListChannelWebhooks200AnyOfItem = ApplicationIncomingWebhookResponse | ChannelFollowerWebhookResponse | GuildIncomingWebhookResponse;

export type ListChannelWebhooks200 = ListChannelWebhooks200AnyOfItem[] | null;

export type CreateMessageBodyThreeAllOf = {
  'files[0]'?: string;
  'files[1]'?: string;
  'files[2]'?: string;
  'files[3]'?: string;
  'files[4]'?: string;
  'files[5]'?: string;
  'files[6]'?: string;
  'files[7]'?: string;
  'files[8]'?: string;
  'files[9]'?: string;
};

export type CreateMessageBodyThree = MessageCreateRequest & CreateMessageBodyThreeAllOf;

export type ListMessages200 = MessageResponse[] | null;

export type ListMessagesParams = {
around?: SnowflakeType;
before?: SnowflakeType;
after?: SnowflakeType;
limit?: number;
};

export type UpdateMessageBodyThreeAllOf = {
  'files[0]'?: string;
  'files[1]'?: string;
  'files[2]'?: string;
  'files[3]'?: string;
  'files[4]'?: string;
  'files[5]'?: string;
  'files[6]'?: string;
  'files[7]'?: string;
  'files[8]'?: string;
  'files[9]'?: string;
};

export type UpdateMessageBodyThree = MessageEditRequestPartial & UpdateMessageBodyThreeAllOf;

export type FollowChannelBody = {
  webhook_channel_id: SnowflakeType;
};

export type AddGroupDmUser201 = PrivateChannelResponse | PrivateGroupChannelResponse;

/**
 * @maxLength 152133
 */
export type AddGroupDmUserBodyNick = string | null;

/**
 * @maxLength 152133
 */
export type AddGroupDmUserBodyAccessToken = string | null;

export type AddGroupDmUserBody = {
  /** @maxLength 152133 */
  access_token?: AddGroupDmUserBodyAccessToken;
  /** @maxLength 152133 */
  nick?: AddGroupDmUserBodyNick;
};

export type SetChannelPermissionOverwriteBodyType = null | ChannelPermissionOverwrites;

export type SetChannelPermissionOverwriteBodyDeny = number | null;

export type SetChannelPermissionOverwriteBodyAllow = number | null;

export type SetChannelPermissionOverwriteBody = {
  allow?: SetChannelPermissionOverwriteBodyAllow;
  deny?: SetChannelPermissionOverwriteBodyDeny;
  type?: SetChannelPermissionOverwriteBodyType;
};

export type ListThreadMembersParams = {
with_member?: boolean;
limit?: number;
after?: SnowflakeType;
};

export type GetThreadMemberParams = {
with_member?: boolean;
};

export type CreateInteractionResponseBodyThree = ApplicationCommandAutocompleteCallbackRequest | CreateMessageInteractionCallbackRequest | LaunchActivityInteractionCallbackRequest | ModalInteractionCallbackRequest | PongInteractionCallbackRequest | UpdateMessageInteractionCallbackRequest;

export type CreateInteractionResponseBodyTwo = ApplicationCommandAutocompleteCallbackRequest | CreateMessageInteractionCallbackRequest | LaunchActivityInteractionCallbackRequest | ModalInteractionCallbackRequest | PongInteractionCallbackRequest | UpdateMessageInteractionCallbackRequest;

export type CreateInteractionResponseBodyOne = ApplicationCommandAutocompleteCallbackRequest | CreateMessageInteractionCallbackRequest | LaunchActivityInteractionCallbackRequest | ModalInteractionCallbackRequest | PongInteractionCallbackRequest | UpdateMessageInteractionCallbackRequest;

export type CreateInteractionResponseParams = {
with_response?: boolean;
};

export type CreateApplicationEmojiBody = {
  image: string;
  /**
   * @minLength 2
   * @maxLength 32
   */
  name: string;
};

export type UpdateApplicationEmojiBody = {
  /**
   * @minLength 2
   * @maxLength 32
   */
  name?: string;
};

export type BulkSetApplicationCommands200 = ApplicationCommandResponse[] | null;

/**
 * @maxItems 110
 */
export type BulkSetApplicationCommandsBody = ApplicationCommandUpdateRequest[] | null;

export type ListApplicationCommands200 = ApplicationCommandResponse[] | null;

export type ListApplicationCommandsParams = {
with_localizations?: boolean;
};

export type UploadApplicationAttachmentBody = {
  file: string;
};

export type GetEntitlements200Item = null | EntitlementResponse;

export type GetEntitlementsSkuIdsOneOfItem = null | SnowflakeType;

export type GetEntitlementsParams = {
user_id?: SnowflakeType;
sku_ids: string | GetEntitlementsSkuIdsOneOfItem[];
guild_id?: SnowflakeType;
before?: SnowflakeType;
after?: SnowflakeType;
limit?: number;
exclude_ended?: boolean;
only_active?: boolean;
};

/**
 * @maxLength 32
 */
export type UpdateMyGuildMemberBodyNick = string | null;

export type UpdateMyGuildMemberBody = {
  /** @maxLength 32 */
  nick?: UpdateMyGuildMemberBodyNick;
};

export type SearchGuildMembersParams = {
limit: number;
query: string;
};

export type UpdateSelfVoiceStateBodySuppress = boolean | null;

export type UpdateSelfVoiceStateBodyRequestToSpeakTimestamp = string | null;

export type UpdateSelfVoiceStateBodyChannelId = null | SnowflakeType;

export type UpdateSelfVoiceStateBody = {
  channel_id?: UpdateSelfVoiceStateBodyChannelId;
  request_to_speak_timestamp?: UpdateSelfVoiceStateBodyRequestToSpeakTimestamp;
  suppress?: UpdateSelfVoiceStateBodySuppress;
};

export type CreateAutoModerationRule200 = DefaultKeywordRuleResponse | KeywordRuleResponse | MLSpamRuleResponse | MentionSpamRuleResponse | SpamLinkRuleResponse;

export type CreateAutoModerationRuleBody = DefaultKeywordListUpsertRequest | KeywordUpsertRequest | MLSpamUpsertRequest | MentionSpamUpsertRequest;

export type ListAutoModerationRules200AnyOfItem = DefaultKeywordRuleResponse | KeywordRuleResponse | MLSpamRuleResponse | MentionSpamRuleResponse | SpamLinkRuleResponse | null;

export type ListAutoModerationRules200 = ListAutoModerationRules200AnyOfItem[] | null;

export type UpdateAutoModerationRule200 = DefaultKeywordRuleResponse | KeywordRuleResponse | MLSpamRuleResponse | MentionSpamRuleResponse | SpamLinkRuleResponse;

export type UpdateAutoModerationRuleBody = DefaultKeywordListUpsertRequestPartial | KeywordUpsertRequestPartial | MLSpamUpsertRequestPartial | MentionSpamUpsertRequestPartial;

export type GetAutoModerationRule200 = DefaultKeywordRuleResponse | KeywordRuleResponse | MLSpamRuleResponse | MentionSpamRuleResponse | SpamLinkRuleResponse;

export type ListGuildScheduledEventUsers200 = ScheduledEventUserResponse[] | null;

export type ListGuildScheduledEventUsersParams = {
with_member?: boolean;
limit?: number;
before?: SnowflakeType;
after?: SnowflakeType;
};

export type UpdateOriginalWebhookMessageBodyThreeAllOf = {
  'files[0]'?: string;
  'files[1]'?: string;
  'files[2]'?: string;
  'files[3]'?: string;
  'files[4]'?: string;
  'files[5]'?: string;
  'files[6]'?: string;
  'files[7]'?: string;
  'files[8]'?: string;
  'files[9]'?: string;
};

export type UpdateOriginalWebhookMessageBodyThree = IncomingWebhookUpdateRequestPartial & UpdateOriginalWebhookMessageBodyThreeAllOf;

export type UpdateOriginalWebhookMessageParams = {
thread_id?: SnowflakeType;
};

export type DeleteOriginalWebhookMessageParams = {
thread_id?: SnowflakeType;
};

export type GetOriginalWebhookMessageParams = {
thread_id?: SnowflakeType;
};

export type GetAnswerVotersParams = {
after?: SnowflakeType;
limit?: number;
};

export type ListMessageReactionsByEmojiParams = {
after?: SnowflakeType;
limit?: number;
type?: ReactionTypes;
};

export type BulkDeleteMessagesBody = {
  /**
   * @minItems 2
   * @maxItems 100
   */
  messages: SnowflakeType[];
};

export type BulkSetGuildApplicationCommands200 = ApplicationCommandResponse[] | null;

/**
 * @maxItems 110
 */
export type BulkSetGuildApplicationCommandsBody = ApplicationCommandUpdateRequest[] | null;

export type ListGuildApplicationCommands200 = ApplicationCommandResponse[] | null;

export type ListGuildApplicationCommandsParams = {
with_localizations?: boolean;
};

export type UpdateApplicationRoleConnectionsMetadata200 = ApplicationRoleConnectionsMetadataItemResponse[] | null;

/**
 * @maxItems 5
 */
export type UpdateApplicationRoleConnectionsMetadataBody = ApplicationRoleConnectionsMetadataItemRequest[] | null;

export type GetApplicationRoleConnectionsMetadata200 = ApplicationRoleConnectionsMetadataItemResponse[] | null;

/**
 * @maxLength 100
 */
export type UpdateApplicationUserRoleConnectionBodyPlatformUsername = string | null;

/**
 * @maxLength 50
 */
export type UpdateApplicationUserRoleConnectionBodyPlatformName = string | null;

export type UpdateApplicationUserRoleConnectionBody = {
  metadata?: UpdateApplicationUserRoleConnectionBodyMetadata;
  /** @maxLength 50 */
  platform_name?: UpdateApplicationUserRoleConnectionBodyPlatformName;
  /** @maxLength 100 */
  platform_username?: UpdateApplicationUserRoleConnectionBodyPlatformUsername;
};

export type UpdateApplicationUserRoleConnectionBodyMetadataAnyOf = {[key: string]: string};

export type UpdateApplicationUserRoleConnectionBodyMetadata = UpdateApplicationUserRoleConnectionBodyMetadataAnyOf | null;

export type ListPublicArchivedThreadsParams = {
before?: string;
limit?: number;
};

export type ListPrivateArchivedThreadsParams = {
before?: string;
limit?: number;
};

/**
 * @maxItems 100
 */
export type SetGuildApplicationCommandPermissionsBodyPermissions = ApplicationCommandPermission[] | null;

export type SetGuildApplicationCommandPermissionsBody = {
  /** @maxItems 100 */
  permissions?: SetGuildApplicationCommandPermissionsBodyPermissions;
};

export type ListMyPrivateArchivedThreadsParams = {
before?: SnowflakeType;
limit?: number;
};

export type CreateStageInstanceBodySendStartNotification = boolean | null;

export type CreateStageInstanceBodyPrivacyLevel = null | StageInstancesPrivacyLevels;

export type CreateStageInstanceBodyGuildScheduledEventId = null | SnowflakeType;

export type CreateStageInstanceBody = {
  channel_id: SnowflakeType;
  guild_scheduled_event_id?: CreateStageInstanceBodyGuildScheduledEventId;
  privacy_level?: CreateStageInstanceBodyPrivacyLevel;
  send_start_notification?: CreateStageInstanceBodySendStartNotification;
  /**
   * @minLength 1
   * @maxLength 120
   */
  topic: string;
};

export type ListVoiceRegions200 = VoiceRegionResponse[] | null;

export type ListMyGuilds200 = MyGuildResponse[] | null;

export type ListMyGuildsParams = {
before?: SnowflakeType;
after?: SnowflakeType;
limit?: number;
with_counts?: boolean;
};

export type CreateDm200 = PrivateChannelResponse | PrivateGroupChannelResponse;

export type ListMyConnections200 = ConnectedAccountResponse[] | null;

export type ErrorResponseAllOf = {
  errors?: ErrorDetails;
};

/**
 * Errors object returned by the Discord API
 */
export type ErrorResponse = Error & ErrorResponseAllOf;

/**
 * Client error response
 */
export type ClientErrorResponseResponse = ErrorResponse;

export type ErrorDetailsOneOf = {[key: string]: ErrorDetails};

/**
 * A single error, either for an API response or a specific field.
 */
export interface Error {
  /** Discord internal error code. See error code reference */
  code: number;
  /** Human-readable error message */
  message: string;
}

export interface InnerErrors {
  /** The list of errors for this field */
  _errors: Error[];
}

export type ErrorDetails = ErrorDetailsOneOf | InnerErrors;

export type WidgetUserDiscriminator = string;

export type WidgetSettingsResponseChannelId = null | SnowflakeType;

export interface WidgetSettingsResponse {
  channel_id?: WidgetSettingsResponseChannelId;
  enabled: boolean;
}

export type WidgetResponseInstantInvite = string | null;

export interface WidgetResponse {
  channels: WidgetChannel[];
  id: SnowflakeType;
  instant_invite?: WidgetResponseInstantInvite;
  members: WidgetMember[];
  name: string;
  presence_count: number;
}

export type WidgetMemberSuppress = boolean | null;

export type WidgetMemberSelfMute = boolean | null;

export type WidgetMemberSelfDeaf = boolean | null;

export type WidgetMemberMute = boolean | null;

export type WidgetMemberDeaf = boolean | null;

export type WidgetMemberChannelId = null | SnowflakeType;

export interface WidgetMember {
  activity?: WidgetMemberActivity;
  avatar?: null;
  avatar_url: string;
  channel_id?: WidgetMemberChannelId;
  deaf?: WidgetMemberDeaf;
  discriminator: WidgetUserDiscriminator;
  id: string;
  mute?: WidgetMemberMute;
  self_deaf?: WidgetMemberSelfDeaf;
  self_mute?: WidgetMemberSelfMute;
  status: string;
  suppress?: WidgetMemberSuppress;
  username: string;
}

export type WidgetImageStyles = string;

export interface WidgetChannel {
  id: SnowflakeType;
  name: string;
  position: number;
}

export interface WidgetActivity {
  name: string;
}

export type WidgetMemberActivity = null | WidgetActivity;

/**
 * @maxItems 5
 */
export type WelcomeScreenPatchRequestPartialWelcomeChannels = GuildWelcomeChannel[] | null;

export type WelcomeScreenPatchRequestPartialEnabled = boolean | null;

/**
 * @maxLength 140
 */
export type WelcomeScreenPatchRequestPartialDescription = string | null;

export interface WelcomeScreenPatchRequestPartial {
  /** @maxLength 140 */
  description?: WelcomeScreenPatchRequestPartialDescription;
  enabled?: WelcomeScreenPatchRequestPartialEnabled;
  /** @maxItems 5 */
  welcome_channels?: WelcomeScreenPatchRequestPartialWelcomeChannels;
}

export interface WelcomeMessageResponse {
  author_ids: SnowflakeType[];
  message: string;
}

export type WebhookTypes = number;

export type WebhookSourceGuildResponseIcon = string | null;

export interface WebhookSourceGuildResponse {
  icon?: WebhookSourceGuildResponseIcon;
  id: SnowflakeType;
  name: string;
}

export interface WebhookSourceChannelResponse {
  id: SnowflakeType;
  name: string;
}

/**
 * @maxLength 152133
 */
export type WebhookSlackEmbedFieldValue = string | null;

/**
 * @maxLength 152133
 */
export type WebhookSlackEmbedFieldName = string | null;

export type WebhookSlackEmbedFieldInline = boolean | null;

export interface WebhookSlackEmbedField {
  inline?: WebhookSlackEmbedFieldInline;
  /** @maxLength 152133 */
  name?: WebhookSlackEmbedFieldName;
  /** @maxLength 152133 */
  value?: WebhookSlackEmbedFieldValue;
}

export type WebhookSlackEmbedTs = number | null;

/**
 * @maxLength 2048
 */
export type WebhookSlackEmbedTitleLink = string | null;

/**
 * @maxLength 152133
 */
export type WebhookSlackEmbedTitle = string | null;

/**
 * @maxLength 2048
 */
export type WebhookSlackEmbedThumbUrl = string | null;

/**
 * @maxLength 152133
 */
export type WebhookSlackEmbedText = string | null;

/**
 * @maxLength 152133
 */
export type WebhookSlackEmbedPretext = string | null;

/**
 * @maxLength 2048
 */
export type WebhookSlackEmbedImageUrl = string | null;

/**
 * @maxLength 2048
 */
export type WebhookSlackEmbedFooterIcon = string | null;

/**
 * @maxLength 152133
 */
export type WebhookSlackEmbedFooter = string | null;

/**
 * @maxItems 1521
 */
export type WebhookSlackEmbedFields = WebhookSlackEmbedField[] | null;

/**
 * @maxLength 7
 * @pattern ^#(([0-9a-fA-F]{2}){3}|([0-9a-fA-F]){3})$
 */
export type WebhookSlackEmbedColor = string | null;

/**
 * @maxLength 152133
 */
export type WebhookSlackEmbedAuthorName = string | null;

/**
 * @maxLength 2048
 */
export type WebhookSlackEmbedAuthorLink = string | null;

/**
 * @maxLength 2048
 */
export type WebhookSlackEmbedAuthorIcon = string | null;

export interface WebhookSlackEmbed {
  /** @maxLength 2048 */
  author_icon?: WebhookSlackEmbedAuthorIcon;
  /** @maxLength 2048 */
  author_link?: WebhookSlackEmbedAuthorLink;
  /** @maxLength 152133 */
  author_name?: WebhookSlackEmbedAuthorName;
  /**
   * @maxLength 7
   * @pattern ^#(([0-9a-fA-F]{2}){3}|([0-9a-fA-F]){3})$
   */
  color?: WebhookSlackEmbedColor;
  /** @maxItems 1521 */
  fields?: WebhookSlackEmbedFields;
  /** @maxLength 152133 */
  footer?: WebhookSlackEmbedFooter;
  /** @maxLength 2048 */
  footer_icon?: WebhookSlackEmbedFooterIcon;
  /** @maxLength 2048 */
  image_url?: WebhookSlackEmbedImageUrl;
  /** @maxLength 152133 */
  pretext?: WebhookSlackEmbedPretext;
  /** @maxLength 152133 */
  text?: WebhookSlackEmbedText;
  /** @maxLength 2048 */
  thumb_url?: WebhookSlackEmbedThumbUrl;
  /** @maxLength 152133 */
  title?: WebhookSlackEmbedTitle;
  /** @maxLength 2048 */
  title_link?: WebhookSlackEmbedTitleLink;
  ts?: WebhookSlackEmbedTs;
}

export type VoiceStateResponseSelfStream = boolean | null;

export type VoiceStateResponseRequestToSpeakTimestamp = string | null;

export type VoiceStateResponseMember = null | GuildMemberResponse;

export type VoiceStateResponseGuildId = null | SnowflakeType;

export type VoiceStateResponseChannelId = null | SnowflakeType;

export interface VoiceStateResponse {
  channel_id?: VoiceStateResponseChannelId;
  deaf: boolean;
  guild_id?: VoiceStateResponseGuildId;
  member?: VoiceStateResponseMember;
  mute: boolean;
  request_to_speak_timestamp?: VoiceStateResponseRequestToSpeakTimestamp;
  self_deaf: boolean;
  self_mute: boolean;
  self_stream?: VoiceStateResponseSelfStream;
  self_video: boolean;
  session_id: string;
  suppress: boolean;
  user_id: SnowflakeType;
}

export type VoiceScheduledEventResponseUserRsvp = null | ScheduledEventUserResponse;

export type VoiceScheduledEventResponseUserCount = number | null;

export type VoiceScheduledEventResponseScheduledEndTime = string | null;

export type VoiceScheduledEventResponseImage = string | null;

export type VoiceScheduledEventResponseEntityType = typeof VoiceScheduledEventResponseEntityType[keyof typeof VoiceScheduledEventResponseEntityType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const VoiceScheduledEventResponseEntityType = {
  NUMBER_2: 2,
} as const;

export type VoiceScheduledEventResponseEntityMetadata = null | EntityMetadataVoiceResponse;

export type VoiceScheduledEventResponseEntityId = null | SnowflakeType;

export type VoiceScheduledEventResponseDescription = string | null;

export type VoiceScheduledEventResponseCreatorId = null | SnowflakeType;

export type VoiceScheduledEventResponseCreator = null | UserResponse;

export type VoiceScheduledEventResponseChannelId = null | SnowflakeType;

export interface VoiceScheduledEventResponse {
  channel_id?: VoiceScheduledEventResponseChannelId;
  creator?: VoiceScheduledEventResponseCreator;
  creator_id?: VoiceScheduledEventResponseCreatorId;
  description?: VoiceScheduledEventResponseDescription;
  entity_id?: VoiceScheduledEventResponseEntityId;
  entity_metadata?: VoiceScheduledEventResponseEntityMetadata;
  entity_type: VoiceScheduledEventResponseEntityType;
  guild_id: SnowflakeType;
  id: SnowflakeType;
  image?: VoiceScheduledEventResponseImage;
  name: string;
  privacy_level: GuildScheduledEventPrivacyLevels;
  scheduled_end_time?: VoiceScheduledEventResponseScheduledEndTime;
  scheduled_start_time: string;
  status: GuildScheduledEventStatuses;
  user_count?: VoiceScheduledEventResponseUserCount;
  user_rsvp?: VoiceScheduledEventResponseUserRsvp;
}

export type VoiceScheduledEventPatchRequestPartialStatus = null | GuildScheduledEventStatuses;

export type VoiceScheduledEventPatchRequestPartialScheduledEndTime = string | null;

export type VoiceScheduledEventPatchRequestPartialImage = string | null;

export type VoiceScheduledEventPatchRequestPartialEntityType = null | 2;

export type VoiceScheduledEventPatchRequestPartialEntityMetadata = null | EntityMetadataVoice;

/**
 * @maxLength 1000
 */
export type VoiceScheduledEventPatchRequestPartialDescription = string | null;

export type VoiceScheduledEventPatchRequestPartialChannelId = null | SnowflakeType;

export interface VoiceScheduledEventPatchRequestPartial {
  channel_id?: VoiceScheduledEventPatchRequestPartialChannelId;
  /** @maxLength 1000 */
  description?: VoiceScheduledEventPatchRequestPartialDescription;
  entity_metadata?: VoiceScheduledEventPatchRequestPartialEntityMetadata;
  entity_type?: VoiceScheduledEventPatchRequestPartialEntityType;
  image?: VoiceScheduledEventPatchRequestPartialImage;
  /** @maxLength 100 */
  name?: string;
  privacy_level?: GuildScheduledEventPrivacyLevels;
  scheduled_end_time?: VoiceScheduledEventPatchRequestPartialScheduledEndTime;
  scheduled_start_time?: string;
  status?: VoiceScheduledEventPatchRequestPartialStatus;
}

export type VoiceScheduledEventCreateRequestScheduledEndTime = string | null;

export type VoiceScheduledEventCreateRequestImage = string | null;

export type VoiceScheduledEventCreateRequestEntityType = typeof VoiceScheduledEventCreateRequestEntityType[keyof typeof VoiceScheduledEventCreateRequestEntityType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const VoiceScheduledEventCreateRequestEntityType = {
  NUMBER_2: 2,
} as const;

export type VoiceScheduledEventCreateRequestEntityMetadata = null | EntityMetadataVoice;

/**
 * @maxLength 1000
 */
export type VoiceScheduledEventCreateRequestDescription = string | null;

export type VoiceScheduledEventCreateRequestChannelId = null | SnowflakeType;

export interface VoiceScheduledEventCreateRequest {
  channel_id?: VoiceScheduledEventCreateRequestChannelId;
  /** @maxLength 1000 */
  description?: VoiceScheduledEventCreateRequestDescription;
  entity_metadata?: VoiceScheduledEventCreateRequestEntityMetadata;
  entity_type: VoiceScheduledEventCreateRequestEntityType;
  image?: VoiceScheduledEventCreateRequestImage;
  /** @maxLength 100 */
  name: string;
  privacy_level: GuildScheduledEventPrivacyLevels;
  scheduled_end_time?: VoiceScheduledEventCreateRequestScheduledEndTime;
  scheduled_start_time: string;
}

export interface VoiceRegionResponse {
  custom: boolean;
  deprecated: boolean;
  id: string;
  name: string;
  optimal: boolean;
}

export type VideoQualityModes = number;

export type VerificationLevels = number;

export type VanityURLResponseCode = string | null;

export interface VanityURLErrorResponse {
  code: number;
  message: string;
}

export type VanityURLResponseError = null | VanityURLErrorResponse;

export interface VanityURLResponse {
  code?: VanityURLResponseCode;
  error?: VanityURLResponseError;
  uses: number;
}

export type UserSelectDefaultValueResponseType = typeof UserSelectDefaultValueResponseType[keyof typeof UserSelectDefaultValueResponseType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UserSelectDefaultValueResponseType = {
  user: 'user',
} as const;

export interface UserSelectDefaultValueResponse {
  id: SnowflakeType;
  type: UserSelectDefaultValueResponseType;
}

export type UserSelectDefaultValueType = typeof UserSelectDefaultValueType[keyof typeof UserSelectDefaultValueType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UserSelectDefaultValueType = {
  user: 'user',
} as const;

export interface UserSelectDefaultValue {
  id: SnowflakeType;
  type: UserSelectDefaultValueType;
}

export type UserSelectType = typeof UserSelectType[keyof typeof UserSelectType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UserSelectType = {
  NUMBER_5: 5,
} as const;

/**
 * @maxLength 150
 */
export type UserSelectPlaceholder = string | null;

/**
 * @minimum 0
 * @maximum 25
 */
export type UserSelectMinValues = number | null;

/**
 * @minimum 1
 * @maximum 25
 */
export type UserSelectMaxValues = number | null;

export type UserSelectDisabled = boolean | null;

/**
 * @maxItems 25
 */
export type UserSelectDefaultValues = UserSelectDefaultValue[] | null;

export interface UserSelect {
  /** @maxLength 100 */
  custom_id: string;
  /** @maxItems 25 */
  default_values?: UserSelectDefaultValues;
  disabled?: UserSelectDisabled;
  /**
   * @minimum 1
   * @maximum 25
   */
  max_values?: UserSelectMaxValues;
  /**
   * @minimum 0
   * @maximum 25
   */
  min_values?: UserSelectMinValues;
  /** @maxLength 150 */
  placeholder?: UserSelectPlaceholder;
  type: UserSelectType;
}

export type UserResponseSystem = boolean | null;

export type UserResponseGlobalName = string | null;

export type UserResponseBot = boolean | null;

export type UserResponseBanner = string | null;

export type UserResponseAvatarDecorationData = null | UserAvatarDecorationResponse;

export type UserResponseAvatar = string | null;

export type UserResponseAccentColor = number | null;

export interface UserResponse {
  accent_color?: UserResponseAccentColor;
  avatar?: UserResponseAvatar;
  avatar_decoration_data?: UserResponseAvatarDecorationData;
  banner?: UserResponseBanner;
  bot?: UserResponseBot;
  discriminator: string;
  flags: Int53Type;
  global_name?: UserResponseGlobalName;
  id: SnowflakeType;
  public_flags: number;
  system?: UserResponseSystem;
  username: string;
}

export type UserPIIResponseVerified = boolean | null;

export type UserPIIResponseSystem = boolean | null;

export type UserPIIResponsePremiumType = null | PremiumTypes;

export type UserPIIResponseGlobalName = string | null;

export type UserPIIResponseEmail = string | null;

export type UserPIIResponseBot = boolean | null;

export type UserPIIResponseBanner = string | null;

export type UserPIIResponseAvatar = string | null;

export type UserPIIResponseAccentColor = number | null;

export interface UserPIIResponse {
  accent_color?: UserPIIResponseAccentColor;
  avatar?: UserPIIResponseAvatar;
  avatar_decoration_data?: UserPIIResponseAvatarDecorationData;
  banner?: UserPIIResponseBanner;
  bot?: UserPIIResponseBot;
  discriminator: string;
  email?: UserPIIResponseEmail;
  flags: Int53Type;
  global_name?: UserPIIResponseGlobalName;
  id: SnowflakeType;
  locale: AvailableLocalesEnum;
  mfa_enabled: boolean;
  premium_type?: UserPIIResponsePremiumType;
  public_flags: number;
  system?: UserPIIResponseSystem;
  username: string;
  verified?: UserPIIResponseVerified;
}

export type UserNotificationSettings = number;

export interface UserGuildOnboardingResponse {
  default_channel_ids: SnowflakeType[];
  enabled: boolean;
  guild_id: SnowflakeType;
  prompts: OnboardingPromptResponse[];
}

export type UserCommunicationDisabledActionResponseType = typeof UserCommunicationDisabledActionResponseType[keyof typeof UserCommunicationDisabledActionResponseType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UserCommunicationDisabledActionResponseType = {
  NUMBER_3: 3,
} as const;

export interface UserCommunicationDisabledActionMetadataResponse {
  duration_seconds: number;
}

export interface UserCommunicationDisabledActionResponse {
  metadata: UserCommunicationDisabledActionMetadataResponse;
  type: UserCommunicationDisabledActionResponseType;
}

/**
 * @minimum 0
 * @maximum 2419200
 */
export type UserCommunicationDisabledActionMetadataDurationSeconds = number | null;

export interface UserCommunicationDisabledActionMetadata {
  /**
   * @minimum 0
   * @maximum 2419200
   */
  duration_seconds?: UserCommunicationDisabledActionMetadataDurationSeconds;
}

export type UserCommunicationDisabledActionType = typeof UserCommunicationDisabledActionType[keyof typeof UserCommunicationDisabledActionType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UserCommunicationDisabledActionType = {
  NUMBER_3: 3,
} as const;

export interface UserCommunicationDisabledAction {
  metadata: UserCommunicationDisabledActionMetadata;
  type: UserCommunicationDisabledActionType;
}

export type UserAvatarDecorationResponseSkuId = null | SnowflakeType;

export interface UserAvatarDecorationResponse {
  asset: string;
  sku_id?: UserAvatarDecorationResponseSkuId;
}

export type UserPIIResponseAvatarDecorationData = null | UserAvatarDecorationResponse;

export type UpdateThreadTagRequestModerated = boolean | null;

export type UpdateThreadTagRequestId = null | SnowflakeType;

/**
 * @maxLength 100
 */
export type UpdateThreadTagRequestEmojiName = string | null;

export type UpdateThreadTagRequestEmojiId = null | SnowflakeType;

export interface UpdateThreadTagRequest {
  emoji_id?: UpdateThreadTagRequestEmojiId;
  /** @maxLength 100 */
  emoji_name?: UpdateThreadTagRequestEmojiName;
  id?: UpdateThreadTagRequestId;
  moderated?: UpdateThreadTagRequestModerated;
  /**
   * @minLength 0
   * @maxLength 20
   */
  name: string;
}

export type UpdateThreadRequestPartialVideoQualityMode = null | VideoQualityModes;

/**
 * @minimum 0
 * @maximum 99
 */
export type UpdateThreadRequestPartialUserLimit = number | null;

export type UpdateThreadRequestPartialRtcRegion = string | null;

/**
 * @minimum 0
 * @maximum 21600
 */
export type UpdateThreadRequestPartialRateLimitPerUser = number | null;

/**
 * @minLength 0
 * @maxLength 100
 */
export type UpdateThreadRequestPartialName = string | null;

export type UpdateThreadRequestPartialLocked = boolean | null;

export type UpdateThreadRequestPartialInvitable = boolean | null;

export type UpdateThreadRequestPartialFlags = number | null;

/**
 * @minimum 8000
 */
export type UpdateThreadRequestPartialBitrate = number | null;

export type UpdateThreadRequestPartialAutoArchiveDuration = null | ThreadAutoArchiveDuration;

export type UpdateThreadRequestPartialArchived = boolean | null;

/**
 * @maxItems 5
 */
export type UpdateThreadRequestPartialAppliedTags = SnowflakeType[] | null;

export interface UpdateThreadRequestPartial {
  /** @maxItems 5 */
  applied_tags?: UpdateThreadRequestPartialAppliedTags;
  archived?: UpdateThreadRequestPartialArchived;
  auto_archive_duration?: UpdateThreadRequestPartialAutoArchiveDuration;
  /** @minimum 8000 */
  bitrate?: UpdateThreadRequestPartialBitrate;
  flags?: UpdateThreadRequestPartialFlags;
  invitable?: UpdateThreadRequestPartialInvitable;
  locked?: UpdateThreadRequestPartialLocked;
  /**
   * @minLength 0
   * @maxLength 100
   */
  name?: UpdateThreadRequestPartialName;
  /**
   * @minimum 0
   * @maximum 21600
   */
  rate_limit_per_user?: UpdateThreadRequestPartialRateLimitPerUser;
  rtc_region?: UpdateThreadRequestPartialRtcRegion;
  /**
   * @minimum 0
   * @maximum 99
   */
  user_limit?: UpdateThreadRequestPartialUserLimit;
  video_quality_mode?: UpdateThreadRequestPartialVideoQualityMode;
}

export type UpdateOnboardingPromptRequestType = null | OnboardingPromptType;

export type UpdateOnboardingPromptRequestSingleSelect = boolean | null;

export type UpdateOnboardingPromptRequestRequired = boolean | null;

export type UpdateOnboardingPromptRequestInOnboarding = boolean | null;

export interface UpdateOnboardingPromptRequest {
  id: SnowflakeType;
  in_onboarding?: UpdateOnboardingPromptRequestInOnboarding;
  /**
   * @minItems 1
   * @maxItems 50
   */
  options: OnboardingPromptOptionRequest[];
  required?: UpdateOnboardingPromptRequestRequired;
  single_select?: UpdateOnboardingPromptRequestSingleSelect;
  /**
   * @minLength 1
   * @maxLength 100
   */
  title: string;
  type?: UpdateOnboardingPromptRequestType;
}

export type UpdateMessageInteractionCallbackResponseType = typeof UpdateMessageInteractionCallbackResponseType[keyof typeof UpdateMessageInteractionCallbackResponseType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateMessageInteractionCallbackResponseType = {
  NUMBER_7: 7,
} as const;

export interface UpdateMessageInteractionCallbackResponse {
  message: MessageResponse;
  type: UpdateMessageInteractionCallbackResponseType;
}

export type UpdateMessageInteractionCallbackRequestType = typeof UpdateMessageInteractionCallbackRequestType[keyof typeof UpdateMessageInteractionCallbackRequestType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateMessageInteractionCallbackRequestType = {
  NUMBER_6: 6,
  NUMBER_7: 7,
} as const;

export type UpdateMessageInteractionCallbackRequestData = null | IncomingWebhookUpdateForInteractionCallbackRequestPartial;

export interface UpdateMessageInteractionCallbackRequest {
  data?: UpdateMessageInteractionCallbackRequestData;
  type: UpdateMessageInteractionCallbackRequestType;
}

/**
 * @maxItems 15
 */
export type UpdateGuildOnboardingRequestPrompts = UpdateOnboardingPromptRequest[] | null;

export type UpdateGuildOnboardingRequestMode = null | GuildOnboardingMode;

export type UpdateGuildOnboardingRequestEnabled = boolean | null;

/**
 * @maxItems 500
 */
export type UpdateGuildOnboardingRequestDefaultChannelIds = SnowflakeType[] | null;

export interface UpdateGuildOnboardingRequest {
  /** @maxItems 500 */
  default_channel_ids?: UpdateGuildOnboardingRequestDefaultChannelIds;
  enabled?: UpdateGuildOnboardingRequestEnabled;
  mode?: UpdateGuildOnboardingRequestMode;
  /** @maxItems 15 */
  prompts?: UpdateGuildOnboardingRequestPrompts;
}

export type UpdateGuildChannelRequestPartialVideoQualityMode = null | VideoQualityModes;

/**
 * @minimum 0
 */
export type UpdateGuildChannelRequestPartialUserLimit = number | null;

export type UpdateGuildChannelRequestPartialType = null | 0 | 2 | 4 | 5 | 13 | 14 | 15;

/**
 * @minLength 0
 * @maxLength 4096
 */
export type UpdateGuildChannelRequestPartialTopic = string | null;

export type UpdateGuildChannelRequestPartialRtcRegion = string | null;

/**
 * @minimum 0
 * @maximum 21600
 */
export type UpdateGuildChannelRequestPartialRateLimitPerUser = number | null;

/**
 * @minimum 0
 */
export type UpdateGuildChannelRequestPartialPosition = number | null;

/**
 * @maxItems 100
 */
export type UpdateGuildChannelRequestPartialPermissionOverwrites = ChannelPermissionOverwriteRequest[] | null;

export type UpdateGuildChannelRequestPartialParentId = null | SnowflakeType;

export type UpdateGuildChannelRequestPartialNsfw = boolean | null;

export type UpdateGuildChannelRequestPartialFlags = number | null;

/**
 * @minimum 0
 * @maximum 21600
 */
export type UpdateGuildChannelRequestPartialDefaultThreadRateLimitPerUser = number | null;

export type UpdateGuildChannelRequestPartialDefaultSortOrder = null | ThreadSortOrder;

export type UpdateGuildChannelRequestPartialDefaultReactionEmoji = null | UpdateDefaultReactionEmojiRequest;

export type UpdateGuildChannelRequestPartialDefaultForumLayout = null | ForumLayout;

export type UpdateGuildChannelRequestPartialDefaultAutoArchiveDuration = null | ThreadAutoArchiveDuration;

/**
 * @minimum 8000
 */
export type UpdateGuildChannelRequestPartialBitrate = number | null;

/**
 * @maxItems 20
 */
export type UpdateGuildChannelRequestPartialAvailableTags = UpdateThreadTagRequest[] | null;

export interface UpdateGuildChannelRequestPartial {
  /** @maxItems 20 */
  available_tags?: UpdateGuildChannelRequestPartialAvailableTags;
  /** @minimum 8000 */
  bitrate?: UpdateGuildChannelRequestPartialBitrate;
  default_auto_archive_duration?: UpdateGuildChannelRequestPartialDefaultAutoArchiveDuration;
  default_forum_layout?: UpdateGuildChannelRequestPartialDefaultForumLayout;
  default_reaction_emoji?: UpdateGuildChannelRequestPartialDefaultReactionEmoji;
  default_sort_order?: UpdateGuildChannelRequestPartialDefaultSortOrder;
  /**
   * @minimum 0
   * @maximum 21600
   */
  default_thread_rate_limit_per_user?: UpdateGuildChannelRequestPartialDefaultThreadRateLimitPerUser;
  flags?: UpdateGuildChannelRequestPartialFlags;
  /**
   * @minLength 1
   * @maxLength 100
   */
  name?: string;
  nsfw?: UpdateGuildChannelRequestPartialNsfw;
  parent_id?: UpdateGuildChannelRequestPartialParentId;
  /** @maxItems 100 */
  permission_overwrites?: UpdateGuildChannelRequestPartialPermissionOverwrites;
  /** @minimum 0 */
  position?: UpdateGuildChannelRequestPartialPosition;
  /**
   * @minimum 0
   * @maximum 21600
   */
  rate_limit_per_user?: UpdateGuildChannelRequestPartialRateLimitPerUser;
  rtc_region?: UpdateGuildChannelRequestPartialRtcRegion;
  /**
   * @minLength 0
   * @maxLength 4096
   */
  topic?: UpdateGuildChannelRequestPartialTopic;
  type?: UpdateGuildChannelRequestPartialType;
  /** @minimum 0 */
  user_limit?: UpdateGuildChannelRequestPartialUserLimit;
  video_quality_mode?: UpdateGuildChannelRequestPartialVideoQualityMode;
}

/**
 * @maxLength 100
 */
export type UpdateDefaultReactionEmojiRequestEmojiName = string | null;

export type UpdateDefaultReactionEmojiRequestEmojiId = null | SnowflakeType;

export interface UpdateDefaultReactionEmojiRequest {
  emoji_id?: UpdateDefaultReactionEmojiRequestEmojiId;
  /** @maxLength 100 */
  emoji_name?: UpdateDefaultReactionEmojiRequestEmojiName;
}

/**
 * @minimum 0
 * @maximum 4294967295
 */
export type UInt32Type = number;

export interface TypingIndicatorResponse { [key: string]: unknown }

export type ThreadsResponseHasMore = boolean | null;

export interface ThreadsResponse {
  has_more?: ThreadsResponseHasMore;
  members: ThreadMemberResponse[];
  threads: ThreadResponse[];
}

export type ThreadSortOrder = number;

export type ThreadResponseVideoQualityMode = null | VideoQualityModes;

export type ThreadResponseUserLimit = number | null;

export type ThreadResponseType = typeof ThreadResponseType[keyof typeof ThreadResponseType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ThreadResponseType = {
  NUMBER_10: 10,
  NUMBER_11: 11,
  NUMBER_12: 12,
} as const;

export type ThreadResponseThreadMetadata = null | ThreadMetadataResponse;

export type ThreadResponseRtcRegion = string | null;

export type ThreadResponseRateLimitPerUser = number | null;

export type ThreadResponsePermissions = string | null;

export type ThreadResponseParentId = null | SnowflakeType;

export type ThreadResponseMember = null | ThreadMemberResponse;

export type ThreadResponseLastPinTimestamp = string | null;

export type ThreadResponseLastMessageId = null | SnowflakeType;

export type ThreadResponseBitrate = number | null;

export type ThreadResponseAppliedTags = SnowflakeType[] | null;

export interface ThreadResponse {
  applied_tags?: ThreadResponseAppliedTags;
  bitrate?: ThreadResponseBitrate;
  flags: number;
  guild_id: SnowflakeType;
  id: SnowflakeType;
  last_message_id?: ThreadResponseLastMessageId;
  last_pin_timestamp?: ThreadResponseLastPinTimestamp;
  member?: ThreadResponseMember;
  member_count: number;
  message_count: number;
  name: string;
  owner_id: SnowflakeType;
  parent_id?: ThreadResponseParentId;
  permissions?: ThreadResponsePermissions;
  rate_limit_per_user?: ThreadResponseRateLimitPerUser;
  rtc_region?: ThreadResponseRtcRegion;
  thread_metadata?: ThreadResponseThreadMetadata;
  total_message_sent: number;
  type: ThreadResponseType;
  user_limit?: ThreadResponseUserLimit;
  video_quality_mode?: ThreadResponseVideoQualityMode;
}

export type ThreadMetadataResponseInvitable = boolean | null;

export type ThreadMetadataResponseCreateTimestamp = string | null;

export type ThreadMetadataResponseArchiveTimestamp = string | null;

export interface ThreadMetadataResponse {
  archive_timestamp?: ThreadMetadataResponseArchiveTimestamp;
  archived: boolean;
  auto_archive_duration: ThreadAutoArchiveDuration;
  create_timestamp?: ThreadMetadataResponseCreateTimestamp;
  invitable?: ThreadMetadataResponseInvitable;
  locked: boolean;
}

export type ThreadMemberResponseMember = null | GuildMemberResponse;

export interface ThreadMemberResponse {
  flags: number;
  id: SnowflakeType;
  join_timestamp: string;
  member?: ThreadMemberResponseMember;
  user_id: SnowflakeType;
}

export type ThreadAutoArchiveDuration = number;

export type TextStyleTypes = number;

export type TeamResponseIcon = string | null;

export type TeamMembershipStates = number;

export interface TeamMemberResponse {
  membership_state: TeamMembershipStates;
  team_id: SnowflakeType;
  user: UserResponse;
}

export interface TeamResponse {
  icon?: TeamResponseIcon;
  id: SnowflakeType;
  members: TeamMemberResponse[];
  name: string;
  owner_user_id: SnowflakeType;
}

export type StringSelectType = typeof StringSelectType[keyof typeof StringSelectType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const StringSelectType = {
  NUMBER_3: 3,
} as const;

/**
 * @maxLength 150
 */
export type StringSelectPlaceholder = string | null;

/**
 * @minimum 0
 * @maximum 25
 */
export type StringSelectMinValues = number | null;

/**
 * @minimum 1
 * @maximum 25
 */
export type StringSelectMaxValues = number | null;

export type StringSelectDisabled = boolean | null;

export interface StringSelect {
  /** @maxLength 100 */
  custom_id: string;
  disabled?: StringSelectDisabled;
  /**
   * @minimum 1
   * @maximum 25
   */
  max_values?: StringSelectMaxValues;
  /**
   * @minimum 0
   * @maximum 25
   */
  min_values?: StringSelectMinValues;
  /**
   * @minItems 1
   * @maxItems 25
   */
  options: SelectOption[];
  /** @maxLength 150 */
  placeholder?: StringSelectPlaceholder;
  type: StringSelectType;
}

export type StickerTypes = number;

export type StickerPackResponseDescription = string | null;

export type StickerPackResponseCoverStickerId = null | SnowflakeType;

export type StickerPackResponseBannerAssetId = null | SnowflakeType;

export interface StickerPackResponse {
  banner_asset_id?: StickerPackResponseBannerAssetId;
  cover_sticker_id?: StickerPackResponseCoverStickerId;
  description?: StickerPackResponseDescription;
  id: SnowflakeType;
  name: string;
  sku_id: SnowflakeType;
  stickers: StandardStickerResponse[];
}

export interface StickerPackCollectionResponse {
  sticker_packs: StickerPackResponse[];
}

export type StickerFormatTypes = number;

export type StandardStickerResponseType = typeof StandardStickerResponseType[keyof typeof StandardStickerResponseType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const StandardStickerResponseType = {
  NUMBER_1: 1,
} as const;

export type StandardStickerResponseFormatType = null | StickerFormatTypes;

export type StandardStickerResponseDescription = string | null;

export interface StandardStickerResponse {
  description?: StandardStickerResponseDescription;
  format_type?: StandardStickerResponseFormatType;
  id: SnowflakeType;
  name: string;
  pack_id: SnowflakeType;
  sort_value: number;
  tags: string;
  type: StandardStickerResponseType;
}

export type StageScheduledEventResponseUserRsvp = null | ScheduledEventUserResponse;

export type StageScheduledEventResponseUserCount = number | null;

export type StageScheduledEventResponseScheduledEndTime = string | null;

export type StageScheduledEventResponseImage = string | null;

export type StageScheduledEventResponseEntityType = typeof StageScheduledEventResponseEntityType[keyof typeof StageScheduledEventResponseEntityType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const StageScheduledEventResponseEntityType = {
  NUMBER_1: 1,
} as const;

export type StageScheduledEventResponseEntityMetadata = null | EntityMetadataStageInstanceResponse;

export type StageScheduledEventResponseEntityId = null | SnowflakeType;

export type StageScheduledEventResponseDescription = string | null;

export type StageScheduledEventResponseCreatorId = null | SnowflakeType;

export type StageScheduledEventResponseCreator = null | UserResponse;

export type StageScheduledEventResponseChannelId = null | SnowflakeType;

export interface StageScheduledEventResponse {
  channel_id?: StageScheduledEventResponseChannelId;
  creator?: StageScheduledEventResponseCreator;
  creator_id?: StageScheduledEventResponseCreatorId;
  description?: StageScheduledEventResponseDescription;
  entity_id?: StageScheduledEventResponseEntityId;
  entity_metadata?: StageScheduledEventResponseEntityMetadata;
  entity_type: StageScheduledEventResponseEntityType;
  guild_id: SnowflakeType;
  id: SnowflakeType;
  image?: StageScheduledEventResponseImage;
  name: string;
  privacy_level: GuildScheduledEventPrivacyLevels;
  scheduled_end_time?: StageScheduledEventResponseScheduledEndTime;
  scheduled_start_time: string;
  status: GuildScheduledEventStatuses;
  user_count?: StageScheduledEventResponseUserCount;
  user_rsvp?: StageScheduledEventResponseUserRsvp;
}

export type StageScheduledEventPatchRequestPartialStatus = null | GuildScheduledEventStatuses;

export type StageScheduledEventPatchRequestPartialScheduledEndTime = string | null;

export type StageScheduledEventPatchRequestPartialImage = string | null;

export type StageScheduledEventPatchRequestPartialEntityType = null | 1;

export type StageScheduledEventPatchRequestPartialEntityMetadata = null | EntityMetadataStageInstance;

/**
 * @maxLength 1000
 */
export type StageScheduledEventPatchRequestPartialDescription = string | null;

export type StageScheduledEventPatchRequestPartialChannelId = null | SnowflakeType;

export interface StageScheduledEventPatchRequestPartial {
  channel_id?: StageScheduledEventPatchRequestPartialChannelId;
  /** @maxLength 1000 */
  description?: StageScheduledEventPatchRequestPartialDescription;
  entity_metadata?: StageScheduledEventPatchRequestPartialEntityMetadata;
  entity_type?: StageScheduledEventPatchRequestPartialEntityType;
  image?: StageScheduledEventPatchRequestPartialImage;
  /** @maxLength 100 */
  name?: string;
  privacy_level?: GuildScheduledEventPrivacyLevels;
  scheduled_end_time?: StageScheduledEventPatchRequestPartialScheduledEndTime;
  scheduled_start_time?: string;
  status?: StageScheduledEventPatchRequestPartialStatus;
}

export type StageScheduledEventCreateRequestScheduledEndTime = string | null;

export type StageScheduledEventCreateRequestImage = string | null;

export type StageScheduledEventCreateRequestEntityType = typeof StageScheduledEventCreateRequestEntityType[keyof typeof StageScheduledEventCreateRequestEntityType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const StageScheduledEventCreateRequestEntityType = {
  NUMBER_1: 1,
} as const;

export type StageScheduledEventCreateRequestEntityMetadata = null | EntityMetadataStageInstance;

/**
 * @maxLength 1000
 */
export type StageScheduledEventCreateRequestDescription = string | null;

export type StageScheduledEventCreateRequestChannelId = null | SnowflakeType;

export interface StageScheduledEventCreateRequest {
  channel_id?: StageScheduledEventCreateRequestChannelId;
  /** @maxLength 1000 */
  description?: StageScheduledEventCreateRequestDescription;
  entity_metadata?: StageScheduledEventCreateRequestEntityMetadata;
  entity_type: StageScheduledEventCreateRequestEntityType;
  image?: StageScheduledEventCreateRequestImage;
  /** @maxLength 100 */
  name: string;
  privacy_level: GuildScheduledEventPrivacyLevels;
  scheduled_end_time?: StageScheduledEventCreateRequestScheduledEndTime;
  scheduled_start_time: string;
}

export type StageInstancesPrivacyLevels = number;

export type StageInstanceResponseGuildScheduledEventId = null | SnowflakeType;

export type StageInstanceResponseDiscoverableDisabled = boolean | null;

export interface StageInstanceResponse {
  channel_id: SnowflakeType;
  discoverable_disabled?: StageInstanceResponseDiscoverableDisabled;
  guild_id: SnowflakeType;
  guild_scheduled_event_id?: StageInstanceResponseGuildScheduledEventId;
  id: SnowflakeType;
  privacy_level: StageInstancesPrivacyLevels;
  topic: string;
}

export interface SpamLinkTriggerMetadataResponse { [key: string]: unknown }

export type SpamLinkRuleResponseTriggerType = typeof SpamLinkRuleResponseTriggerType[keyof typeof SpamLinkRuleResponseTriggerType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SpamLinkRuleResponseTriggerType = {
  NUMBER_2: 2,
} as const;

export type SpamLinkRuleResponseExemptRoles = SnowflakeType[] | null;

export type SpamLinkRuleResponseExemptChannels = SnowflakeType[] | null;

export type SpamLinkRuleResponseEnabled = boolean | null;

export type SpamLinkRuleResponseActionsItem = BlockMessageActionResponse | FlagToChannelActionResponse | QuarantineUserActionResponse | UserCommunicationDisabledActionResponse;

export interface SpamLinkRuleResponse {
  actions: SpamLinkRuleResponseActionsItem[];
  creator_id: SnowflakeType;
  enabled?: SpamLinkRuleResponseEnabled;
  event_type: AutomodEventType;
  exempt_channels?: SpamLinkRuleResponseExemptChannels;
  exempt_roles?: SpamLinkRuleResponseExemptRoles;
  guild_id: SnowflakeType;
  id: SnowflakeType;
  name: string;
  trigger_metadata: SpamLinkTriggerMetadataResponse;
  trigger_type: SpamLinkRuleResponseTriggerType;
}

export type SoundboardSoundSendRequestSourceGuildId = null | SnowflakeType;

export interface SoundboardSoundSendRequest {
  sound_id: SnowflakeType;
  source_guild_id?: SoundboardSoundSendRequestSourceGuildId;
}

export type SoundboardSoundResponseUser = null | UserResponse;

export type SoundboardSoundResponseGuildId = null | SnowflakeType;

export type SoundboardSoundResponseEmojiName = string | null;

export type SoundboardSoundResponseEmojiId = null | SnowflakeType;

export interface SoundboardSoundResponse {
  available: boolean;
  emoji_id?: SoundboardSoundResponseEmojiId;
  emoji_name?: SoundboardSoundResponseEmojiName;
  guild_id?: SoundboardSoundResponseGuildId;
  name: string;
  sound_id: SnowflakeType;
  user?: SoundboardSoundResponseUser;
  volume: number;
}

/**
 * @minimum 0
 * @maximum 1
 */
export type SoundboardPatchRequestPartialVolume = number | null;

/**
 * @minLength 1
 * @maxLength 32
 */
export type SoundboardPatchRequestPartialEmojiName = string | null;

export type SoundboardPatchRequestPartialEmojiId = null | SnowflakeType;

export interface SoundboardPatchRequestPartial {
  emoji_id?: SoundboardPatchRequestPartialEmojiId;
  /**
   * @minLength 1
   * @maxLength 32
   */
  emoji_name?: SoundboardPatchRequestPartialEmojiName;
  /**
   * @minLength 2
   * @maxLength 32
   */
  name?: string;
  /**
   * @minimum 0
   * @maximum 1
   */
  volume?: SoundboardPatchRequestPartialVolume;
}

/**
 * @minimum 0
 * @maximum 1
 */
export type SoundboardCreateRequestVolume = number | null;

/**
 * @minLength 1
 * @maxLength 32
 */
export type SoundboardCreateRequestEmojiName = string | null;

export interface SoundboardCreateRequest {
  emoji_id?: SoundboardCreateRequestEmojiId;
  /**
   * @minLength 1
   * @maxLength 32
   */
  emoji_name?: SoundboardCreateRequestEmojiName;
  /**
   * @minLength 2
   * @maxLength 32
   */
  name: string;
  sound: string;
  /**
   * @minimum 0
   * @maximum 1
   */
  volume?: SoundboardCreateRequestVolume;
}

/**
 * @pattern ^(0|[1-9][0-9]*)$
 */
export type SnowflakeType = string;

export type SoundboardCreateRequestEmojiId = null | SnowflakeType;

export type SnowflakeSelectDefaultValueTypes = string;

/**
 * @maxLength 152133
 */
export type SlackWebhookUsername = string | null;

/**
 * @maxLength 2000
 */
export type SlackWebhookText = string | null;

/**
 * @maxLength 2048
 */
export type SlackWebhookIconUrl = string | null;

/**
 * @maxItems 1521
 */
export type SlackWebhookAttachments = WebhookSlackEmbed[] | null;

export interface SlackWebhook {
  /** @maxItems 1521 */
  attachments?: SlackWebhookAttachments;
  /** @maxLength 2048 */
  icon_url?: SlackWebhookIconUrl;
  /** @maxLength 2000 */
  text?: SlackWebhookText;
  /** @maxLength 152133 */
  username?: SlackWebhookUsername;
}

export type SettingsEmojiResponseName = string | null;

export type SettingsEmojiResponseId = null | SnowflakeType;

export type SettingsEmojiResponseAnimated = boolean | null;

export interface SettingsEmojiResponse {
  animated?: SettingsEmojiResponseAnimated;
  id?: SettingsEmojiResponseId;
  name?: SettingsEmojiResponseName;
}

export type SelectOptionResponseEmoji = null | MessageComponentEmojiResponse;

export type SelectOptionResponseDescription = string | null;

export type SelectOptionResponseDefault = boolean | null;

export interface SelectOptionResponse {
  default?: SelectOptionResponseDefault;
  description?: SelectOptionResponseDescription;
  emoji?: SelectOptionResponseEmoji;
  label: string;
  value: string;
}

export type SelectOptionEmoji = null | Emoji;

/**
 * @maxLength 100
 */
export type SelectOptionDescription = string | null;

export type SelectOptionDefault = boolean | null;

export interface SelectOption {
  default?: SelectOptionDefault;
  /** @maxLength 100 */
  description?: SelectOptionDescription;
  emoji?: SelectOptionEmoji;
  /**
   * @minLength 1
   * @maxLength 100
   */
  label: string;
  /**
   * @minLength 1
   * @maxLength 100
   */
  value: string;
}

export type ScheduledEventUserResponseUser = null | UserResponse;

export type ScheduledEventUserResponseMember = null | GuildMemberResponse;

export interface ScheduledEventUserResponse {
  guild_scheduled_event_id: SnowflakeType;
  member?: ScheduledEventUserResponseMember;
  user?: ScheduledEventUserResponseUser;
  user_id: SnowflakeType;
}

export type ScheduledEventResponseUserRsvp = null | ScheduledEventUserResponse;

export type ScheduledEventResponseUserCount = number | null;

export type ScheduledEventResponseScheduledEndTime = string | null;

export type ScheduledEventResponseImage = string | null;

export type ScheduledEventResponseEntityId = null | SnowflakeType;

export type ScheduledEventResponseDescription = string | null;

export type ScheduledEventResponseCreatorId = null | SnowflakeType;

export type ScheduledEventResponseCreator = null | UserResponse;

export type ScheduledEventResponseChannelId = null | SnowflakeType;

export interface ScheduledEventResponse {
  channel_id?: ScheduledEventResponseChannelId;
  creator?: ScheduledEventResponseCreator;
  creator_id?: ScheduledEventResponseCreatorId;
  description?: ScheduledEventResponseDescription;
  entity_id?: ScheduledEventResponseEntityId;
  entity_type: GuildScheduledEventEntityTypes;
  guild_id: SnowflakeType;
  id: SnowflakeType;
  image?: ScheduledEventResponseImage;
  name: string;
  privacy_level: GuildScheduledEventPrivacyLevels;
  scheduled_end_time?: ScheduledEventResponseScheduledEndTime;
  scheduled_start_time: string;
  status: GuildScheduledEventStatuses;
  user_count?: ScheduledEventResponseUserCount;
  user_rsvp?: ScheduledEventResponseUserRsvp;
}

export type RoleSelectDefaultValueResponseType = typeof RoleSelectDefaultValueResponseType[keyof typeof RoleSelectDefaultValueResponseType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RoleSelectDefaultValueResponseType = {
  role: 'role',
} as const;

export interface RoleSelectDefaultValueResponse {
  id: SnowflakeType;
  type: RoleSelectDefaultValueResponseType;
}

export type RoleSelectDefaultValueType = typeof RoleSelectDefaultValueType[keyof typeof RoleSelectDefaultValueType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RoleSelectDefaultValueType = {
  role: 'role',
} as const;

export interface RoleSelectDefaultValue {
  id: SnowflakeType;
  type: RoleSelectDefaultValueType;
}

export type RoleSelectType = typeof RoleSelectType[keyof typeof RoleSelectType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RoleSelectType = {
  NUMBER_6: 6,
} as const;

/**
 * @maxLength 150
 */
export type RoleSelectPlaceholder = string | null;

/**
 * @minimum 0
 * @maximum 25
 */
export type RoleSelectMinValues = number | null;

/**
 * @minimum 1
 * @maximum 25
 */
export type RoleSelectMaxValues = number | null;

export type RoleSelectDisabled = boolean | null;

/**
 * @maxItems 25
 */
export type RoleSelectDefaultValues = RoleSelectDefaultValue[] | null;

export interface RoleSelect {
  /** @maxLength 100 */
  custom_id: string;
  /** @maxItems 25 */
  default_values?: RoleSelectDefaultValues;
  disabled?: RoleSelectDisabled;
  /**
   * @minimum 1
   * @maximum 25
   */
  max_values?: RoleSelectMaxValues;
  /**
   * @minimum 0
   * @maximum 25
   */
  min_values?: RoleSelectMinValues;
  /** @maxLength 150 */
  placeholder?: RoleSelectPlaceholder;
  type: RoleSelectType;
}

export type RichEmbedVideoWidth = number | null;

/**
 * @maxLength 2048
 */
export type RichEmbedVideoUrl = string | null;

/**
 * @minimum 0
 * @maximum 2147483647
 */
export type RichEmbedVideoPlaceholderVersion = number | null;

/**
 * @maxLength 64
 */
export type RichEmbedVideoPlaceholder = string | null;

export type RichEmbedVideoIsAnimated = boolean | null;

export type RichEmbedVideoHeight = number | null;

export interface RichEmbedVideo {
  height?: RichEmbedVideoHeight;
  is_animated?: RichEmbedVideoIsAnimated;
  /** @maxLength 64 */
  placeholder?: RichEmbedVideoPlaceholder;
  /**
   * @minimum 0
   * @maximum 2147483647
   */
  placeholder_version?: RichEmbedVideoPlaceholderVersion;
  /** @maxLength 2048 */
  url?: RichEmbedVideoUrl;
  width?: RichEmbedVideoWidth;
}

export type RichEmbedThumbnailWidth = number | null;

/**
 * @maxLength 2048
 */
export type RichEmbedThumbnailUrl = string | null;

/**
 * @minimum 0
 * @maximum 2147483647
 */
export type RichEmbedThumbnailPlaceholderVersion = number | null;

/**
 * @maxLength 64
 */
export type RichEmbedThumbnailPlaceholder = string | null;

export type RichEmbedThumbnailIsAnimated = boolean | null;

export type RichEmbedThumbnailHeight = number | null;

export interface RichEmbedThumbnail {
  height?: RichEmbedThumbnailHeight;
  is_animated?: RichEmbedThumbnailIsAnimated;
  /** @maxLength 64 */
  placeholder?: RichEmbedThumbnailPlaceholder;
  /**
   * @minimum 0
   * @maximum 2147483647
   */
  placeholder_version?: RichEmbedThumbnailPlaceholderVersion;
  /** @maxLength 2048 */
  url?: RichEmbedThumbnailUrl;
  width?: RichEmbedThumbnailWidth;
}

/**
 * @maxLength 2048
 */
export type RichEmbedProviderUrl = string | null;

/**
 * @maxLength 256
 */
export type RichEmbedProviderName = string | null;

export interface RichEmbedProvider {
  /** @maxLength 256 */
  name?: RichEmbedProviderName;
  /** @maxLength 2048 */
  url?: RichEmbedProviderUrl;
}

export type RichEmbedImageWidth = number | null;

/**
 * @maxLength 2048
 */
export type RichEmbedImageUrl = string | null;

/**
 * @minimum 0
 * @maximum 2147483647
 */
export type RichEmbedImagePlaceholderVersion = number | null;

/**
 * @maxLength 64
 */
export type RichEmbedImagePlaceholder = string | null;

export type RichEmbedImageIsAnimated = boolean | null;

export type RichEmbedImageHeight = number | null;

export interface RichEmbedImage {
  height?: RichEmbedImageHeight;
  is_animated?: RichEmbedImageIsAnimated;
  /** @maxLength 64 */
  placeholder?: RichEmbedImagePlaceholder;
  /**
   * @minimum 0
   * @maximum 2147483647
   */
  placeholder_version?: RichEmbedImagePlaceholderVersion;
  /** @maxLength 2048 */
  url?: RichEmbedImageUrl;
  width?: RichEmbedImageWidth;
}

/**
 * @maxLength 2048
 */
export type RichEmbedFooterText = string | null;

/**
 * @maxLength 2048
 */
export type RichEmbedFooterIconUrl = string | null;

export interface RichEmbedFooter {
  /** @maxLength 2048 */
  icon_url?: RichEmbedFooterIconUrl;
  /** @maxLength 2048 */
  text?: RichEmbedFooterText;
}

export type RichEmbedFieldInline = boolean | null;

export interface RichEmbedField {
  inline?: RichEmbedFieldInline;
  /** @maxLength 256 */
  name: string;
  /** @maxLength 1024 */
  value: string;
}

/**
 * @maxLength 2048
 */
export type RichEmbedAuthorUrl = string | null;

/**
 * @maxLength 256
 */
export type RichEmbedAuthorName = string | null;

/**
 * @maxLength 2048
 */
export type RichEmbedAuthorIconUrl = string | null;

export interface RichEmbedAuthor {
  /** @maxLength 2048 */
  icon_url?: RichEmbedAuthorIconUrl;
  /** @maxLength 256 */
  name?: RichEmbedAuthorName;
  /** @maxLength 2048 */
  url?: RichEmbedAuthorUrl;
}

export type RichEmbedVideoProperty = null | RichEmbedVideo;

/**
 * @maxLength 2048
 */
export type RichEmbedUrl = string | null;

/**
 * @maxLength 152133
 */
export type RichEmbedType = string | null;

/**
 * @maxLength 256
 */
export type RichEmbedTitle = string | null;

export type RichEmbedTimestamp = string | null;

export type RichEmbedThumbnailProperty = null | RichEmbedThumbnail;

export type RichEmbedProviderProperty = null | RichEmbedProvider;

export type RichEmbedImageProperty = null | RichEmbedImage;

export type RichEmbedFooterProperty = null | RichEmbedFooter;

/**
 * @maxItems 25
 */
export type RichEmbedFields = RichEmbedField[] | null;

/**
 * @maxLength 4096
 */
export type RichEmbedDescription = string | null;

/**
 * @minimum 0
 * @maximum 16777215
 */
export type RichEmbedColor = number | null;

export type RichEmbedAuthorProperty = null | RichEmbedAuthor;

export interface RichEmbed {
  author?: RichEmbedAuthorProperty;
  /**
   * @minimum 0
   * @maximum 16777215
   */
  color?: RichEmbedColor;
  /** @maxLength 4096 */
  description?: RichEmbedDescription;
  /** @maxItems 25 */
  fields?: RichEmbedFields;
  footer?: RichEmbedFooterProperty;
  image?: RichEmbedImageProperty;
  provider?: RichEmbedProviderProperty;
  thumbnail?: RichEmbedThumbnailProperty;
  timestamp?: RichEmbedTimestamp;
  /** @maxLength 256 */
  title?: RichEmbedTitle;
  /** @maxLength 152133 */
  type?: RichEmbedType;
  /** @maxLength 2048 */
  url?: RichEmbedUrl;
  video?: RichEmbedVideoProperty;
}

export type ResourceChannelResponseIcon = string | null;

export type ResourceChannelResponseEmoji = null | SettingsEmojiResponse;

export interface ResourceChannelResponse {
  channel_id: SnowflakeType;
  description: string;
  emoji?: ResourceChannelResponseEmoji;
  icon?: ResourceChannelResponseIcon;
  title: string;
}

export type ResolvedObjectsResponseUsers = {[key: string]: UserResponse};

export type ResolvedObjectsResponseRoles = {[key: string]: GuildRoleResponse};

export type ResolvedObjectsResponseMembers = {[key: string]: GuildMemberResponse};

export type ResolvedObjectsResponseChannels = {[key: string]: GuildChannelResponse | PrivateChannelResponse | PrivateGroupChannelResponse | ThreadResponse};

export interface ResolvedObjectsResponse {
  channels: ResolvedObjectsResponseChannels;
  members: ResolvedObjectsResponseMembers;
  roles: ResolvedObjectsResponseRoles;
  users: ResolvedObjectsResponseUsers;
}

export type ReactionTypes = number;

export type QuarantineUserActionResponseType = typeof QuarantineUserActionResponseType[keyof typeof QuarantineUserActionResponseType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const QuarantineUserActionResponseType = {
  NUMBER_4: 4,
} as const;

export interface QuarantineUserActionMetadataResponse { [key: string]: unknown }

export interface QuarantineUserActionResponse {
  metadata: QuarantineUserActionMetadataResponse;
  type: QuarantineUserActionResponseType;
}

export interface QuarantineUserActionMetadata { [key: string]: unknown }

export type QuarantineUserActionType = typeof QuarantineUserActionType[keyof typeof QuarantineUserActionType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const QuarantineUserActionType = {
  NUMBER_4: 4,
} as const;

export type QuarantineUserActionMetadataProperty = null | QuarantineUserActionMetadata;

export interface QuarantineUserAction {
  metadata?: QuarantineUserActionMetadataProperty;
  type: QuarantineUserActionType;
}

export type PurchaseType = number;

export type PurchaseNotificationResponseGuildProductPurchase = null | GuildProductPurchaseResponse;

export interface PurchaseNotificationResponse {
  guild_product_purchase?: PurchaseNotificationResponseGuildProductPurchase;
  type: PurchaseType;
}

export type PrivateGuildMemberResponsePremiumSince = string | null;

export type PrivateGuildMemberResponseNick = string | null;

export type PrivateGuildMemberResponseCommunicationDisabledUntil = string | null;

export type PrivateGuildMemberResponseBanner = string | null;

export type PrivateGuildMemberResponseAvatarDecorationData = null | UserAvatarDecorationResponse;

export type PrivateGuildMemberResponseAvatar = string | null;

export interface PrivateGuildMemberResponse {
  avatar?: PrivateGuildMemberResponseAvatar;
  avatar_decoration_data?: PrivateGuildMemberResponseAvatarDecorationData;
  banner?: PrivateGuildMemberResponseBanner;
  communication_disabled_until?: PrivateGuildMemberResponseCommunicationDisabledUntil;
  deaf: boolean;
  flags: number;
  joined_at: string;
  mute: boolean;
  nick?: PrivateGuildMemberResponseNick;
  pending: boolean;
  premium_since?: PrivateGuildMemberResponsePremiumSince;
  roles: SnowflakeType[];
  user: UserResponse;
}

export type PrivateGroupChannelResponseType = typeof PrivateGroupChannelResponseType[keyof typeof PrivateGroupChannelResponseType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PrivateGroupChannelResponseType = {
  NUMBER_3: 3,
} as const;

export type PrivateGroupChannelResponseOwnerId = null | SnowflakeType;

export type PrivateGroupChannelResponseName = string | null;

export type PrivateGroupChannelResponseManaged = boolean | null;

export type PrivateGroupChannelResponseLastPinTimestamp = string | null;

export type PrivateGroupChannelResponseLastMessageId = null | SnowflakeType;

export type PrivateGroupChannelResponseIcon = string | null;

export type PrivateGroupChannelResponseApplicationId = null | SnowflakeType;

export interface PrivateGroupChannelResponse {
  application_id?: PrivateGroupChannelResponseApplicationId;
  flags: number;
  icon?: PrivateGroupChannelResponseIcon;
  id: SnowflakeType;
  last_message_id?: PrivateGroupChannelResponseLastMessageId;
  last_pin_timestamp?: PrivateGroupChannelResponseLastPinTimestamp;
  managed?: PrivateGroupChannelResponseManaged;
  name?: PrivateGroupChannelResponseName;
  owner_id?: PrivateGroupChannelResponseOwnerId;
  recipients: UserResponse[];
  type: PrivateGroupChannelResponseType;
}

export type PrivateChannelResponseType = typeof PrivateChannelResponseType[keyof typeof PrivateChannelResponseType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PrivateChannelResponseType = {
  NUMBER_1: 1,
} as const;

export type PrivateChannelResponseLastPinTimestamp = string | null;

export type PrivateChannelResponseLastMessageId = null | SnowflakeType;

export interface PrivateChannelResponse {
  flags: number;
  id: SnowflakeType;
  last_message_id?: PrivateChannelResponseLastMessageId;
  last_pin_timestamp?: PrivateChannelResponseLastPinTimestamp;
  recipients: UserResponse[];
  type: PrivateChannelResponseType;
}

/**
 * @minLength 0
 * @maxLength 100
 */
export type PrivateChannelRequestPartialName = string | null;

export type PrivateChannelRequestPartialIcon = string | null;

export interface PrivateChannelRequestPartial {
  icon?: PrivateChannelRequestPartialIcon;
  /**
   * @minLength 0
   * @maxLength 100
   */
  name?: PrivateChannelRequestPartialName;
}

export type PrivateChannelLocationKind = typeof PrivateChannelLocationKind[keyof typeof PrivateChannelLocationKind];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PrivateChannelLocationKind = {
  pc: 'pc',
} as const;

export interface PrivateChannelLocation {
  channel_id: SnowflakeType;
  id: string;
  kind: PrivateChannelLocationKind;
}

export type PrivateApplicationResponseType = null | ApplicationTypes;

export type PrivateApplicationResponseTermsOfServiceUrl = string | null;

export type PrivateApplicationResponseTeam = null | TeamResponse;

export type PrivateApplicationResponseTags = string[] | null;

export type PrivateApplicationResponseSlug = string | null;

export type PrivateApplicationResponseRpcOriginsAnyOfItem = string | null;

export type PrivateApplicationResponseRpcOrigins = PrivateApplicationResponseRpcOriginsAnyOfItem[] | null;

export type PrivateApplicationResponseRoleConnectionsVerificationUrl = string | null;

export type PrivateApplicationResponseRedirectUrisItem = string | null;

export type PrivateApplicationResponsePrivacyPolicyUrl = string | null;

export type PrivateApplicationResponsePrimarySkuId = null | SnowflakeType;

export type PrivateApplicationResponseMaxParticipants = number | null;

export type PrivateApplicationResponseInteractionsEndpointUrl = string | null;

export type PrivateApplicationResponseIntegrationTypesConfigAnyOf = {[key: string]: ApplicationIntegrationTypeConfigurationResponse};

export type PrivateApplicationResponseIntegrationTypesConfig = PrivateApplicationResponseIntegrationTypesConfigAnyOf | null;

export type PrivateApplicationResponseInstallParams = null | ApplicationOAuth2InstallParamsResponse;

export type PrivateApplicationResponseIcon = string | null;

export type PrivateApplicationResponseGuildId = null | SnowflakeType;

export type PrivateApplicationResponseCustomInstallUrl = string | null;

export type PrivateApplicationResponseCoverImage = string | null;

export type PrivateApplicationResponseBotRequireCodeGrant = boolean | null;

export type PrivateApplicationResponseBotPublic = boolean | null;

export type PrivateApplicationResponseBot = null | UserResponse;

export type PrivateApplicationResponseApproximateGuildCount = number | null;

export interface PrivateApplicationResponse {
  approximate_guild_count?: PrivateApplicationResponseApproximateGuildCount;
  approximate_user_install_count: number;
  bot?: PrivateApplicationResponseBot;
  bot_public?: PrivateApplicationResponseBotPublic;
  bot_require_code_grant?: PrivateApplicationResponseBotRequireCodeGrant;
  cover_image?: PrivateApplicationResponseCoverImage;
  custom_install_url?: PrivateApplicationResponseCustomInstallUrl;
  description: string;
  explicit_content_filter: ApplicationExplicitContentFilterTypes;
  flags: number;
  guild_id?: PrivateApplicationResponseGuildId;
  icon?: PrivateApplicationResponseIcon;
  id: SnowflakeType;
  install_params?: PrivateApplicationResponseInstallParams;
  integration_types_config?: PrivateApplicationResponseIntegrationTypesConfig;
  interactions_endpoint_url?: PrivateApplicationResponseInteractionsEndpointUrl;
  max_participants?: PrivateApplicationResponseMaxParticipants;
  name: string;
  owner: UserResponse;
  primary_sku_id?: PrivateApplicationResponsePrimarySkuId;
  privacy_policy_url?: PrivateApplicationResponsePrivacyPolicyUrl;
  redirect_uris: PrivateApplicationResponseRedirectUrisItem[];
  role_connections_verification_url?: PrivateApplicationResponseRoleConnectionsVerificationUrl;
  rpc_origins?: PrivateApplicationResponseRpcOrigins;
  slug?: PrivateApplicationResponseSlug;
  tags?: PrivateApplicationResponseTags;
  team?: PrivateApplicationResponseTeam;
  terms_of_service_url?: PrivateApplicationResponseTermsOfServiceUrl;
  type?: PrivateApplicationResponseType;
  verify_key: string;
}

export type PremiumTypes = number;

export type PremiumGuildTiers = number;

export type PongInteractionCallbackRequestType = typeof PongInteractionCallbackRequestType[keyof typeof PongInteractionCallbackRequestType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PongInteractionCallbackRequestType = {
  NUMBER_1: 1,
} as const;

export interface PongInteractionCallbackRequest {
  type: PongInteractionCallbackRequestType;
}

export interface PollResultsResponse {
  answer_counts?: PollResultsResponseAnswerCounts;
  is_finalized: boolean;
}

export type PollResultsEntryResponseMeVoted = boolean | null;

export interface PollResultsEntryResponse {
  count: number;
  id: number;
  me_voted?: PollResultsEntryResponseMeVoted;
}

export type PollResultsResponseAnswerCounts = PollResultsEntryResponse[] | null;

export type PollMediaResponseText = string | null;

export interface PollMediaResponse {
  emoji?: PollMediaResponseEmoji;
  text?: PollMediaResponseText;
}

export interface PollResponse {
  allow_multiselect: boolean;
  answers: PollAnswerResponse[];
  expiry: string;
  layout_type: PollLayoutTypes;
  question: PollMediaResponse;
  results: PollResultsResponse;
}

export type PollMediaResponseEmoji = null | MessageReactionEmojiResponse;

/**
 * @minLength 1
 * @maxLength 300
 */
export type PollMediaCreateRequestText = string | null;

export interface PollMediaCreateRequest {
  emoji?: PollMediaCreateRequestEmoji;
  /**
   * @minLength 1
   * @maxLength 300
   */
  text?: PollMediaCreateRequestText;
}

/**
 * @minLength 1
 * @maxLength 300
 */
export type PollMediaText = string | null;

export type PollMediaEmoji = null | PollEmoji;

export interface PollMedia {
  emoji?: PollMediaEmoji;
  /**
   * @minLength 1
   * @maxLength 300
   */
  text?: PollMediaText;
}

export type PollLayoutTypes = number;

/**
 * @maxLength 32
 */
export type PollEmojiCreateRequestName = string | null;

export type PollEmojiCreateRequestId = null | SnowflakeType;

export type PollEmojiCreateRequestAnimated = boolean | null;

export interface PollEmojiCreateRequest {
  animated?: PollEmojiCreateRequestAnimated;
  id?: PollEmojiCreateRequestId;
  /** @maxLength 32 */
  name?: PollEmojiCreateRequestName;
}

export type PollMediaCreateRequestEmoji = null | PollEmojiCreateRequest;

/**
 * @maxLength 32
 */
export type PollEmojiName = string | null;

export type PollEmojiId = null | SnowflakeType;

export type PollEmojiAnimated = boolean | null;

export interface PollEmoji {
  animated?: PollEmojiAnimated;
  id?: PollEmojiId;
  /** @maxLength 32 */
  name?: PollEmojiName;
}

export type PollCreateRequestLayoutType = null | PollLayoutTypes;

/**
 * @minimum 1
 * @maximum 768
 */
export type PollCreateRequestDuration = number | null;

export type PollCreateRequestAllowMultiselect = boolean | null;

export interface PollCreateRequest {
  allow_multiselect?: PollCreateRequestAllowMultiselect;
  /**
   * @minItems 1
   * @maxItems 10
   */
  answers: PollAnswerCreateRequest[];
  /**
   * @minimum 1
   * @maximum 768
   */
  duration?: PollCreateRequestDuration;
  layout_type?: PollCreateRequestLayoutType;
  question: PollMedia;
}

export interface PollAnswerResponse {
  answer_id: number;
  poll_media: PollMediaResponse;
}

export type PollAnswerDetailsResponseUsers = UserResponse[] | null;

export interface PollAnswerDetailsResponse {
  users?: PollAnswerDetailsResponseUsers;
}

export interface PollAnswerCreateRequest {
  poll_media: PollMediaCreateRequest;
}

export type PartialGuildSubscriptionIntegrationResponseType = typeof PartialGuildSubscriptionIntegrationResponseType[keyof typeof PartialGuildSubscriptionIntegrationResponseType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PartialGuildSubscriptionIntegrationResponseType = {
  guild_subscription: 'guild_subscription',
} as const;

export type PartialGuildSubscriptionIntegrationResponseName = string | null;

export type PartialGuildSubscriptionIntegrationResponseAccount = null | AccountResponse;

export interface PartialGuildSubscriptionIntegrationResponse {
  account?: PartialGuildSubscriptionIntegrationResponseAccount;
  id: SnowflakeType;
  name?: PartialGuildSubscriptionIntegrationResponseName;
  type: PartialGuildSubscriptionIntegrationResponseType;
}

export type PartialExternalConnectionIntegrationResponseType = typeof PartialExternalConnectionIntegrationResponseType[keyof typeof PartialExternalConnectionIntegrationResponseType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PartialExternalConnectionIntegrationResponseType = {
  twitch: 'twitch',
  youtube: 'youtube',
} as const;

export type PartialExternalConnectionIntegrationResponseName = string | null;

export type PartialExternalConnectionIntegrationResponseAccount = null | AccountResponse;

export interface PartialExternalConnectionIntegrationResponse {
  account?: PartialExternalConnectionIntegrationResponseAccount;
  id: SnowflakeType;
  name?: PartialExternalConnectionIntegrationResponseName;
  type: PartialExternalConnectionIntegrationResponseType;
}

export type PartialDiscordIntegrationResponseType = typeof PartialDiscordIntegrationResponseType[keyof typeof PartialDiscordIntegrationResponseType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PartialDiscordIntegrationResponseType = {
  discord: 'discord',
} as const;

export type PartialDiscordIntegrationResponseName = string | null;

export type PartialDiscordIntegrationResponseAccount = null | AccountResponse;

export interface PartialDiscordIntegrationResponse {
  account?: PartialDiscordIntegrationResponseAccount;
  application_id: SnowflakeType;
  id: SnowflakeType;
  name?: PartialDiscordIntegrationResponseName;
  type: PartialDiscordIntegrationResponseType;
}

export type OnboardingPromptType = number;

export interface OnboardingPromptOptionResponse {
  channel_ids: SnowflakeType[];
  description: string;
  emoji: SettingsEmojiResponse;
  id: SnowflakeType;
  role_ids: SnowflakeType[];
  title: string;
}

export interface OnboardingPromptResponse {
  id: SnowflakeType;
  in_onboarding: boolean;
  options: OnboardingPromptOptionResponse[];
  required: boolean;
  single_select: boolean;
  title: string;
  type: OnboardingPromptType;
}

/**
 * @maxItems 50
 */
export type OnboardingPromptOptionRequestRoleIds = SnowflakeType[] | null;

export type OnboardingPromptOptionRequestId = null | SnowflakeType;

/**
 * @maxLength 100
 */
export type OnboardingPromptOptionRequestEmojiName = string | null;

export type OnboardingPromptOptionRequestEmojiId = null | SnowflakeType;

export type OnboardingPromptOptionRequestEmojiAnimated = boolean | null;

/**
 * @maxLength 100
 */
export type OnboardingPromptOptionRequestDescription = string | null;

/**
 * @maxItems 50
 */
export type OnboardingPromptOptionRequestChannelIds = SnowflakeType[] | null;

export interface OnboardingPromptOptionRequest {
  /** @maxItems 50 */
  channel_ids?: OnboardingPromptOptionRequestChannelIds;
  /** @maxLength 100 */
  description?: OnboardingPromptOptionRequestDescription;
  emoji_animated?: OnboardingPromptOptionRequestEmojiAnimated;
  emoji_id?: OnboardingPromptOptionRequestEmojiId;
  /** @maxLength 100 */
  emoji_name?: OnboardingPromptOptionRequestEmojiName;
  id?: OnboardingPromptOptionRequestId;
  /** @maxItems 50 */
  role_ids?: OnboardingPromptOptionRequestRoleIds;
  /**
   * @minLength 1
   * @maxLength 50
   */
  title: string;
}

export type OAuth2Scopes = string;

export interface OAuth2Key {
  alg: string;
  e: string;
  kid: string;
  kty: string;
  n: string;
  use: string;
}

export interface OAuth2GetKeys {
  keys: OAuth2Key[];
}

export type OAuth2GetAuthorizationResponseUser = null | UserResponse;

export interface OAuth2GetAuthorizationResponse {
  application: ApplicationResponse;
  expires: string;
  scopes: OAuth2Scopes[];
  user?: OAuth2GetAuthorizationResponseUser;
}

export type NewMemberActionType = number;

export type NewMemberActionResponseIcon = string | null;

export type NewMemberActionResponseEmoji = null | SettingsEmojiResponse;

export interface NewMemberActionResponse {
  action_type: NewMemberActionType;
  channel_id: SnowflakeType;
  description: string;
  emoji?: NewMemberActionResponseEmoji;
  icon?: NewMemberActionResponseIcon;
  title: string;
}

export type MyGuildResponseIcon = string | null;

export type MyGuildResponseBanner = string | null;

export type MyGuildResponseApproximatePresenceCount = number | null;

export type MyGuildResponseApproximateMemberCount = number | null;

export interface MyGuildResponse {
  approximate_member_count?: MyGuildResponseApproximateMemberCount;
  approximate_presence_count?: MyGuildResponseApproximatePresenceCount;
  banner?: MyGuildResponseBanner;
  features: GuildFeatures[];
  icon?: MyGuildResponseIcon;
  id: SnowflakeType;
  name: string;
  owner: boolean;
  permissions: string;
}

export type ModalSubmitInteractionMetadataResponseUser = null | UserResponse;

export type ModalSubmitInteractionMetadataResponseType = typeof ModalSubmitInteractionMetadataResponseType[keyof typeof ModalSubmitInteractionMetadataResponseType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ModalSubmitInteractionMetadataResponseType = {
  NUMBER_5: 5,
} as const;

export type ModalSubmitInteractionMetadataResponseTriggeringInteractionMetadata = ApplicationCommandInteractionMetadataResponse | MessageComponentInteractionMetadataResponse;

export type ModalSubmitInteractionMetadataResponseOriginalResponseMessageId = null | SnowflakeType;

export type ModalSubmitInteractionMetadataResponseAuthorizingIntegrationOwners = {[key: string]: SnowflakeType};

export interface ModalSubmitInteractionMetadataResponse {
  authorizing_integration_owners: ModalSubmitInteractionMetadataResponseAuthorizingIntegrationOwners;
  id: SnowflakeType;
  original_response_message_id?: ModalSubmitInteractionMetadataResponseOriginalResponseMessageId;
  triggering_interaction_metadata: ModalSubmitInteractionMetadataResponseTriggeringInteractionMetadata;
  type: ModalSubmitInteractionMetadataResponseType;
  user?: ModalSubmitInteractionMetadataResponseUser;
}

export type ModalInteractionCallbackRequestType = typeof ModalInteractionCallbackRequestType[keyof typeof ModalInteractionCallbackRequestType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ModalInteractionCallbackRequestType = {
  NUMBER_9: 9,
} as const;

export interface ModalInteractionCallbackData {
  /**
   * @minItems 1
   * @maxItems 5
   */
  components: ActionRow[];
  /** @maxLength 100 */
  custom_id: string;
  /** @maxLength 45 */
  title: string;
}

export interface ModalInteractionCallbackRequest {
  data: ModalInteractionCallbackData;
  type: ModalInteractionCallbackRequestType;
}

export type MinimalContentMessageResponseStickersAnyOfItem = GuildStickerResponse | StandardStickerResponse;

export type MinimalContentMessageResponseStickers = MinimalContentMessageResponseStickersAnyOfItem[] | null;

export type MinimalContentMessageResponseStickerItems = MessageStickerItemResponse[] | null;

export type MinimalContentMessageResponseResolved = null | ResolvedObjectsResponse;

export type MinimalContentMessageResponseEditedTimestamp = string | null;

export type MinimalContentMessageResponseComponentsItem = MessageComponentActionRowResponse | MessageComponentButtonResponse | MessageComponentChannelSelectResponse | MessageComponentInputTextResponse | MessageComponentMentionableSelectResponse | MessageComponentRoleSelectResponse | MessageComponentStringSelectResponse | MessageComponentUserSelectResponse;

export interface MinimalContentMessageResponse {
  attachments: MessageAttachmentResponse[];
  components: MinimalContentMessageResponseComponentsItem[];
  content: string;
  edited_timestamp?: MinimalContentMessageResponseEditedTimestamp;
  embeds: MessageEmbedResponse[];
  flags: number;
  mention_roles: SnowflakeType[];
  mentions: UserResponse[];
  resolved?: MinimalContentMessageResponseResolved;
  sticker_items?: MinimalContentMessageResponseStickerItems;
  stickers?: MinimalContentMessageResponseStickers;
  timestamp: string;
  type: MessageType;
}

export type MetadataItemTypes = number;

export type MessageType = number;

export interface MessageStickerItemResponse {
  format_type: StickerFormatTypes;
  id: SnowflakeType;
  name: string;
}

export type MessageSnapshotResponseMessage = null | MinimalContentMessageResponse;

export interface MessageSnapshotResponse {
  message?: MessageSnapshotResponseMessage;
}

export interface MessageRoleSubscriptionDataResponse {
  is_renewal: boolean;
  role_subscription_listing_id: SnowflakeType;
  tier_name: string;
  total_months_subscribed: number;
}

export type MessageResponseWebhookId = null | SnowflakeType;

export type MessageResponseThread = null | ThreadResponse;

export type MessageResponseStickersAnyOfItem = GuildStickerResponse | StandardStickerResponse;

export type MessageResponseStickers = MessageResponseStickersAnyOfItem[] | null;

export type MessageResponseStickerItems = MessageStickerItemResponse[] | null;

export type MessageResponseRoleSubscriptionData = null | MessageRoleSubscriptionDataResponse;

export type MessageResponseResolved = null | ResolvedObjectsResponse;

export type MessageResponseReferencedMessage = null | BasicMessageResponse;

export type MessageResponseReactions = MessageReactionResponse[] | null;

export type MessageResponsePurchaseNotification = null | PurchaseNotificationResponse;

export type MessageResponsePosition = number | null;

export type MessageResponsePoll = null | PollResponse;

export type MessageResponseNonce = number | string | null;

export type MessageResponseMessageSnapshots = MessageSnapshotResponse[] | null;

export type MessageResponseMessageReference = null | MessageReferenceResponse;

export type MessageResponseMentionChannelsAnyOfItem = null | MessageMentionChannelResponse;

export type MessageResponseMentionChannels = MessageResponseMentionChannelsAnyOfItem[] | null;

export type MessageResponseInteractionMetadata = ApplicationCommandInteractionMetadataResponse | MessageComponentInteractionMetadataResponse | ModalSubmitInteractionMetadataResponse | null;

export type MessageResponseInteraction = null | MessageInteractionResponse;

export type MessageResponseEditedTimestamp = string | null;

export type MessageResponseComponentsItem = MessageComponentActionRowResponse | MessageComponentButtonResponse | MessageComponentChannelSelectResponse | MessageComponentInputTextResponse | MessageComponentMentionableSelectResponse | MessageComponentRoleSelectResponse | MessageComponentStringSelectResponse | MessageComponentUserSelectResponse;

export type MessageResponseCall = null | MessageCallResponse;

export type MessageResponseApplicationId = null | SnowflakeType;

export type MessageResponseApplication = null | BasicApplicationResponse;

export type MessageResponseActivity = null | MessageActivityResponse;

export interface MessageResponse {
  activity?: MessageResponseActivity;
  application?: MessageResponseApplication;
  application_id?: MessageResponseApplicationId;
  attachments: MessageAttachmentResponse[];
  author: UserResponse;
  call?: MessageResponseCall;
  channel_id: SnowflakeType;
  components: MessageResponseComponentsItem[];
  content: string;
  edited_timestamp?: MessageResponseEditedTimestamp;
  embeds: MessageEmbedResponse[];
  flags: number;
  id: SnowflakeType;
  interaction?: MessageResponseInteraction;
  interaction_metadata?: MessageResponseInteractionMetadata;
  mention_channels?: MessageResponseMentionChannels;
  mention_everyone: boolean;
  mention_roles: SnowflakeType[];
  mentions: UserResponse[];
  message_reference?: MessageResponseMessageReference;
  message_snapshots?: MessageResponseMessageSnapshots;
  nonce?: MessageResponseNonce;
  pinned: boolean;
  poll?: MessageResponsePoll;
  position?: MessageResponsePosition;
  purchase_notification?: MessageResponsePurchaseNotification;
  reactions?: MessageResponseReactions;
  referenced_message?: MessageResponseReferencedMessage;
  resolved?: MessageResponseResolved;
  role_subscription_data?: MessageResponseRoleSubscriptionData;
  sticker_items?: MessageResponseStickerItems;
  stickers?: MessageResponseStickers;
  thread?: MessageResponseThread;
  timestamp: string;
  tts: boolean;
  type: MessageType;
  webhook_id?: MessageResponseWebhookId;
}

export type MessageReferenceType = number;

export type MessageReferenceResponseType = null | MessageReferenceType;

export type MessageReferenceResponseMessageId = null | SnowflakeType;

export type MessageReferenceResponseGuildId = null | SnowflakeType;

export interface MessageReferenceResponse {
  channel_id: SnowflakeType;
  guild_id?: MessageReferenceResponseGuildId;
  message_id?: MessageReferenceResponseMessageId;
  type?: MessageReferenceResponseType;
}

export type MessageReferenceRequestType = null | MessageReferenceType;

export type MessageReferenceRequestGuildId = null | SnowflakeType;

export type MessageReferenceRequestFailIfNotExists = boolean | null;

export type MessageReferenceRequestChannelId = null | SnowflakeType;

export interface MessageReferenceRequest {
  channel_id?: MessageReferenceRequestChannelId;
  fail_if_not_exists?: MessageReferenceRequestFailIfNotExists;
  guild_id?: MessageReferenceRequestGuildId;
  message_id: SnowflakeType;
  type?: MessageReferenceRequestType;
}

export interface MessageReactionResponse {
  burst_colors: string[];
  count: number;
  count_details: MessageReactionCountDetailsResponse;
  emoji: MessageReactionEmojiResponse;
  me: boolean;
  me_burst: boolean;
}

export type MessageReactionEmojiResponseName = string | null;

export type MessageReactionEmojiResponseId = null | SnowflakeType;

export type MessageReactionEmojiResponseAnimated = boolean | null;

export interface MessageReactionEmojiResponse {
  animated?: MessageReactionEmojiResponseAnimated;
  id?: MessageReactionEmojiResponseId;
  name?: MessageReactionEmojiResponseName;
}

export interface MessageReactionCountDetailsResponse {
  burst: number;
  normal: number;
}

export interface MessageMentionChannelResponse {
  guild_id: SnowflakeType;
  id: SnowflakeType;
  name: string;
  type: ChannelTypes;
}

export type MessageInteractionResponseUser = null | UserResponse;

export type MessageInteractionResponseNameLocalized = string | null;

export interface MessageInteractionResponse {
  id: SnowflakeType;
  name: string;
  name_localized?: MessageInteractionResponseNameLocalized;
  type: InteractionTypes;
  user?: MessageInteractionResponseUser;
}

export type MessageEmbedVideoResponseWidth = null | UInt32Type;

export type MessageEmbedVideoResponseUrl = string | null;

export type MessageEmbedVideoResponseProxyUrl = string | null;

export type MessageEmbedVideoResponsePlaceholderVersion = null | UInt32Type;

export type MessageEmbedVideoResponsePlaceholder = string | null;

export type MessageEmbedVideoResponseHeight = null | UInt32Type;

export type MessageEmbedVideoResponseFlags = null | UInt32Type;

export interface MessageEmbedVideoResponse {
  flags?: MessageEmbedVideoResponseFlags;
  height?: MessageEmbedVideoResponseHeight;
  placeholder?: MessageEmbedVideoResponsePlaceholder;
  placeholder_version?: MessageEmbedVideoResponsePlaceholderVersion;
  proxy_url?: MessageEmbedVideoResponseProxyUrl;
  url?: MessageEmbedVideoResponseUrl;
  width?: MessageEmbedVideoResponseWidth;
}

export type MessageEmbedResponseVideo = null | MessageEmbedVideoResponse;

export type MessageEmbedResponseUrl = string | null;

export type MessageEmbedResponseTitle = string | null;

export type MessageEmbedResponseTimestamp = string | null;

export type MessageEmbedResponseImage = null | MessageEmbedImageResponse;

export type MessageEmbedResponseFooter = null | MessageEmbedFooterResponse;

export type MessageEmbedResponseFields = MessageEmbedFieldResponse[] | null;

export type MessageEmbedResponseDescription = string | null;

export type MessageEmbedResponseColor = number | null;

export type MessageEmbedResponseAuthor = null | MessageEmbedAuthorResponse;

export interface MessageEmbedResponse {
  author?: MessageEmbedResponseAuthor;
  color?: MessageEmbedResponseColor;
  description?: MessageEmbedResponseDescription;
  fields?: MessageEmbedResponseFields;
  footer?: MessageEmbedResponseFooter;
  image?: MessageEmbedResponseImage;
  provider?: MessageEmbedResponseProvider;
  thumbnail?: MessageEmbedResponseThumbnail;
  timestamp?: MessageEmbedResponseTimestamp;
  title?: MessageEmbedResponseTitle;
  type: string;
  url?: MessageEmbedResponseUrl;
  video?: MessageEmbedResponseVideo;
}

export type MessageEmbedProviderResponseUrl = string | null;

export interface MessageEmbedProviderResponse {
  name: string;
  url?: MessageEmbedProviderResponseUrl;
}

export type MessageEmbedResponseProvider = null | MessageEmbedProviderResponse;

export type MessageEmbedImageResponseWidth = null | UInt32Type;

export type MessageEmbedImageResponseUrl = string | null;

export type MessageEmbedImageResponseProxyUrl = string | null;

export type MessageEmbedImageResponsePlaceholderVersion = null | UInt32Type;

export type MessageEmbedImageResponsePlaceholder = string | null;

export type MessageEmbedImageResponseHeight = null | UInt32Type;

export type MessageEmbedImageResponseFlags = null | UInt32Type;

export interface MessageEmbedImageResponse {
  flags?: MessageEmbedImageResponseFlags;
  height?: MessageEmbedImageResponseHeight;
  placeholder?: MessageEmbedImageResponsePlaceholder;
  placeholder_version?: MessageEmbedImageResponsePlaceholderVersion;
  proxy_url?: MessageEmbedImageResponseProxyUrl;
  url?: MessageEmbedImageResponseUrl;
  width?: MessageEmbedImageResponseWidth;
}

export type MessageEmbedResponseThumbnail = null | MessageEmbedImageResponse;

export type MessageEmbedFooterResponseProxyIconUrl = string | null;

export type MessageEmbedFooterResponseIconUrl = string | null;

export interface MessageEmbedFooterResponse {
  icon_url?: MessageEmbedFooterResponseIconUrl;
  proxy_icon_url?: MessageEmbedFooterResponseProxyIconUrl;
  text: string;
}

export interface MessageEmbedFieldResponse {
  inline: boolean;
  name: string;
  value: string;
}

export type MessageEmbedAuthorResponseUrl = string | null;

export type MessageEmbedAuthorResponseProxyIconUrl = string | null;

export type MessageEmbedAuthorResponseIconUrl = string | null;

export interface MessageEmbedAuthorResponse {
  icon_url?: MessageEmbedAuthorResponseIconUrl;
  name: string;
  proxy_icon_url?: MessageEmbedAuthorResponseProxyIconUrl;
  url?: MessageEmbedAuthorResponseUrl;
}

/**
 * @maxItems 1521
 */
export type MessageEditRequestPartialStickerIds = SnowflakeType[] | null;

export type MessageEditRequestPartialFlags = number | null;

/**
 * @maxItems 10
 */
export type MessageEditRequestPartialEmbeds = RichEmbed[] | null;

/**
 * @maxLength 4000
 */
export type MessageEditRequestPartialContent = string | null;

/**
 * @maxItems 5
 */
export type MessageEditRequestPartialComponents = ActionRow[] | null;

/**
 * @maxItems 10
 */
export type MessageEditRequestPartialAttachments = MessageAttachmentRequest[] | null;

export type MessageEditRequestPartialAllowedMentions = null | MessageAllowedMentionsRequest;

export interface MessageEditRequestPartial {
  allowed_mentions?: MessageEditRequestPartialAllowedMentions;
  /** @maxItems 10 */
  attachments?: MessageEditRequestPartialAttachments;
  /** @maxItems 5 */
  components?: MessageEditRequestPartialComponents;
  /** @maxLength 4000 */
  content?: MessageEditRequestPartialContent;
  /** @maxItems 10 */
  embeds?: MessageEditRequestPartialEmbeds;
  flags?: MessageEditRequestPartialFlags;
  /** @maxItems 1521 */
  sticker_ids?: MessageEditRequestPartialStickerIds;
}

export type MessageCreateRequestTts = boolean | null;

/**
 * @maxItems 3
 */
export type MessageCreateRequestStickerIds = SnowflakeType[] | null;

export type MessageCreateRequestPoll = null | PollCreateRequest;

export type MessageCreateRequestNonce = number | string | null;

export type MessageCreateRequestMessageReference = null | MessageReferenceRequest;

export type MessageCreateRequestFlags = number | null;

export type MessageCreateRequestEnforceNonce = boolean | null;

/**
 * @maxItems 10
 */
export type MessageCreateRequestEmbeds = RichEmbed[] | null;

/**
 * @maxLength 4000
 */
export type MessageCreateRequestContent = string | null;

/**
 * @maxItems 5
 */
export type MessageCreateRequestComponents = ActionRow[] | null;

/**
 * @maxItems 10
 */
export type MessageCreateRequestAttachments = MessageAttachmentRequest[] | null;

export type MessageCreateRequestAllowedMentions = null | MessageAllowedMentionsRequest;

export interface MessageCreateRequest {
  allowed_mentions?: MessageCreateRequestAllowedMentions;
  /** @maxItems 10 */
  attachments?: MessageCreateRequestAttachments;
  /** @maxItems 5 */
  components?: MessageCreateRequestComponents;
  /** @maxLength 4000 */
  content?: MessageCreateRequestContent;
  /** @maxItems 10 */
  embeds?: MessageCreateRequestEmbeds;
  enforce_nonce?: MessageCreateRequestEnforceNonce;
  flags?: MessageCreateRequestFlags;
  message_reference?: MessageCreateRequestMessageReference;
  nonce?: MessageCreateRequestNonce;
  poll?: MessageCreateRequestPoll;
  /** @maxItems 3 */
  sticker_ids?: MessageCreateRequestStickerIds;
  tts?: MessageCreateRequestTts;
}

export type MessageComponentUserSelectResponseType = typeof MessageComponentUserSelectResponseType[keyof typeof MessageComponentUserSelectResponseType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MessageComponentUserSelectResponseType = {
  NUMBER_5: 5,
} as const;

export type MessageComponentUserSelectResponsePlaceholder = string | null;

export type MessageComponentUserSelectResponseMinValues = number | null;

export type MessageComponentUserSelectResponseMaxValues = number | null;

export type MessageComponentUserSelectResponseDisabled = boolean | null;

export type MessageComponentUserSelectResponseDefaultValues = UserSelectDefaultValueResponse[] | null;

export interface MessageComponentUserSelectResponse {
  custom_id: string;
  default_values?: MessageComponentUserSelectResponseDefaultValues;
  disabled?: MessageComponentUserSelectResponseDisabled;
  id: number;
  max_values?: MessageComponentUserSelectResponseMaxValues;
  min_values?: MessageComponentUserSelectResponseMinValues;
  placeholder?: MessageComponentUserSelectResponsePlaceholder;
  type: MessageComponentUserSelectResponseType;
}

export type MessageComponentTypes = number;

export type MessageComponentStringSelectResponseType = typeof MessageComponentStringSelectResponseType[keyof typeof MessageComponentStringSelectResponseType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MessageComponentStringSelectResponseType = {
  NUMBER_3: 3,
} as const;

export type MessageComponentStringSelectResponsePlaceholder = string | null;

export type MessageComponentStringSelectResponseOptionsAnyOfItem = null | SelectOptionResponse;

export type MessageComponentStringSelectResponseOptions = MessageComponentStringSelectResponseOptionsAnyOfItem[] | null;

export type MessageComponentStringSelectResponseMinValues = number | null;

export type MessageComponentStringSelectResponseMaxValues = number | null;

export type MessageComponentStringSelectResponseDisabled = boolean | null;

export interface MessageComponentStringSelectResponse {
  custom_id: string;
  disabled?: MessageComponentStringSelectResponseDisabled;
  id: number;
  max_values?: MessageComponentStringSelectResponseMaxValues;
  min_values?: MessageComponentStringSelectResponseMinValues;
  options?: MessageComponentStringSelectResponseOptions;
  placeholder?: MessageComponentStringSelectResponsePlaceholder;
  type: MessageComponentStringSelectResponseType;
}

export type MessageComponentRoleSelectResponseType = typeof MessageComponentRoleSelectResponseType[keyof typeof MessageComponentRoleSelectResponseType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MessageComponentRoleSelectResponseType = {
  NUMBER_6: 6,
} as const;

export type MessageComponentRoleSelectResponsePlaceholder = string | null;

export type MessageComponentRoleSelectResponseMinValues = number | null;

export type MessageComponentRoleSelectResponseMaxValues = number | null;

export type MessageComponentRoleSelectResponseDisabled = boolean | null;

export type MessageComponentRoleSelectResponseDefaultValues = RoleSelectDefaultValueResponse[] | null;

export interface MessageComponentRoleSelectResponse {
  custom_id: string;
  default_values?: MessageComponentRoleSelectResponseDefaultValues;
  disabled?: MessageComponentRoleSelectResponseDisabled;
  id: number;
  max_values?: MessageComponentRoleSelectResponseMaxValues;
  min_values?: MessageComponentRoleSelectResponseMinValues;
  placeholder?: MessageComponentRoleSelectResponsePlaceholder;
  type: MessageComponentRoleSelectResponseType;
}

export type MessageComponentMentionableSelectResponseType = typeof MessageComponentMentionableSelectResponseType[keyof typeof MessageComponentMentionableSelectResponseType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MessageComponentMentionableSelectResponseType = {
  NUMBER_7: 7,
} as const;

export type MessageComponentMentionableSelectResponsePlaceholder = string | null;

export type MessageComponentMentionableSelectResponseMinValues = number | null;

export type MessageComponentMentionableSelectResponseMaxValues = number | null;

export type MessageComponentMentionableSelectResponseDisabled = boolean | null;

export type MessageComponentMentionableSelectResponseDefaultValuesAnyOfItem = RoleSelectDefaultValueResponse | UserSelectDefaultValueResponse;

export type MessageComponentMentionableSelectResponseDefaultValues = MessageComponentMentionableSelectResponseDefaultValuesAnyOfItem[] | null;

export interface MessageComponentMentionableSelectResponse {
  custom_id: string;
  default_values?: MessageComponentMentionableSelectResponseDefaultValues;
  disabled?: MessageComponentMentionableSelectResponseDisabled;
  id: number;
  max_values?: MessageComponentMentionableSelectResponseMaxValues;
  min_values?: MessageComponentMentionableSelectResponseMinValues;
  placeholder?: MessageComponentMentionableSelectResponsePlaceholder;
  type: MessageComponentMentionableSelectResponseType;
}

export type MessageComponentInteractionMetadataResponseUser = null | UserResponse;

export type MessageComponentInteractionMetadataResponseType = typeof MessageComponentInteractionMetadataResponseType[keyof typeof MessageComponentInteractionMetadataResponseType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MessageComponentInteractionMetadataResponseType = {
  NUMBER_3: 3,
} as const;

export type MessageComponentInteractionMetadataResponseOriginalResponseMessageId = null | SnowflakeType;

export type MessageComponentInteractionMetadataResponseAuthorizingIntegrationOwners = {[key: string]: SnowflakeType};

export interface MessageComponentInteractionMetadataResponse {
  authorizing_integration_owners: MessageComponentInteractionMetadataResponseAuthorizingIntegrationOwners;
  id: SnowflakeType;
  interacted_message_id: SnowflakeType;
  original_response_message_id?: MessageComponentInteractionMetadataResponseOriginalResponseMessageId;
  type: MessageComponentInteractionMetadataResponseType;
  user?: MessageComponentInteractionMetadataResponseUser;
}

export type MessageComponentInputTextResponseValue = string | null;

export type MessageComponentInputTextResponseType = typeof MessageComponentInputTextResponseType[keyof typeof MessageComponentInputTextResponseType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MessageComponentInputTextResponseType = {
  NUMBER_4: 4,
} as const;

export type MessageComponentInputTextResponseRequired = boolean | null;

export type MessageComponentInputTextResponsePlaceholder = string | null;

export type MessageComponentInputTextResponseMinLength = number | null;

export type MessageComponentInputTextResponseMaxLength = number | null;

export type MessageComponentInputTextResponseLabel = string | null;

export interface MessageComponentInputTextResponse {
  custom_id: string;
  id: number;
  label?: MessageComponentInputTextResponseLabel;
  max_length?: MessageComponentInputTextResponseMaxLength;
  min_length?: MessageComponentInputTextResponseMinLength;
  placeholder?: MessageComponentInputTextResponsePlaceholder;
  required?: MessageComponentInputTextResponseRequired;
  style: TextStyleTypes;
  type: MessageComponentInputTextResponseType;
  value?: MessageComponentInputTextResponseValue;
}

export type MessageComponentEmojiResponseId = null | SnowflakeType;

export type MessageComponentEmojiResponseAnimated = boolean | null;

export interface MessageComponentEmojiResponse {
  animated?: MessageComponentEmojiResponseAnimated;
  id?: MessageComponentEmojiResponseId;
  name: string;
}

export type MessageComponentChannelSelectResponseType = typeof MessageComponentChannelSelectResponseType[keyof typeof MessageComponentChannelSelectResponseType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MessageComponentChannelSelectResponseType = {
  NUMBER_8: 8,
} as const;

export type MessageComponentChannelSelectResponsePlaceholder = string | null;

export type MessageComponentChannelSelectResponseMinValues = number | null;

export type MessageComponentChannelSelectResponseMaxValues = number | null;

export type MessageComponentChannelSelectResponseDisabled = boolean | null;

export type MessageComponentChannelSelectResponseDefaultValues = ChannelSelectDefaultValueResponse[] | null;

export type MessageComponentChannelSelectResponseChannelTypes = ChannelTypes[] | null;

export interface MessageComponentChannelSelectResponse {
  channel_types?: MessageComponentChannelSelectResponseChannelTypes;
  custom_id: string;
  default_values?: MessageComponentChannelSelectResponseDefaultValues;
  disabled?: MessageComponentChannelSelectResponseDisabled;
  id: number;
  max_values?: MessageComponentChannelSelectResponseMaxValues;
  min_values?: MessageComponentChannelSelectResponseMinValues;
  placeholder?: MessageComponentChannelSelectResponsePlaceholder;
  type: MessageComponentChannelSelectResponseType;
}

/**
 * @maxLength 2048
 */
export type MessageComponentButtonResponseUrl = string | null;

export type MessageComponentButtonResponseType = typeof MessageComponentButtonResponseType[keyof typeof MessageComponentButtonResponseType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MessageComponentButtonResponseType = {
  NUMBER_2: 2,
} as const;

export type MessageComponentButtonResponseSkuId = null | SnowflakeType;

export type MessageComponentButtonResponseLabel = string | null;

export type MessageComponentButtonResponseEmoji = null | MessageComponentEmojiResponse;

export type MessageComponentButtonResponseDisabled = boolean | null;

export type MessageComponentButtonResponseCustomId = string | null;

export interface MessageComponentButtonResponse {
  custom_id?: MessageComponentButtonResponseCustomId;
  disabled?: MessageComponentButtonResponseDisabled;
  emoji?: MessageComponentButtonResponseEmoji;
  id: number;
  label?: MessageComponentButtonResponseLabel;
  sku_id?: MessageComponentButtonResponseSkuId;
  style: ButtonStyleTypes;
  type: MessageComponentButtonResponseType;
  /** @maxLength 2048 */
  url?: MessageComponentButtonResponseUrl;
}

export type MessageComponentActionRowResponseType = typeof MessageComponentActionRowResponseType[keyof typeof MessageComponentActionRowResponseType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MessageComponentActionRowResponseType = {
  NUMBER_1: 1,
} as const;

export interface MessageComponentActionRowResponse {
  components?: MessageComponentActionRowResponseComponents;
  id: number;
  type: MessageComponentActionRowResponseType;
}

export type MessageComponentActionRowResponseComponentsAnyOfItem = MessageComponentButtonResponse | MessageComponentChannelSelectResponse | MessageComponentInputTextResponse | MessageComponentMentionableSelectResponse | MessageComponentRoleSelectResponse | MessageComponentStringSelectResponse | MessageComponentUserSelectResponse;

export type MessageComponentActionRowResponseComponents = MessageComponentActionRowResponseComponentsAnyOfItem[] | null;

export type MessageCallResponseEndedTimestamp = string | null;

export interface MessageCallResponse {
  ended_timestamp?: MessageCallResponseEndedTimestamp;
  participants: SnowflakeType[];
}

export type MessageAttachmentResponseWidth = number | null;

export type MessageAttachmentResponseWaveform = string | null;

export type MessageAttachmentResponseTitle = string | null;

export type MessageAttachmentResponseHeight = number | null;

export type MessageAttachmentResponseEphemeral = boolean | null;

export type MessageAttachmentResponseDurationSecs = number | null;

export type MessageAttachmentResponseDescription = string | null;

export type MessageAttachmentResponseContentType = string | null;

export type MessageAttachmentResponseClipParticipants = UserResponse[] | null;

export type MessageAttachmentResponseClipCreatedAt = string | null;

export type MessageAttachmentResponseApplication = null | ApplicationResponse;

export interface MessageAttachmentResponse {
  application?: MessageAttachmentResponseApplication;
  clip_created_at?: MessageAttachmentResponseClipCreatedAt;
  clip_participants?: MessageAttachmentResponseClipParticipants;
  content_type?: MessageAttachmentResponseContentType;
  description?: MessageAttachmentResponseDescription;
  duration_secs?: MessageAttachmentResponseDurationSecs;
  ephemeral?: MessageAttachmentResponseEphemeral;
  filename: string;
  height?: MessageAttachmentResponseHeight;
  id: SnowflakeType;
  proxy_url: string;
  size: number;
  title?: MessageAttachmentResponseTitle;
  url: string;
  waveform?: MessageAttachmentResponseWaveform;
  width?: MessageAttachmentResponseWidth;
}

/**
 * @maxLength 400
 */
export type MessageAttachmentRequestWaveform = string | null;

/**
 * @maxLength 1024
 */
export type MessageAttachmentRequestTitle = string | null;

export type MessageAttachmentRequestIsRemix = boolean | null;

/**
 * @maxLength 1024
 */
export type MessageAttachmentRequestFilename = string | null;

/**
 * @minimum 0
 * @maximum 2147483647
 */
export type MessageAttachmentRequestDurationSecs = number | null;

/**
 * @maxLength 1024
 */
export type MessageAttachmentRequestDescription = string | null;

export interface MessageAttachmentRequest {
  /** @maxLength 1024 */
  description?: MessageAttachmentRequestDescription;
  /**
   * @minimum 0
   * @maximum 2147483647
   */
  duration_secs?: MessageAttachmentRequestDurationSecs;
  /** @maxLength 1024 */
  filename?: MessageAttachmentRequestFilename;
  id: SnowflakeType;
  is_remix?: MessageAttachmentRequestIsRemix;
  /** @maxLength 1024 */
  title?: MessageAttachmentRequestTitle;
  /** @maxLength 400 */
  waveform?: MessageAttachmentRequestWaveform;
}

export type MessageAllowedMentionsRequestUsersAnyOfItem = null | SnowflakeType;

/**
 * @maxItems 100
 */
export type MessageAllowedMentionsRequestUsers = MessageAllowedMentionsRequestUsersAnyOfItem[] | null;

export interface MessageAllowedMentionsRequest {
  /** @maxItems 1521 */
  parse?: MessageAllowedMentionsRequestParse;
  replied_user?: MessageAllowedMentionsRequestRepliedUser;
  /** @maxItems 100 */
  roles?: MessageAllowedMentionsRequestRoles;
  /** @maxItems 100 */
  users?: MessageAllowedMentionsRequestUsers;
}

export type MessageAllowedMentionsRequestRolesAnyOfItem = null | SnowflakeType;

/**
 * @maxItems 100
 */
export type MessageAllowedMentionsRequestRoles = MessageAllowedMentionsRequestRolesAnyOfItem[] | null;

export type MessageAllowedMentionsRequestRepliedUser = boolean | null;

export type MessageAllowedMentionsRequestParseAnyOfItem = null | AllowedMentionTypes;

/**
 * @maxItems 1521
 */
export type MessageAllowedMentionsRequestParse = MessageAllowedMentionsRequestParseAnyOfItem[] | null;

export interface MessageActivityResponse { [key: string]: unknown }

export type MentionableSelectType = typeof MentionableSelectType[keyof typeof MentionableSelectType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MentionableSelectType = {
  NUMBER_7: 7,
} as const;

/**
 * @maxLength 150
 */
export type MentionableSelectPlaceholder = string | null;

/**
 * @minimum 0
 * @maximum 25
 */
export type MentionableSelectMinValues = number | null;

/**
 * @minimum 1
 * @maximum 25
 */
export type MentionableSelectMaxValues = number | null;

export type MentionableSelectDisabled = boolean | null;

export interface MentionableSelect {
  /** @maxLength 100 */
  custom_id: string;
  /** @maxItems 25 */
  default_values?: MentionableSelectDefaultValues;
  disabled?: MentionableSelectDisabled;
  /**
   * @minimum 1
   * @maximum 25
   */
  max_values?: MentionableSelectMaxValues;
  /**
   * @minimum 0
   * @maximum 25
   */
  min_values?: MentionableSelectMinValues;
  /** @maxLength 150 */
  placeholder?: MentionableSelectPlaceholder;
  type: MentionableSelectType;
}

export type MentionableSelectDefaultValuesAnyOfItem = RoleSelectDefaultValue | UserSelectDefaultValue;

/**
 * @maxItems 25
 */
export type MentionableSelectDefaultValues = MentionableSelectDefaultValuesAnyOfItem[] | null;

export type MentionSpamUpsertRequestPartialTriggerType = typeof MentionSpamUpsertRequestPartialTriggerType[keyof typeof MentionSpamUpsertRequestPartialTriggerType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MentionSpamUpsertRequestPartialTriggerType = {
  NUMBER_5: 5,
} as const;

export type MentionSpamUpsertRequestPartialTriggerMetadata = null | MentionSpamTriggerMetadata;

/**
 * @maxItems 20
 */
export type MentionSpamUpsertRequestPartialExemptRoles = SnowflakeType[] | null;

/**
 * @maxItems 50
 */
export type MentionSpamUpsertRequestPartialExemptChannels = SnowflakeType[] | null;

export type MentionSpamUpsertRequestPartialEnabled = boolean | null;

export interface MentionSpamUpsertRequestPartial {
  /**
   * @minItems 1
   * @maxItems 5
   */
  actions?: MentionSpamUpsertRequestPartialActions;
  enabled?: MentionSpamUpsertRequestPartialEnabled;
  event_type?: AutomodEventType;
  /** @maxItems 50 */
  exempt_channels?: MentionSpamUpsertRequestPartialExemptChannels;
  /** @maxItems 20 */
  exempt_roles?: MentionSpamUpsertRequestPartialExemptRoles;
  /** @maxLength 100 */
  name?: string;
  trigger_metadata?: MentionSpamUpsertRequestPartialTriggerMetadata;
  trigger_type?: MentionSpamUpsertRequestPartialTriggerType;
}

export type MentionSpamUpsertRequestPartialActionsAnyOfItem = BlockMessageAction | FlagToChannelAction | QuarantineUserAction | UserCommunicationDisabledAction;

/**
 * @minItems 1
 * @maxItems 5
 */
export type MentionSpamUpsertRequestPartialActions = MentionSpamUpsertRequestPartialActionsAnyOfItem[] | null;

export type MentionSpamUpsertRequestTriggerType = typeof MentionSpamUpsertRequestTriggerType[keyof typeof MentionSpamUpsertRequestTriggerType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MentionSpamUpsertRequestTriggerType = {
  NUMBER_5: 5,
} as const;

export type MentionSpamUpsertRequestTriggerMetadata = null | MentionSpamTriggerMetadata;

/**
 * @maxItems 20
 */
export type MentionSpamUpsertRequestExemptRoles = SnowflakeType[] | null;

/**
 * @maxItems 50
 */
export type MentionSpamUpsertRequestExemptChannels = SnowflakeType[] | null;

export type MentionSpamUpsertRequestEnabled = boolean | null;

export type MentionSpamUpsertRequestActionsAnyOfItem = BlockMessageAction | FlagToChannelAction | QuarantineUserAction | UserCommunicationDisabledAction;

/**
 * @minItems 1
 * @maxItems 5
 */
export type MentionSpamUpsertRequestActions = MentionSpamUpsertRequestActionsAnyOfItem[] | null;

export interface MentionSpamUpsertRequest {
  /**
   * @minItems 1
   * @maxItems 5
   */
  actions?: MentionSpamUpsertRequestActions;
  enabled?: MentionSpamUpsertRequestEnabled;
  event_type: AutomodEventType;
  /** @maxItems 50 */
  exempt_channels?: MentionSpamUpsertRequestExemptChannels;
  /** @maxItems 20 */
  exempt_roles?: MentionSpamUpsertRequestExemptRoles;
  /** @maxLength 100 */
  name: string;
  trigger_metadata?: MentionSpamUpsertRequestTriggerMetadata;
  trigger_type: MentionSpamUpsertRequestTriggerType;
}

export type MentionSpamTriggerMetadataResponseMentionRaidProtectionEnabled = boolean | null;

export interface MentionSpamTriggerMetadataResponse {
  mention_raid_protection_enabled?: MentionSpamTriggerMetadataResponseMentionRaidProtectionEnabled;
  mention_total_limit: number;
}

export type MentionSpamTriggerMetadataMentionRaidProtectionEnabled = boolean | null;

export interface MentionSpamTriggerMetadata {
  mention_raid_protection_enabled?: MentionSpamTriggerMetadataMentionRaidProtectionEnabled;
  /**
   * @minimum 0
   * @maximum 50
   */
  mention_total_limit: number;
}

export type MentionSpamRuleResponseTriggerType = typeof MentionSpamRuleResponseTriggerType[keyof typeof MentionSpamRuleResponseTriggerType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MentionSpamRuleResponseTriggerType = {
  NUMBER_5: 5,
} as const;

export type MentionSpamRuleResponseExemptRoles = SnowflakeType[] | null;

export type MentionSpamRuleResponseExemptChannels = SnowflakeType[] | null;

export type MentionSpamRuleResponseEnabled = boolean | null;

export type MentionSpamRuleResponseActionsItem = BlockMessageActionResponse | FlagToChannelActionResponse | QuarantineUserActionResponse | UserCommunicationDisabledActionResponse;

export interface MentionSpamRuleResponse {
  actions: MentionSpamRuleResponseActionsItem[];
  creator_id: SnowflakeType;
  enabled?: MentionSpamRuleResponseEnabled;
  event_type: AutomodEventType;
  exempt_channels?: MentionSpamRuleResponseExemptChannels;
  exempt_roles?: MentionSpamRuleResponseExemptRoles;
  guild_id: SnowflakeType;
  id: SnowflakeType;
  name: string;
  trigger_metadata: MentionSpamTriggerMetadataResponse;
  trigger_type: MentionSpamRuleResponseTriggerType;
}

export type MLSpamUpsertRequestPartialTriggerType = typeof MLSpamUpsertRequestPartialTriggerType[keyof typeof MLSpamUpsertRequestPartialTriggerType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MLSpamUpsertRequestPartialTriggerType = {
  NUMBER_3: 3,
} as const;

export type MLSpamUpsertRequestPartialTriggerMetadata = null | MLSpamTriggerMetadata;

/**
 * @maxItems 20
 */
export type MLSpamUpsertRequestPartialExemptRoles = SnowflakeType[] | null;

/**
 * @maxItems 50
 */
export type MLSpamUpsertRequestPartialExemptChannels = SnowflakeType[] | null;

export type MLSpamUpsertRequestPartialEnabled = boolean | null;

export interface MLSpamUpsertRequestPartial {
  /**
   * @minItems 1
   * @maxItems 5
   */
  actions?: MLSpamUpsertRequestPartialActions;
  enabled?: MLSpamUpsertRequestPartialEnabled;
  event_type?: AutomodEventType;
  /** @maxItems 50 */
  exempt_channels?: MLSpamUpsertRequestPartialExemptChannels;
  /** @maxItems 20 */
  exempt_roles?: MLSpamUpsertRequestPartialExemptRoles;
  /** @maxLength 100 */
  name?: string;
  trigger_metadata?: MLSpamUpsertRequestPartialTriggerMetadata;
  trigger_type?: MLSpamUpsertRequestPartialTriggerType;
}

export type MLSpamUpsertRequestPartialActionsAnyOfItem = BlockMessageAction | FlagToChannelAction | QuarantineUserAction | UserCommunicationDisabledAction;

/**
 * @minItems 1
 * @maxItems 5
 */
export type MLSpamUpsertRequestPartialActions = MLSpamUpsertRequestPartialActionsAnyOfItem[] | null;

export type MLSpamUpsertRequestTriggerType = typeof MLSpamUpsertRequestTriggerType[keyof typeof MLSpamUpsertRequestTriggerType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MLSpamUpsertRequestTriggerType = {
  NUMBER_3: 3,
} as const;

export type MLSpamUpsertRequestTriggerMetadata = null | MLSpamTriggerMetadata;

/**
 * @maxItems 20
 */
export type MLSpamUpsertRequestExemptRoles = SnowflakeType[] | null;

/**
 * @maxItems 50
 */
export type MLSpamUpsertRequestExemptChannels = SnowflakeType[] | null;

export type MLSpamUpsertRequestEnabled = boolean | null;

export interface MLSpamUpsertRequest {
  /**
   * @minItems 1
   * @maxItems 5
   */
  actions?: MLSpamUpsertRequestActions;
  enabled?: MLSpamUpsertRequestEnabled;
  event_type: AutomodEventType;
  /** @maxItems 50 */
  exempt_channels?: MLSpamUpsertRequestExemptChannels;
  /** @maxItems 20 */
  exempt_roles?: MLSpamUpsertRequestExemptRoles;
  /** @maxLength 100 */
  name: string;
  trigger_metadata?: MLSpamUpsertRequestTriggerMetadata;
  trigger_type: MLSpamUpsertRequestTriggerType;
}

export type MLSpamUpsertRequestActionsAnyOfItem = BlockMessageAction | FlagToChannelAction | QuarantineUserAction | UserCommunicationDisabledAction;

/**
 * @minItems 1
 * @maxItems 5
 */
export type MLSpamUpsertRequestActions = MLSpamUpsertRequestActionsAnyOfItem[] | null;

export interface MLSpamTriggerMetadataResponse { [key: string]: unknown }

export interface MLSpamTriggerMetadata { [key: string]: unknown }

export type MLSpamRuleResponseTriggerType = typeof MLSpamRuleResponseTriggerType[keyof typeof MLSpamRuleResponseTriggerType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MLSpamRuleResponseTriggerType = {
  NUMBER_3: 3,
} as const;

export type MLSpamRuleResponseExemptRoles = SnowflakeType[] | null;

export type MLSpamRuleResponseExemptChannels = SnowflakeType[] | null;

export type MLSpamRuleResponseEnabled = boolean | null;

export type MLSpamRuleResponseActionsItem = BlockMessageActionResponse | FlagToChannelActionResponse | QuarantineUserActionResponse | UserCommunicationDisabledActionResponse;

export interface MLSpamRuleResponse {
  actions: MLSpamRuleResponseActionsItem[];
  creator_id: SnowflakeType;
  enabled?: MLSpamRuleResponseEnabled;
  event_type: AutomodEventType;
  exempt_channels?: MLSpamRuleResponseExemptChannels;
  exempt_roles?: MLSpamRuleResponseExemptRoles;
  guild_id: SnowflakeType;
  id: SnowflakeType;
  name: string;
  trigger_metadata: MLSpamTriggerMetadataResponse;
  trigger_type: MLSpamRuleResponseTriggerType;
}

export interface ListGuildSoundboardSoundsResponse {
  items: SoundboardSoundResponse[];
}

export interface ListApplicationEmojisResponse {
  items: EmojiResponse[];
}

export type LaunchActivityInteractionCallbackResponseType = typeof LaunchActivityInteractionCallbackResponseType[keyof typeof LaunchActivityInteractionCallbackResponseType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const LaunchActivityInteractionCallbackResponseType = {
  NUMBER_12: 12,
} as const;

export interface LaunchActivityInteractionCallbackResponse {
  type: LaunchActivityInteractionCallbackResponseType;
}

export type LaunchActivityInteractionCallbackRequestType = typeof LaunchActivityInteractionCallbackRequestType[keyof typeof LaunchActivityInteractionCallbackRequestType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const LaunchActivityInteractionCallbackRequestType = {
  NUMBER_12: 12,
} as const;

export interface LaunchActivityInteractionCallbackRequest {
  type: LaunchActivityInteractionCallbackRequestType;
}

export type KeywordUpsertRequestPartialTriggerType = typeof KeywordUpsertRequestPartialTriggerType[keyof typeof KeywordUpsertRequestPartialTriggerType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const KeywordUpsertRequestPartialTriggerType = {
  NUMBER_1: 1,
} as const;

export type KeywordUpsertRequestPartialTriggerMetadata = null | KeywordTriggerMetadata;

/**
 * @maxItems 20
 */
export type KeywordUpsertRequestPartialExemptRoles = SnowflakeType[] | null;

/**
 * @maxItems 50
 */
export type KeywordUpsertRequestPartialExemptChannels = SnowflakeType[] | null;

export type KeywordUpsertRequestPartialEnabled = boolean | null;

export type KeywordUpsertRequestPartialActionsAnyOfItem = BlockMessageAction | FlagToChannelAction | QuarantineUserAction | UserCommunicationDisabledAction;

/**
 * @minItems 1
 * @maxItems 5
 */
export type KeywordUpsertRequestPartialActions = KeywordUpsertRequestPartialActionsAnyOfItem[] | null;

export interface KeywordUpsertRequestPartial {
  /**
   * @minItems 1
   * @maxItems 5
   */
  actions?: KeywordUpsertRequestPartialActions;
  enabled?: KeywordUpsertRequestPartialEnabled;
  event_type?: AutomodEventType;
  /** @maxItems 50 */
  exempt_channels?: KeywordUpsertRequestPartialExemptChannels;
  /** @maxItems 20 */
  exempt_roles?: KeywordUpsertRequestPartialExemptRoles;
  /** @maxLength 100 */
  name?: string;
  trigger_metadata?: KeywordUpsertRequestPartialTriggerMetadata;
  trigger_type?: KeywordUpsertRequestPartialTriggerType;
}

export type KeywordUpsertRequestTriggerType = typeof KeywordUpsertRequestTriggerType[keyof typeof KeywordUpsertRequestTriggerType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const KeywordUpsertRequestTriggerType = {
  NUMBER_1: 1,
} as const;

export type KeywordUpsertRequestTriggerMetadata = null | KeywordTriggerMetadata;

/**
 * @maxItems 20
 */
export type KeywordUpsertRequestExemptRoles = SnowflakeType[] | null;

/**
 * @maxItems 50
 */
export type KeywordUpsertRequestExemptChannels = SnowflakeType[] | null;

export type KeywordUpsertRequestEnabled = boolean | null;

export type KeywordUpsertRequestActionsAnyOfItem = BlockMessageAction | FlagToChannelAction | QuarantineUserAction | UserCommunicationDisabledAction;

/**
 * @minItems 1
 * @maxItems 5
 */
export type KeywordUpsertRequestActions = KeywordUpsertRequestActionsAnyOfItem[] | null;

export interface KeywordUpsertRequest {
  /**
   * @minItems 1
   * @maxItems 5
   */
  actions?: KeywordUpsertRequestActions;
  enabled?: KeywordUpsertRequestEnabled;
  event_type: AutomodEventType;
  /** @maxItems 50 */
  exempt_channels?: KeywordUpsertRequestExemptChannels;
  /** @maxItems 20 */
  exempt_roles?: KeywordUpsertRequestExemptRoles;
  /** @maxLength 100 */
  name: string;
  trigger_metadata?: KeywordUpsertRequestTriggerMetadata;
  trigger_type: KeywordUpsertRequestTriggerType;
}

export interface KeywordTriggerMetadataResponse {
  allow_list: string[];
  keyword_filter: string[];
  regex_patterns: string[];
}

/**
 * @maxItems 10
 */
export type KeywordTriggerMetadataRegexPatterns = string[] | null;

/**
 * @maxItems 1000
 */
export type KeywordTriggerMetadataKeywordFilter = string[] | null;

/**
 * @maxItems 100
 */
export type KeywordTriggerMetadataAllowList = string[] | null;

export interface KeywordTriggerMetadata {
  /** @maxItems 100 */
  allow_list?: KeywordTriggerMetadataAllowList;
  /** @maxItems 1000 */
  keyword_filter?: KeywordTriggerMetadataKeywordFilter;
  /** @maxItems 10 */
  regex_patterns?: KeywordTriggerMetadataRegexPatterns;
}

export type KeywordRuleResponseTriggerType = typeof KeywordRuleResponseTriggerType[keyof typeof KeywordRuleResponseTriggerType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const KeywordRuleResponseTriggerType = {
  NUMBER_1: 1,
} as const;

export type KeywordRuleResponseExemptRoles = SnowflakeType[] | null;

export type KeywordRuleResponseExemptChannels = SnowflakeType[] | null;

export type KeywordRuleResponseEnabled = boolean | null;

export type KeywordRuleResponseActionsItem = BlockMessageActionResponse | FlagToChannelActionResponse | QuarantineUserActionResponse | UserCommunicationDisabledActionResponse;

export interface KeywordRuleResponse {
  actions: KeywordRuleResponseActionsItem[];
  creator_id: SnowflakeType;
  enabled?: KeywordRuleResponseEnabled;
  event_type: AutomodEventType;
  exempt_channels?: KeywordRuleResponseExemptChannels;
  exempt_roles?: KeywordRuleResponseExemptRoles;
  guild_id: SnowflakeType;
  id: SnowflakeType;
  name: string;
  trigger_metadata: KeywordTriggerMetadataResponse;
  trigger_type: KeywordRuleResponseTriggerType;
}

export type InviteTypes = number;

export type InviteTargetTypes = number;

export type InviteStageInstanceResponseSpeakerCount = number | null;

export type InviteStageInstanceResponseParticipantCount = number | null;

export type InviteStageInstanceResponseMembers = GuildMemberResponse[] | null;

export interface InviteStageInstanceResponse {
  members?: InviteStageInstanceResponseMembers;
  participant_count?: InviteStageInstanceResponseParticipantCount;
  speaker_count?: InviteStageInstanceResponseSpeakerCount;
  topic: string;
}

export type InviteGuildResponseVerificationLevel = null | VerificationLevels;

export type InviteGuildResponseVanityUrlCode = string | null;

export type InviteGuildResponseSplash = string | null;

export type InviteGuildResponsePremiumSubscriptionCount = number | null;

export type InviteGuildResponseNsfwLevel = null | GuildNSFWContentLevel;

export type InviteGuildResponseNsfw = boolean | null;

export type InviteGuildResponseIcon = string | null;

export type InviteGuildResponseDescription = string | null;

export type InviteGuildResponseBanner = string | null;

export interface InviteGuildResponse {
  banner?: InviteGuildResponseBanner;
  description?: InviteGuildResponseDescription;
  features: GuildFeatures[];
  icon?: InviteGuildResponseIcon;
  id: SnowflakeType;
  name: string;
  nsfw?: InviteGuildResponseNsfw;
  nsfw_level?: InviteGuildResponseNsfwLevel;
  premium_subscription_count?: InviteGuildResponsePremiumSubscriptionCount;
  splash?: InviteGuildResponseSplash;
  vanity_url_code?: InviteGuildResponseVanityUrlCode;
  verification_level?: InviteGuildResponseVerificationLevel;
}

export type InviteChannelResponseRecipients = InviteChannelRecipientResponse[] | null;

export type InviteChannelResponseName = string | null;

export type InviteChannelResponseIcon = string | null;

export interface InviteChannelResponse {
  icon?: InviteChannelResponseIcon;
  id: SnowflakeType;
  name?: InviteChannelResponseName;
  recipients?: InviteChannelResponseRecipients;
  type: ChannelTypes;
}

export interface InviteChannelRecipientResponse {
  username: string;
}

export type InviteApplicationResponseType = null | ApplicationTypes;

export type InviteApplicationResponseTermsOfServiceUrl = string | null;

export type InviteApplicationResponseTags = string[] | null;

export type InviteApplicationResponseSlug = string | null;

export type InviteApplicationResponseRpcOriginsAnyOfItem = string | null;

export type InviteApplicationResponseRpcOrigins = InviteApplicationResponseRpcOriginsAnyOfItem[] | null;

export type InviteApplicationResponsePrivacyPolicyUrl = string | null;

export type InviteApplicationResponsePrimarySkuId = null | SnowflakeType;

export type InviteApplicationResponseMaxParticipants = number | null;

export type InviteApplicationResponseIntegrationTypesConfigAnyOf = {[key: string]: ApplicationIntegrationTypeConfigurationResponse};

export type InviteApplicationResponseIntegrationTypesConfig = InviteApplicationResponseIntegrationTypesConfigAnyOf | null;

export type InviteApplicationResponseInstallParams = null | ApplicationOAuth2InstallParamsResponse;

export type InviteApplicationResponseIcon = string | null;

export type InviteApplicationResponseGuildId = null | SnowflakeType;

export type InviteApplicationResponseCustomInstallUrl = string | null;

export type InviteApplicationResponseCoverImage = string | null;

export type InviteApplicationResponseBotRequireCodeGrant = boolean | null;

export type InviteApplicationResponseBotPublic = boolean | null;

export type InviteApplicationResponseBot = null | UserResponse;

export interface InviteApplicationResponse {
  bot?: InviteApplicationResponseBot;
  bot_public?: InviteApplicationResponseBotPublic;
  bot_require_code_grant?: InviteApplicationResponseBotRequireCodeGrant;
  cover_image?: InviteApplicationResponseCoverImage;
  custom_install_url?: InviteApplicationResponseCustomInstallUrl;
  description: string;
  flags: number;
  guild_id?: InviteApplicationResponseGuildId;
  icon?: InviteApplicationResponseIcon;
  id: SnowflakeType;
  install_params?: InviteApplicationResponseInstallParams;
  integration_types_config?: InviteApplicationResponseIntegrationTypesConfig;
  max_participants?: InviteApplicationResponseMaxParticipants;
  name: string;
  primary_sku_id?: InviteApplicationResponsePrimarySkuId;
  privacy_policy_url?: InviteApplicationResponsePrivacyPolicyUrl;
  rpc_origins?: InviteApplicationResponseRpcOrigins;
  slug?: InviteApplicationResponseSlug;
  tags?: InviteApplicationResponseTags;
  terms_of_service_url?: InviteApplicationResponseTermsOfServiceUrl;
  type?: InviteApplicationResponseType;
  verify_key: string;
}

export type InteractionTypes = number;

export type InteractionResponseResponseMessageLoading = boolean | null;

export type InteractionResponseResponseMessageId = null | SnowflakeType;

export type InteractionResponseResponseMessageEphemeral = boolean | null;

export type InteractionResponseGuildId = null | SnowflakeType;

export type InteractionResponseChannelId = null | SnowflakeType;

export interface InteractionResponse {
  channel_id?: InteractionResponseChannelId;
  guild_id?: InteractionResponseGuildId;
  id: SnowflakeType;
  response_message_ephemeral?: InteractionResponseResponseMessageEphemeral;
  response_message_id?: InteractionResponseResponseMessageId;
  response_message_loading?: InteractionResponseResponseMessageLoading;
  type: InteractionTypes;
}

export type InteractionContextType = number;

export type InteractionCallbackTypes = number;

export type InteractionCallbackResponseResource = CreateMessageInteractionCallbackResponse | LaunchActivityInteractionCallbackResponse | UpdateMessageInteractionCallbackResponse | null;

export interface InteractionCallbackResponse {
  interaction: InteractionResponse;
  resource?: InteractionCallbackResponseResource;
}

export type InteractionApplicationCommandAutocompleteCallbackStringDataChoicesAnyOfItem = null | ApplicationCommandOptionStringChoice;

/**
 * @maxItems 25
 */
export type InteractionApplicationCommandAutocompleteCallbackStringDataChoices = InteractionApplicationCommandAutocompleteCallbackStringDataChoicesAnyOfItem[] | null;

export interface InteractionApplicationCommandAutocompleteCallbackStringData {
  /** @maxItems 25 */
  choices?: InteractionApplicationCommandAutocompleteCallbackStringDataChoices;
}

export type InteractionApplicationCommandAutocompleteCallbackNumberDataChoicesAnyOfItem = null | ApplicationCommandOptionNumberChoice;

/**
 * @maxItems 25
 */
export type InteractionApplicationCommandAutocompleteCallbackNumberDataChoices = InteractionApplicationCommandAutocompleteCallbackNumberDataChoicesAnyOfItem[] | null;

export interface InteractionApplicationCommandAutocompleteCallbackNumberData {
  /** @maxItems 25 */
  choices?: InteractionApplicationCommandAutocompleteCallbackNumberDataChoices;
}

export type InteractionApplicationCommandAutocompleteCallbackIntegerDataChoicesAnyOfItem = null | ApplicationCommandOptionIntegerChoice;

/**
 * @maxItems 25
 */
export type InteractionApplicationCommandAutocompleteCallbackIntegerDataChoices = InteractionApplicationCommandAutocompleteCallbackIntegerDataChoicesAnyOfItem[] | null;

export interface InteractionApplicationCommandAutocompleteCallbackIntegerData {
  /** @maxItems 25 */
  choices?: InteractionApplicationCommandAutocompleteCallbackIntegerDataChoices;
}

export type IntegrationTypes = string;

export type IntegrationExpireGracePeriodTypes = number;

export type IntegrationExpireBehaviorTypes = number;

export type IntegrationApplicationResponseType = null | ApplicationTypes;

export type IntegrationApplicationResponsePrimarySkuId = null | SnowflakeType;

export type IntegrationApplicationResponseIcon = string | null;

export type IntegrationApplicationResponseCoverImage = string | null;

export type IntegrationApplicationResponseBot = null | UserResponse;

export interface IntegrationApplicationResponse {
  bot?: IntegrationApplicationResponseBot;
  cover_image?: IntegrationApplicationResponseCoverImage;
  description: string;
  icon?: IntegrationApplicationResponseIcon;
  id: SnowflakeType;
  name: string;
  primary_sku_id?: IntegrationApplicationResponsePrimarySkuId;
  type?: IntegrationApplicationResponseType;
}

/**
 * @minimum -9007199254740991
 * @maximum 9007199254740991
 */
export type Int53Type = number;

/**
 * @maxLength 4000
 */
export type InputTextValue = string | null;

export type InputTextType = typeof InputTextType[keyof typeof InputTextType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const InputTextType = {
  NUMBER_4: 4,
} as const;

export type InputTextRequired = boolean | null;

/**
 * @maxLength 100
 */
export type InputTextPlaceholder = string | null;

/**
 * @minimum 0
 * @maximum 4000
 */
export type InputTextMinLength = number | null;

/**
 * @minimum 1
 * @maximum 4000
 */
export type InputTextMaxLength = number | null;

export interface InputText {
  /** @maxLength 100 */
  custom_id: string;
  /** @maxLength 45 */
  label: string;
  /**
   * @minimum 1
   * @maximum 4000
   */
  max_length?: InputTextMaxLength;
  /**
   * @minimum 0
   * @maximum 4000
   */
  min_length?: InputTextMinLength;
  /** @maxLength 100 */
  placeholder?: InputTextPlaceholder;
  required?: InputTextRequired;
  style: TextStyleTypes;
  type: InputTextType;
  /** @maxLength 4000 */
  value?: InputTextValue;
}

export type IncomingWebhookUpdateRequestPartialPoll = null | PollCreateRequest;

export type IncomingWebhookUpdateRequestPartialFlags = number | null;

/**
 * @maxItems 10
 */
export type IncomingWebhookUpdateRequestPartialEmbeds = RichEmbed[] | null;

/**
 * @maxLength 2000
 */
export type IncomingWebhookUpdateRequestPartialContent = string | null;

/**
 * @maxItems 5
 */
export type IncomingWebhookUpdateRequestPartialComponents = ActionRow[] | null;

/**
 * @maxItems 10
 */
export type IncomingWebhookUpdateRequestPartialAttachments = MessageAttachmentRequest[] | null;

export type IncomingWebhookUpdateRequestPartialAllowedMentions = null | MessageAllowedMentionsRequest;

export interface IncomingWebhookUpdateRequestPartial {
  allowed_mentions?: IncomingWebhookUpdateRequestPartialAllowedMentions;
  /** @maxItems 10 */
  attachments?: IncomingWebhookUpdateRequestPartialAttachments;
  /** @maxItems 5 */
  components?: IncomingWebhookUpdateRequestPartialComponents;
  /** @maxLength 2000 */
  content?: IncomingWebhookUpdateRequestPartialContent;
  /** @maxItems 10 */
  embeds?: IncomingWebhookUpdateRequestPartialEmbeds;
  flags?: IncomingWebhookUpdateRequestPartialFlags;
  poll?: IncomingWebhookUpdateRequestPartialPoll;
}

export type IncomingWebhookUpdateForInteractionCallbackRequestPartialFlags = number | null;

/**
 * @maxItems 10
 */
export type IncomingWebhookUpdateForInteractionCallbackRequestPartialEmbeds = RichEmbed[] | null;

/**
 * @maxLength 2000
 */
export type IncomingWebhookUpdateForInteractionCallbackRequestPartialContent = string | null;

/**
 * @maxItems 5
 */
export type IncomingWebhookUpdateForInteractionCallbackRequestPartialComponents = ActionRow[] | null;

/**
 * @maxItems 10
 */
export type IncomingWebhookUpdateForInteractionCallbackRequestPartialAttachments = MessageAttachmentRequest[] | null;

export type IncomingWebhookUpdateForInteractionCallbackRequestPartialAllowedMentions = null | MessageAllowedMentionsRequest;

export interface IncomingWebhookUpdateForInteractionCallbackRequestPartial {
  allowed_mentions?: IncomingWebhookUpdateForInteractionCallbackRequestPartialAllowedMentions;
  /** @maxItems 10 */
  attachments?: IncomingWebhookUpdateForInteractionCallbackRequestPartialAttachments;
  /** @maxItems 5 */
  components?: IncomingWebhookUpdateForInteractionCallbackRequestPartialComponents;
  /** @maxLength 2000 */
  content?: IncomingWebhookUpdateForInteractionCallbackRequestPartialContent;
  /** @maxItems 10 */
  embeds?: IncomingWebhookUpdateForInteractionCallbackRequestPartialEmbeds;
  flags?: IncomingWebhookUpdateForInteractionCallbackRequestPartialFlags;
}

/**
 * @minLength 1
 * @maxLength 80
 */
export type IncomingWebhookRequestPartialUsername = string | null;

export type IncomingWebhookRequestPartialTts = boolean | null;

/**
 * @minLength 0
 * @maxLength 100
 */
export type IncomingWebhookRequestPartialThreadName = string | null;

export type IncomingWebhookRequestPartialPoll = null | PollCreateRequest;

export type IncomingWebhookRequestPartialFlags = number | null;

/**
 * @maxItems 10
 */
export type IncomingWebhookRequestPartialEmbeds = RichEmbed[] | null;

/**
 * @maxLength 2000
 */
export type IncomingWebhookRequestPartialContent = string | null;

/**
 * @maxItems 5
 */
export type IncomingWebhookRequestPartialComponents = ActionRow[] | null;

/**
 * @maxLength 2048
 */
export type IncomingWebhookRequestPartialAvatarUrl = string | null;

/**
 * @maxItems 10
 */
export type IncomingWebhookRequestPartialAttachments = MessageAttachmentRequest[] | null;

/**
 * @maxItems 5
 */
export type IncomingWebhookRequestPartialAppliedTags = SnowflakeType[] | null;

export type IncomingWebhookRequestPartialAllowedMentions = null | MessageAllowedMentionsRequest;

export interface IncomingWebhookRequestPartial {
  allowed_mentions?: IncomingWebhookRequestPartialAllowedMentions;
  /** @maxItems 5 */
  applied_tags?: IncomingWebhookRequestPartialAppliedTags;
  /** @maxItems 10 */
  attachments?: IncomingWebhookRequestPartialAttachments;
  /** @maxLength 2048 */
  avatar_url?: IncomingWebhookRequestPartialAvatarUrl;
  /** @maxItems 5 */
  components?: IncomingWebhookRequestPartialComponents;
  /** @maxLength 2000 */
  content?: IncomingWebhookRequestPartialContent;
  /** @maxItems 10 */
  embeds?: IncomingWebhookRequestPartialEmbeds;
  flags?: IncomingWebhookRequestPartialFlags;
  poll?: IncomingWebhookRequestPartialPoll;
  /**
   * @minLength 0
   * @maxLength 100
   */
  thread_name?: IncomingWebhookRequestPartialThreadName;
  tts?: IncomingWebhookRequestPartialTts;
  /**
   * @minLength 1
   * @maxLength 80
   */
  username?: IncomingWebhookRequestPartialUsername;
}

export type IncomingWebhookInteractionRequestTts = boolean | null;

export type IncomingWebhookInteractionRequestPoll = null | PollCreateRequest;

export type IncomingWebhookInteractionRequestFlags = number | null;

/**
 * @maxItems 10
 */
export type IncomingWebhookInteractionRequestEmbeds = RichEmbed[] | null;

/**
 * @maxLength 2000
 */
export type IncomingWebhookInteractionRequestContent = string | null;

/**
 * @maxItems 5
 */
export type IncomingWebhookInteractionRequestComponents = ActionRow[] | null;

/**
 * @maxItems 10
 */
export type IncomingWebhookInteractionRequestAttachments = MessageAttachmentRequest[] | null;

export type IncomingWebhookInteractionRequestAllowedMentions = null | MessageAllowedMentionsRequest;

export interface IncomingWebhookInteractionRequest {
  allowed_mentions?: IncomingWebhookInteractionRequestAllowedMentions;
  /** @maxItems 10 */
  attachments?: IncomingWebhookInteractionRequestAttachments;
  /** @maxItems 5 */
  components?: IncomingWebhookInteractionRequestComponents;
  /** @maxLength 2000 */
  content?: IncomingWebhookInteractionRequestContent;
  /** @maxItems 10 */
  embeds?: IncomingWebhookInteractionRequestEmbeds;
  flags?: IncomingWebhookInteractionRequestFlags;
  poll?: IncomingWebhookInteractionRequestPoll;
  tts?: IncomingWebhookInteractionRequestTts;
}

export interface IconEmojiResponse { [key: string]: unknown }

export type GuildWithCountsResponseWidgetChannelId = null | SnowflakeType;

export type GuildWithCountsResponseVanityUrlCode = string | null;

export type GuildWithCountsResponseSystemChannelId = null | SnowflakeType;

export type GuildWithCountsResponseSplash = string | null;

export type GuildWithCountsResponseSafetyAlertsChannelId = null | SnowflakeType;

export type GuildWithCountsResponseRulesChannelId = null | SnowflakeType;

export type GuildWithCountsResponsePublicUpdatesChannelId = null | SnowflakeType;

export type GuildWithCountsResponseMaxVideoChannelUsers = number | null;

export type GuildWithCountsResponseMaxStageVideoChannelUsers = number | null;

export type GuildWithCountsResponseMaxPresences = number | null;

export type GuildWithCountsResponseMaxMembers = number | null;

export type GuildWithCountsResponseIcon = string | null;

export type GuildWithCountsResponseHomeHeader = string | null;

export type GuildWithCountsResponseDiscoverySplash = string | null;

export type GuildWithCountsResponseDescription = string | null;

export type GuildWithCountsResponseBanner = string | null;

export type GuildWithCountsResponseApproximatePresenceCount = number | null;

export type GuildWithCountsResponseApproximateMemberCount = number | null;

export type GuildWithCountsResponseApplicationId = null | SnowflakeType;

export type GuildWithCountsResponseAfkChannelId = null | SnowflakeType;

export interface GuildWithCountsResponse {
  afk_channel_id?: GuildWithCountsResponseAfkChannelId;
  afk_timeout: AfkTimeouts;
  application_id?: GuildWithCountsResponseApplicationId;
  approximate_member_count?: GuildWithCountsResponseApproximateMemberCount;
  approximate_presence_count?: GuildWithCountsResponseApproximatePresenceCount;
  banner?: GuildWithCountsResponseBanner;
  default_message_notifications: UserNotificationSettings;
  description?: GuildWithCountsResponseDescription;
  discovery_splash?: GuildWithCountsResponseDiscoverySplash;
  emojis: EmojiResponse[];
  explicit_content_filter: GuildExplicitContentFilterTypes;
  features: GuildFeatures[];
  home_header?: GuildWithCountsResponseHomeHeader;
  icon?: GuildWithCountsResponseIcon;
  id: SnowflakeType;
  max_members?: GuildWithCountsResponseMaxMembers;
  max_presences?: GuildWithCountsResponseMaxPresences;
  max_stage_video_channel_users?: GuildWithCountsResponseMaxStageVideoChannelUsers;
  max_video_channel_users?: GuildWithCountsResponseMaxVideoChannelUsers;
  mfa_level: GuildMFALevel;
  name: string;
  nsfw: boolean;
  nsfw_level: GuildNSFWContentLevel;
  owner_id: SnowflakeType;
  preferred_locale: AvailableLocalesEnum;
  premium_progress_bar_enabled: boolean;
  premium_subscription_count: number;
  premium_tier: PremiumGuildTiers;
  public_updates_channel_id?: GuildWithCountsResponsePublicUpdatesChannelId;
  region: string;
  roles: GuildRoleResponse[];
  rules_channel_id?: GuildWithCountsResponseRulesChannelId;
  safety_alerts_channel_id?: GuildWithCountsResponseSafetyAlertsChannelId;
  splash?: GuildWithCountsResponseSplash;
  stickers: GuildStickerResponse[];
  system_channel_flags: number;
  system_channel_id?: GuildWithCountsResponseSystemChannelId;
  vanity_url_code?: GuildWithCountsResponseVanityUrlCode;
  verification_level: VerificationLevels;
  widget_channel_id?: GuildWithCountsResponseWidgetChannelId;
  widget_enabled: boolean;
}

export type GuildWelcomeScreenResponseDescription = string | null;

export interface GuildWelcomeScreenResponse {
  description?: GuildWelcomeScreenResponseDescription;
  welcome_channels: GuildWelcomeScreenChannelResponse[];
}

export type GuildWelcomeScreenChannelResponseEmojiName = string | null;

export type GuildWelcomeScreenChannelResponseEmojiId = null | SnowflakeType;

export interface GuildWelcomeScreenChannelResponse {
  channel_id: SnowflakeType;
  description: string;
  emoji_id?: GuildWelcomeScreenChannelResponseEmojiId;
  emoji_name?: GuildWelcomeScreenChannelResponseEmojiName;
}

/**
 * @maxLength 152133
 */
export type GuildWelcomeChannelEmojiName = string | null;

export type GuildWelcomeChannelEmojiId = null | SnowflakeType;

export interface GuildWelcomeChannel {
  channel_id: SnowflakeType;
  /**
   * @minLength 1
   * @maxLength 50
   */
  description: string;
  emoji_id?: GuildWelcomeChannelEmojiId;
  /** @maxLength 152133 */
  emoji_name?: GuildWelcomeChannelEmojiName;
}

export type GuildTemplateSnapshotResponseSystemChannelId = null | SnowflakeType;

export type GuildTemplateSnapshotResponseRegion = string | null;

export type GuildTemplateSnapshotResponseDescription = string | null;

export type GuildTemplateSnapshotResponseAfkChannelId = null | SnowflakeType;

export interface GuildTemplateSnapshotResponse {
  afk_channel_id?: GuildTemplateSnapshotResponseAfkChannelId;
  afk_timeout: AfkTimeouts;
  channels: GuildTemplateChannelResponse[];
  default_message_notifications: UserNotificationSettings;
  description?: GuildTemplateSnapshotResponseDescription;
  explicit_content_filter: GuildExplicitContentFilterTypes;
  name: string;
  preferred_locale: AvailableLocalesEnum;
  region?: GuildTemplateSnapshotResponseRegion;
  roles: GuildTemplateRoleResponse[];
  system_channel_flags: number;
  system_channel_id?: GuildTemplateSnapshotResponseSystemChannelId;
  verification_level: VerificationLevels;
}

export type GuildTemplateRoleResponseUnicodeEmoji = string | null;

export type GuildTemplateRoleResponseIcon = string | null;

export interface GuildTemplateRoleResponse {
  color: number;
  hoist: boolean;
  icon?: GuildTemplateRoleResponseIcon;
  id: number;
  mentionable: boolean;
  name: string;
  permissions: string;
  unicode_emoji?: GuildTemplateRoleResponseUnicodeEmoji;
}

export type GuildTemplateResponseIsDirty = boolean | null;

export type GuildTemplateResponseDescription = string | null;

export type GuildTemplateResponseCreator = null | UserResponse;

export interface GuildTemplateResponse {
  code: string;
  created_at: string;
  creator?: GuildTemplateResponseCreator;
  creator_id: SnowflakeType;
  description?: GuildTemplateResponseDescription;
  is_dirty?: GuildTemplateResponseIsDirty;
  name: string;
  serialized_source_guild: GuildTemplateSnapshotResponse;
  source_guild_id: SnowflakeType;
  updated_at: string;
  usage_count: number;
}

export type GuildTemplateChannelTagsModerated = boolean | null;

export type GuildTemplateChannelTagsEmojiName = string | null;

export type GuildTemplateChannelTagsEmojiId = null | SnowflakeType;

export interface GuildTemplateChannelTags {
  emoji_id?: GuildTemplateChannelTagsEmojiId;
  emoji_name?: GuildTemplateChannelTagsEmojiName;
  moderated?: GuildTemplateChannelTagsModerated;
  name: string;
}

export type GuildTemplateChannelResponseType = typeof GuildTemplateChannelResponseType[keyof typeof GuildTemplateChannelResponseType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GuildTemplateChannelResponseType = {
  NUMBER_0: 0,
  NUMBER_2: 2,
  NUMBER_4: 4,
} as const;

export type GuildTemplateChannelResponseTopic = string | null;

export type GuildTemplateChannelResponseThemeColor = number | null;

export type GuildTemplateChannelResponsePosition = number | null;

export type GuildTemplateChannelResponsePermissionOverwritesItem = null | ChannelPermissionOverwriteResponse;

export type GuildTemplateChannelResponseParentId = null | SnowflakeType;

export type GuildTemplateChannelResponseName = string | null;

export type GuildTemplateChannelResponseId = number | null;

export type GuildTemplateChannelResponseIconEmoji = null | IconEmojiResponse;

export type GuildTemplateChannelResponseDefaultThreadRateLimitPerUser = number | null;

export type GuildTemplateChannelResponseDefaultSortOrder = null | ThreadSortOrder;

export type GuildTemplateChannelResponseDefaultReactionEmoji = null | DefaultReactionEmojiResponse;

export type GuildTemplateChannelResponseDefaultForumLayout = null | ForumLayout;

export type GuildTemplateChannelResponseDefaultAutoArchiveDuration = null | ThreadAutoArchiveDuration;

export type GuildTemplateChannelResponseAvailableTags = GuildTemplateChannelTags[] | null;

export interface GuildTemplateChannelResponse {
  available_tags?: GuildTemplateChannelResponseAvailableTags;
  bitrate: number;
  default_auto_archive_duration?: GuildTemplateChannelResponseDefaultAutoArchiveDuration;
  default_forum_layout?: GuildTemplateChannelResponseDefaultForumLayout;
  default_reaction_emoji?: GuildTemplateChannelResponseDefaultReactionEmoji;
  default_sort_order?: GuildTemplateChannelResponseDefaultSortOrder;
  default_thread_rate_limit_per_user?: GuildTemplateChannelResponseDefaultThreadRateLimitPerUser;
  icon_emoji?: GuildTemplateChannelResponseIconEmoji;
  id?: GuildTemplateChannelResponseId;
  name?: GuildTemplateChannelResponseName;
  nsfw: boolean;
  parent_id?: GuildTemplateChannelResponseParentId;
  permission_overwrites: GuildTemplateChannelResponsePermissionOverwritesItem[];
  position?: GuildTemplateChannelResponsePosition;
  rate_limit_per_user: number;
  template: string;
  theme_color?: GuildTemplateChannelResponseThemeColor;
  topic?: GuildTemplateChannelResponseTopic;
  type: GuildTemplateChannelResponseType;
  user_limit: number;
}

export type GuildSubscriptionIntegrationResponseType = typeof GuildSubscriptionIntegrationResponseType[keyof typeof GuildSubscriptionIntegrationResponseType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GuildSubscriptionIntegrationResponseType = {
  guild_subscription: 'guild_subscription',
} as const;

export type GuildSubscriptionIntegrationResponseName = string | null;

export type GuildSubscriptionIntegrationResponseEnabled = boolean | null;

export type GuildSubscriptionIntegrationResponseAccount = null | AccountResponse;

export interface GuildSubscriptionIntegrationResponse {
  account?: GuildSubscriptionIntegrationResponseAccount;
  enabled?: GuildSubscriptionIntegrationResponseEnabled;
  id: SnowflakeType;
  name?: GuildSubscriptionIntegrationResponseName;
  type: GuildSubscriptionIntegrationResponseType;
}

export type GuildStickerResponseUser = null | UserResponse;

export type GuildStickerResponseType = typeof GuildStickerResponseType[keyof typeof GuildStickerResponseType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GuildStickerResponseType = {
  NUMBER_2: 2,
} as const;

export type GuildStickerResponseFormatType = null | StickerFormatTypes;

export type GuildStickerResponseDescription = string | null;

export interface GuildStickerResponse {
  available: boolean;
  description?: GuildStickerResponseDescription;
  format_type?: GuildStickerResponseFormatType;
  guild_id: SnowflakeType;
  id: SnowflakeType;
  name: string;
  tags: string;
  type: GuildStickerResponseType;
  user?: GuildStickerResponseUser;
}

export type GuildScheduledEventStatuses = number;

export type GuildScheduledEventPrivacyLevels = number;

export type GuildScheduledEventEntityTypes = number;

export type GuildRoleTagsResponseSubscriptionListingId = null | SnowflakeType;

export type GuildRoleTagsResponseIntegrationId = null | SnowflakeType;

export type GuildRoleTagsResponseBotId = null | SnowflakeType;

export interface GuildRoleTagsResponse {
  available_for_purchase?: null;
  bot_id?: GuildRoleTagsResponseBotId;
  guild_connections?: null;
  integration_id?: GuildRoleTagsResponseIntegrationId;
  premium_subscriber?: null;
  subscription_listing_id?: GuildRoleTagsResponseSubscriptionListingId;
}

export type GuildRoleResponseUnicodeEmoji = string | null;

export type GuildRoleResponseTags = null | GuildRoleTagsResponse;

export type GuildRoleResponseIcon = string | null;

export type GuildRoleResponseDescription = string | null;

export interface GuildRoleResponse {
  color: number;
  description?: GuildRoleResponseDescription;
  hoist: boolean;
  icon?: GuildRoleResponseIcon;
  id: SnowflakeType;
  managed: boolean;
  mentionable: boolean;
  name: string;
  permissions: string;
  position: number;
  tags?: GuildRoleResponseTags;
  unicode_emoji?: GuildRoleResponseUnicodeEmoji;
}

export type GuildResponseWidgetChannelId = null | SnowflakeType;

export type GuildResponseVanityUrlCode = string | null;

export type GuildResponseSystemChannelId = null | SnowflakeType;

export type GuildResponseSplash = string | null;

export type GuildResponseSafetyAlertsChannelId = null | SnowflakeType;

export type GuildResponseRulesChannelId = null | SnowflakeType;

export type GuildResponsePublicUpdatesChannelId = null | SnowflakeType;

export type GuildResponseMaxVideoChannelUsers = number | null;

export type GuildResponseMaxStageVideoChannelUsers = number | null;

export type GuildResponseMaxPresences = number | null;

export type GuildResponseMaxMembers = number | null;

export type GuildResponseIcon = string | null;

export type GuildResponseHomeHeader = string | null;

export type GuildResponseDiscoverySplash = string | null;

export type GuildResponseDescription = string | null;

export type GuildResponseBanner = string | null;

export type GuildResponseApplicationId = null | SnowflakeType;

export type GuildResponseAfkChannelId = null | SnowflakeType;

export interface GuildResponse {
  afk_channel_id?: GuildResponseAfkChannelId;
  afk_timeout: AfkTimeouts;
  application_id?: GuildResponseApplicationId;
  banner?: GuildResponseBanner;
  default_message_notifications: UserNotificationSettings;
  description?: GuildResponseDescription;
  discovery_splash?: GuildResponseDiscoverySplash;
  emojis: EmojiResponse[];
  explicit_content_filter: GuildExplicitContentFilterTypes;
  features: GuildFeatures[];
  home_header?: GuildResponseHomeHeader;
  icon?: GuildResponseIcon;
  id: SnowflakeType;
  max_members?: GuildResponseMaxMembers;
  max_presences?: GuildResponseMaxPresences;
  max_stage_video_channel_users?: GuildResponseMaxStageVideoChannelUsers;
  max_video_channel_users?: GuildResponseMaxVideoChannelUsers;
  mfa_level: GuildMFALevel;
  name: string;
  nsfw: boolean;
  nsfw_level: GuildNSFWContentLevel;
  owner_id: SnowflakeType;
  preferred_locale: AvailableLocalesEnum;
  premium_progress_bar_enabled: boolean;
  premium_subscription_count: number;
  premium_tier: PremiumGuildTiers;
  public_updates_channel_id?: GuildResponsePublicUpdatesChannelId;
  region: string;
  roles: GuildRoleResponse[];
  rules_channel_id?: GuildResponseRulesChannelId;
  safety_alerts_channel_id?: GuildResponseSafetyAlertsChannelId;
  splash?: GuildResponseSplash;
  stickers: GuildStickerResponse[];
  system_channel_flags: number;
  system_channel_id?: GuildResponseSystemChannelId;
  vanity_url_code?: GuildResponseVanityUrlCode;
  verification_level: VerificationLevels;
  widget_channel_id?: GuildResponseWidgetChannelId;
  widget_enabled: boolean;
}

export type GuildPruneResponsePruned = number | null;

export interface GuildPruneResponse {
  pruned?: GuildPruneResponsePruned;
}

export interface GuildProductPurchaseResponse {
  listing_id: SnowflakeType;
  product_name: string;
}

export type GuildPreviewResponseSplash = string | null;

export type GuildPreviewResponseIcon = string | null;

export type GuildPreviewResponseHomeHeader = string | null;

export type GuildPreviewResponseDiscoverySplash = string | null;

export type GuildPreviewResponseDescription = string | null;

export interface GuildPreviewResponse {
  approximate_member_count: number;
  approximate_presence_count: number;
  description?: GuildPreviewResponseDescription;
  discovery_splash?: GuildPreviewResponseDiscoverySplash;
  emojis: EmojiResponse[];
  features: GuildFeatures[];
  home_header?: GuildPreviewResponseHomeHeader;
  icon?: GuildPreviewResponseIcon;
  id: SnowflakeType;
  name: string;
  splash?: GuildPreviewResponseSplash;
  stickers: GuildStickerResponse[];
}

export type GuildPatchRequestPartialVerificationLevel = null | VerificationLevels;

export type GuildPatchRequestPartialSystemChannelId = null | SnowflakeType;

export type GuildPatchRequestPartialSystemChannelFlags = number | null;

export type GuildPatchRequestPartialSplash = string | null;

export type GuildPatchRequestPartialSafetyAlertsChannelId = null | SnowflakeType;

export type GuildPatchRequestPartialRulesChannelId = null | SnowflakeType;

export type GuildPatchRequestPartialRegion = string | null;

export type GuildPatchRequestPartialPublicUpdatesChannelId = null | SnowflakeType;

export type GuildPatchRequestPartialPremiumProgressBarEnabled = boolean | null;

export type GuildPatchRequestPartialPreferredLocale = null | AvailableLocalesEnum;

export type GuildPatchRequestPartialIcon = string | null;

export type GuildPatchRequestPartialHomeHeader = string | null;

export interface GuildPatchRequestPartial {
  afk_channel_id?: GuildPatchRequestPartialAfkChannelId;
  afk_timeout?: GuildPatchRequestPartialAfkTimeout;
  banner?: GuildPatchRequestPartialBanner;
  default_message_notifications?: GuildPatchRequestPartialDefaultMessageNotifications;
  /**
   * @minLength 0
   * @maxLength 120
   */
  description?: GuildPatchRequestPartialDescription;
  discovery_splash?: GuildPatchRequestPartialDiscoverySplash;
  explicit_content_filter?: GuildPatchRequestPartialExplicitContentFilter;
  /** @maxItems 1521 */
  features?: GuildPatchRequestPartialFeatures;
  home_header?: GuildPatchRequestPartialHomeHeader;
  icon?: GuildPatchRequestPartialIcon;
  /**
   * @minLength 2
   * @maxLength 100
   */
  name?: string;
  owner_id?: SnowflakeType;
  preferred_locale?: GuildPatchRequestPartialPreferredLocale;
  premium_progress_bar_enabled?: GuildPatchRequestPartialPremiumProgressBarEnabled;
  public_updates_channel_id?: GuildPatchRequestPartialPublicUpdatesChannelId;
  region?: GuildPatchRequestPartialRegion;
  rules_channel_id?: GuildPatchRequestPartialRulesChannelId;
  safety_alerts_channel_id?: GuildPatchRequestPartialSafetyAlertsChannelId;
  splash?: GuildPatchRequestPartialSplash;
  system_channel_flags?: GuildPatchRequestPartialSystemChannelFlags;
  system_channel_id?: GuildPatchRequestPartialSystemChannelId;
  verification_level?: GuildPatchRequestPartialVerificationLevel;
}

/**
 * @maxLength 152133
 */
export type GuildPatchRequestPartialFeaturesAnyOfItem = string | null;

/**
 * @maxItems 1521
 */
export type GuildPatchRequestPartialFeatures = GuildPatchRequestPartialFeaturesAnyOfItem[] | null;

export type GuildPatchRequestPartialExplicitContentFilter = null | GuildExplicitContentFilterTypes;

export type GuildPatchRequestPartialDiscoverySplash = string | null;

/**
 * @minLength 0
 * @maxLength 120
 */
export type GuildPatchRequestPartialDescription = string | null;

export type GuildPatchRequestPartialDefaultMessageNotifications = null | UserNotificationSettings;

export type GuildPatchRequestPartialBanner = string | null;

export type GuildPatchRequestPartialAfkTimeout = null | AfkTimeouts;

export type GuildPatchRequestPartialAfkChannelId = null | SnowflakeType;

export interface GuildOnboardingResponse {
  default_channel_ids: SnowflakeType[];
  enabled: boolean;
  guild_id: SnowflakeType;
  prompts: OnboardingPromptResponse[];
}

export type GuildOnboardingMode = number;

export type GuildNSFWContentLevel = number;

export type GuildMemberResponsePremiumSince = string | null;

export type GuildMemberResponseNick = string | null;

export type GuildMemberResponseCommunicationDisabledUntil = string | null;

export type GuildMemberResponseBanner = string | null;

export type GuildMemberResponseAvatarDecorationData = null | UserAvatarDecorationResponse;

export type GuildMemberResponseAvatar = string | null;

export interface GuildMemberResponse {
  avatar?: GuildMemberResponseAvatar;
  avatar_decoration_data?: GuildMemberResponseAvatarDecorationData;
  banner?: GuildMemberResponseBanner;
  communication_disabled_until?: GuildMemberResponseCommunicationDisabledUntil;
  deaf: boolean;
  flags: number;
  joined_at: string;
  mute: boolean;
  nick?: GuildMemberResponseNick;
  pending: boolean;
  premium_since?: GuildMemberResponsePremiumSince;
  roles: SnowflakeType[];
  user: UserResponse;
}

export type GuildMFALevel = number;

export interface GuildMFALevelResponse {
  level: GuildMFALevel;
}

export type GuildInviteResponseUses = number | null;

export type GuildInviteResponseType = null | 0;

export type GuildInviteResponseTemporary = boolean | null;

export type GuildInviteResponseTargetUser = null | UserResponse;

export type GuildInviteResponseTargetType = null | InviteTargetTypes;

export type GuildInviteResponseTargetApplication = null | InviteApplicationResponse;

export type GuildInviteResponseStageInstance = null | InviteStageInstanceResponse;

export type GuildInviteResponseMaxUses = number | null;

export type GuildInviteResponseMaxAge = number | null;

export type GuildInviteResponseIsContact = boolean | null;

export type GuildInviteResponseInviter = null | UserResponse;

export type GuildInviteResponseGuildScheduledEvent = null | ScheduledEventResponse;

export type GuildInviteResponseGuildId = null | SnowflakeType;

export type GuildInviteResponseGuild = null | InviteGuildResponse;

export type GuildInviteResponseFlags = number | null;

export type GuildInviteResponseExpiresAt = string | null;

export type GuildInviteResponseCreatedAt = string | null;

export type GuildInviteResponseChannel = null | InviteChannelResponse;

export type GuildInviteResponseApproximatePresenceCount = number | null;

export type GuildInviteResponseApproximateMemberCount = number | null;

export interface GuildInviteResponse {
  approximate_member_count?: GuildInviteResponseApproximateMemberCount;
  approximate_presence_count?: GuildInviteResponseApproximatePresenceCount;
  channel?: GuildInviteResponseChannel;
  code: string;
  created_at?: GuildInviteResponseCreatedAt;
  expires_at?: GuildInviteResponseExpiresAt;
  flags?: GuildInviteResponseFlags;
  guild?: GuildInviteResponseGuild;
  guild_id?: GuildInviteResponseGuildId;
  guild_scheduled_event?: GuildInviteResponseGuildScheduledEvent;
  inviter?: GuildInviteResponseInviter;
  is_contact?: GuildInviteResponseIsContact;
  max_age?: GuildInviteResponseMaxAge;
  max_uses?: GuildInviteResponseMaxUses;
  stage_instance?: GuildInviteResponseStageInstance;
  target_application?: GuildInviteResponseTargetApplication;
  target_type?: GuildInviteResponseTargetType;
  target_user?: GuildInviteResponseTargetUser;
  temporary?: GuildInviteResponseTemporary;
  type?: GuildInviteResponseType;
  uses?: GuildInviteResponseUses;
}

export type GuildIncomingWebhookResponseUser = null | UserResponse;

export type GuildIncomingWebhookResponseUrl = string | null;

export type GuildIncomingWebhookResponseType = typeof GuildIncomingWebhookResponseType[keyof typeof GuildIncomingWebhookResponseType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GuildIncomingWebhookResponseType = {
  NUMBER_1: 1,
} as const;

export type GuildIncomingWebhookResponseToken = string | null;

export type GuildIncomingWebhookResponseGuildId = null | SnowflakeType;

export type GuildIncomingWebhookResponseChannelId = null | SnowflakeType;

export type GuildIncomingWebhookResponseAvatar = string | null;

export type GuildIncomingWebhookResponseApplicationId = null | SnowflakeType;

export interface GuildIncomingWebhookResponse {
  application_id?: GuildIncomingWebhookResponseApplicationId;
  avatar?: GuildIncomingWebhookResponseAvatar;
  channel_id?: GuildIncomingWebhookResponseChannelId;
  guild_id?: GuildIncomingWebhookResponseGuildId;
  id: SnowflakeType;
  name: string;
  token?: GuildIncomingWebhookResponseToken;
  type: GuildIncomingWebhookResponseType;
  url?: GuildIncomingWebhookResponseUrl;
  user?: GuildIncomingWebhookResponseUser;
}

export type GuildHomeSettingsResponseWelcomeMessage = null | WelcomeMessageResponse;

export interface GuildHomeSettingsResponse {
  enabled: boolean;
  guild_id: SnowflakeType;
  new_member_actions?: GuildHomeSettingsResponseNewMemberActions;
  resource_channels?: GuildHomeSettingsResponseResourceChannels;
  welcome_message?: GuildHomeSettingsResponseWelcomeMessage;
}

export type GuildHomeSettingsResponseResourceChannelsAnyOfItem = null | ResourceChannelResponse;

export type GuildHomeSettingsResponseResourceChannels = GuildHomeSettingsResponseResourceChannelsAnyOfItem[] | null;

export type GuildHomeSettingsResponseNewMemberActionsAnyOfItem = null | NewMemberActionResponse;

export type GuildHomeSettingsResponseNewMemberActions = GuildHomeSettingsResponseNewMemberActionsAnyOfItem[] | null;

export type GuildFeatures = string;

export type GuildExplicitContentFilterTypes = number;

export type GuildCreateRequestVerificationLevel = null | VerificationLevels;

export type GuildCreateRequestSystemChannelId = null | SnowflakeType;

export type GuildCreateRequestSystemChannelFlags = number | null;

/**
 * @maxItems 1521
 */
export type GuildCreateRequestRoles = CreateGuildRequestRoleItem[] | null;

export type GuildCreateRequestRegion = string | null;

export type GuildCreateRequestPreferredLocale = null | AvailableLocalesEnum;

export type GuildCreateRequestIcon = string | null;

export type GuildCreateRequestExplicitContentFilter = null | GuildExplicitContentFilterTypes;

/**
 * @minLength 0
 * @maxLength 120
 */
export type GuildCreateRequestDescription = string | null;

export type GuildCreateRequestDefaultMessageNotifications = null | UserNotificationSettings;

/**
 * @maxItems 1521
 */
export type GuildCreateRequestChannels = CreateGuildRequestChannelItem[] | null;

export type GuildCreateRequestAfkTimeout = null | AfkTimeouts;

export type GuildCreateRequestAfkChannelId = null | SnowflakeType;

export interface GuildCreateRequest {
  afk_channel_id?: GuildCreateRequestAfkChannelId;
  afk_timeout?: GuildCreateRequestAfkTimeout;
  /** @maxItems 1521 */
  channels?: GuildCreateRequestChannels;
  default_message_notifications?: GuildCreateRequestDefaultMessageNotifications;
  /**
   * @minLength 0
   * @maxLength 120
   */
  description?: GuildCreateRequestDescription;
  explicit_content_filter?: GuildCreateRequestExplicitContentFilter;
  icon?: GuildCreateRequestIcon;
  /**
   * @minLength 2
   * @maxLength 100
   */
  name: string;
  preferred_locale?: GuildCreateRequestPreferredLocale;
  region?: GuildCreateRequestRegion;
  /** @maxItems 1521 */
  roles?: GuildCreateRequestRoles;
  system_channel_flags?: GuildCreateRequestSystemChannelFlags;
  system_channel_id?: GuildCreateRequestSystemChannelId;
  verification_level?: GuildCreateRequestVerificationLevel;
}

export type GuildChannelResponseVideoQualityMode = null | VideoQualityModes;

export type GuildChannelResponseUserLimit = number | null;

export type GuildChannelResponseType = typeof GuildChannelResponseType[keyof typeof GuildChannelResponseType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GuildChannelResponseType = {
  NUMBER_0: 0,
  NUMBER_2: 2,
  NUMBER_4: 4,
  NUMBER_5: 5,
  NUMBER_13: 13,
  NUMBER_14: 14,
  NUMBER_15: 15,
} as const;

export type GuildChannelResponseTopic = string | null;

export type GuildChannelResponseRtcRegion = string | null;

export type GuildChannelResponseRateLimitPerUser = number | null;

export type GuildChannelResponsePermissions = string | null;

export type GuildChannelResponsePermissionOverwrites = ChannelPermissionOverwriteResponse[] | null;

export type GuildChannelResponseParentId = null | SnowflakeType;

export type GuildChannelResponseNsfw = boolean | null;

export type GuildChannelResponseLastPinTimestamp = string | null;

export type GuildChannelResponseLastMessageId = null | SnowflakeType;

export type GuildChannelResponseHdStreamingUntil = string | null;

export type GuildChannelResponseHdStreamingBuyerId = null | SnowflakeType;

export type GuildChannelResponseDefaultThreadRateLimitPerUser = number | null;

export type GuildChannelResponseDefaultSortOrder = null | ThreadSortOrder;

export type GuildChannelResponseDefaultReactionEmoji = null | DefaultReactionEmojiResponse;

export type GuildChannelResponseDefaultForumLayout = null | ForumLayout;

export type GuildChannelResponseDefaultAutoArchiveDuration = null | ThreadAutoArchiveDuration;

export type GuildChannelResponseBitrate = number | null;

export type GuildChannelResponseAvailableTags = ForumTagResponse[] | null;

export interface GuildChannelResponse {
  available_tags?: GuildChannelResponseAvailableTags;
  bitrate?: GuildChannelResponseBitrate;
  default_auto_archive_duration?: GuildChannelResponseDefaultAutoArchiveDuration;
  default_forum_layout?: GuildChannelResponseDefaultForumLayout;
  default_reaction_emoji?: GuildChannelResponseDefaultReactionEmoji;
  default_sort_order?: GuildChannelResponseDefaultSortOrder;
  default_thread_rate_limit_per_user?: GuildChannelResponseDefaultThreadRateLimitPerUser;
  flags: number;
  guild_id: SnowflakeType;
  hd_streaming_buyer_id?: GuildChannelResponseHdStreamingBuyerId;
  hd_streaming_until?: GuildChannelResponseHdStreamingUntil;
  id: SnowflakeType;
  last_message_id?: GuildChannelResponseLastMessageId;
  last_pin_timestamp?: GuildChannelResponseLastPinTimestamp;
  name: string;
  nsfw?: GuildChannelResponseNsfw;
  parent_id?: GuildChannelResponseParentId;
  permission_overwrites?: GuildChannelResponsePermissionOverwrites;
  permissions?: GuildChannelResponsePermissions;
  position: number;
  rate_limit_per_user?: GuildChannelResponseRateLimitPerUser;
  rtc_region?: GuildChannelResponseRtcRegion;
  topic?: GuildChannelResponseTopic;
  type: GuildChannelResponseType;
  user_limit?: GuildChannelResponseUserLimit;
  video_quality_mode?: GuildChannelResponseVideoQualityMode;
}

export type GuildChannelLocationKind = typeof GuildChannelLocationKind[keyof typeof GuildChannelLocationKind];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GuildChannelLocationKind = {
  gc: 'gc',
} as const;

export interface GuildChannelLocation {
  channel_id: SnowflakeType;
  guild_id: SnowflakeType;
  id: string;
  kind: GuildChannelLocationKind;
}

export type GuildBanResponseReason = string | null;

export interface GuildBanResponse {
  reason?: GuildBanResponseReason;
  user: UserResponse;
}

export type GuildAuditLogResponseWebhooksItem = ApplicationIncomingWebhookResponse | ChannelFollowerWebhookResponse | GuildIncomingWebhookResponse;

export type GuildAuditLogResponseIntegrationsItem = PartialDiscordIntegrationResponse | PartialExternalConnectionIntegrationResponse | PartialGuildSubscriptionIntegrationResponse;

export type GuildAuditLogResponseGuildScheduledEventsItem = ExternalScheduledEventResponse | StageScheduledEventResponse | VoiceScheduledEventResponse;

export type GuildAuditLogResponseAutoModerationRulesItem = DefaultKeywordRuleResponse | KeywordRuleResponse | MLSpamRuleResponse | MentionSpamRuleResponse | SpamLinkRuleResponse | null;

export interface GuildAuditLogResponse {
  application_commands: ApplicationCommandResponse[];
  audit_log_entries: AuditLogEntryResponse[];
  auto_moderation_rules: GuildAuditLogResponseAutoModerationRulesItem[];
  guild_scheduled_events: GuildAuditLogResponseGuildScheduledEventsItem[];
  integrations: GuildAuditLogResponseIntegrationsItem[];
  threads: ThreadResponse[];
  users: UserResponse[];
  webhooks: GuildAuditLogResponseWebhooksItem[];
}

export type GroupDMInviteResponseType = null | 1;

export type GroupDMInviteResponseMaxAge = number | null;

export type GroupDMInviteResponseInviter = null | UserResponse;

export type GroupDMInviteResponseExpiresAt = string | null;

export type GroupDMInviteResponseCreatedAt = string | null;

export type GroupDMInviteResponseChannel = null | InviteChannelResponse;

export type GroupDMInviteResponseApproximateMemberCount = number | null;

export interface GroupDMInviteResponse {
  approximate_member_count?: GroupDMInviteResponseApproximateMemberCount;
  channel?: GroupDMInviteResponseChannel;
  code: string;
  created_at?: GroupDMInviteResponseCreatedAt;
  expires_at?: GroupDMInviteResponseExpiresAt;
  inviter?: GroupDMInviteResponseInviter;
  max_age?: GroupDMInviteResponseMaxAge;
  type?: GroupDMInviteResponseType;
}

export type GithubWebhookReview = null | GithubReview;

export type GithubWebhookRepository = null | GithubRepository;

export type GithubWebhookRelease = null | GithubRelease;

/**
 * @maxLength 152133
 */
export type GithubWebhookRefType = string | null;

/**
 * @maxLength 152133
 */
export type GithubWebhookRef = string | null;

export type GithubWebhookPullRequest = null | GithubIssue;

export type GithubWebhookMember = null | GithubUser;

export type GithubWebhookIssue = null | GithubIssue;

export type GithubWebhookHeadCommit = null | GithubCommit;

export type GithubWebhookForkee = null | GithubRepository;

export type GithubWebhookForced = boolean | null;

export type GithubWebhookDiscussion = null | GithubDiscussion;

/**
 * @maxLength 2048
 */
export type GithubWebhookCompare = string | null;

/**
 * @maxItems 1521
 */
export type GithubWebhookCommits = GithubCommit[] | null;

export type GithubWebhookComment = null | GithubComment;

export type GithubWebhookCheckSuite = null | GithubCheckSuite;

export type GithubWebhookCheckRun = null | GithubCheckRun;

export type GithubWebhookAnswer = null | GithubComment;

/**
 * @maxLength 152133
 */
export type GithubWebhookAction = string | null;

export interface GithubUser {
  /** @maxLength 2048 */
  avatar_url: string;
  /** @maxLength 2048 */
  html_url: string;
  id: number;
  /** @maxLength 152133 */
  login: string;
}

export interface GithubWebhook {
  /** @maxLength 152133 */
  action?: GithubWebhookAction;
  answer?: GithubWebhookAnswer;
  check_run?: GithubWebhookCheckRun;
  check_suite?: GithubWebhookCheckSuite;
  comment?: GithubWebhookComment;
  /** @maxItems 1521 */
  commits?: GithubWebhookCommits;
  /** @maxLength 2048 */
  compare?: GithubWebhookCompare;
  discussion?: GithubWebhookDiscussion;
  forced?: GithubWebhookForced;
  forkee?: GithubWebhookForkee;
  head_commit?: GithubWebhookHeadCommit;
  issue?: GithubWebhookIssue;
  member?: GithubWebhookMember;
  pull_request?: GithubWebhookPullRequest;
  /** @maxLength 152133 */
  ref?: GithubWebhookRef;
  /** @maxLength 152133 */
  ref_type?: GithubWebhookRefType;
  release?: GithubWebhookRelease;
  repository?: GithubWebhookRepository;
  review?: GithubWebhookReview;
  sender: GithubUser;
}

/**
 * @maxLength 152133
 */
export type GithubReviewBody = string | null;

export interface GithubReview {
  /** @maxLength 152133 */
  body?: GithubReviewBody;
  /** @maxLength 2048 */
  html_url: string;
  /** @maxLength 152133 */
  state: string;
  user: GithubUser;
}

export interface GithubRepository {
  /** @maxLength 152133 */
  full_name: string;
  /** @maxLength 2048 */
  html_url: string;
  id: number;
  /** @maxLength 152133 */
  name: string;
}

export interface GithubRelease {
  author: GithubUser;
  /** @maxLength 2048 */
  html_url: string;
  id: number;
  /** @maxLength 152133 */
  tag_name: string;
}

/**
 * @maxLength 152133
 */
export type GithubIssueBody = string | null;

export interface GithubIssue {
  /** @maxLength 152133 */
  body?: GithubIssueBody;
  /** @maxLength 2048 */
  html_url: string;
  id: number;
  number: number;
  pull_request?: unknown;
  /** @maxLength 152133 */
  title: string;
  user: GithubUser;
}

/**
 * @maxLength 152133
 */
export type GithubDiscussionBody = string | null;

/**
 * @maxLength 2048
 */
export type GithubDiscussionAnswerHtmlUrl = string | null;

export interface GithubDiscussion {
  /** @maxLength 2048 */
  answer_html_url?: GithubDiscussionAnswerHtmlUrl;
  /** @maxLength 152133 */
  body?: GithubDiscussionBody;
  /** @maxLength 2048 */
  html_url: string;
  number: number;
  /** @maxLength 152133 */
  title: string;
  user: GithubUser;
}

export interface GithubCommit {
  author: GithubAuthor;
  /** @maxLength 152133 */
  id: string;
  /** @maxLength 152133 */
  message: string;
  /** @maxLength 2048 */
  url: string;
}

/**
 * @maxLength 152133
 */
export type GithubCommentCommitId = string | null;

export interface GithubComment {
  /** @maxLength 152133 */
  body: string;
  /** @maxLength 152133 */
  commit_id?: GithubCommentCommitId;
  /** @maxLength 2048 */
  html_url: string;
  id: number;
  user: GithubUser;
}

/**
 * @maxItems 1521
 */
export type GithubCheckSuitePullRequests = GithubCheckPullRequest[] | null;

/**
 * @maxLength 152133
 */
export type GithubCheckSuiteHeadBranch = string | null;

/**
 * @maxLength 152133
 */
export type GithubCheckSuiteConclusion = string | null;

export interface GithubCheckSuite {
  app: GithubCheckApp;
  /** @maxLength 152133 */
  conclusion?: GithubCheckSuiteConclusion;
  /** @maxLength 152133 */
  head_branch?: GithubCheckSuiteHeadBranch;
  /** @maxLength 152133 */
  head_sha: string;
  /** @maxItems 1521 */
  pull_requests?: GithubCheckSuitePullRequests;
}

/**
 * @maxLength 152133
 */
export type GithubCheckRunOutputTitle = string | null;

/**
 * @maxLength 152133
 */
export type GithubCheckRunOutputSummary = string | null;

export interface GithubCheckRunOutput {
  /** @maxLength 152133 */
  summary?: GithubCheckRunOutputSummary;
  /** @maxLength 152133 */
  title?: GithubCheckRunOutputTitle;
}

/**
 * @maxItems 1521
 */
export type GithubCheckRunPullRequests = GithubCheckPullRequest[] | null;

export type GithubCheckRunOutputProperty = null | GithubCheckRunOutput;

/**
 * @maxLength 2048
 */
export type GithubCheckRunDetailsUrl = string | null;

/**
 * @maxLength 152133
 */
export type GithubCheckRunConclusion = string | null;

export interface GithubCheckRun {
  check_suite: GithubCheckSuite;
  /** @maxLength 152133 */
  conclusion?: GithubCheckRunConclusion;
  /** @maxLength 2048 */
  details_url?: GithubCheckRunDetailsUrl;
  /** @maxLength 2048 */
  html_url: string;
  /** @maxLength 152133 */
  name: string;
  output?: GithubCheckRunOutputProperty;
  /** @maxItems 1521 */
  pull_requests?: GithubCheckRunPullRequests;
}

export interface GithubCheckPullRequest {
  number: number;
}

export interface GithubCheckApp {
  /** @maxLength 152133 */
  name: string;
}

/**
 * @maxLength 152133
 */
export type GithubAuthorUsername = string | null;

export interface GithubAuthor {
  /** @maxLength 152133 */
  name: string;
  /** @maxLength 152133 */
  username?: GithubAuthorUsername;
}

export interface GatewayResponse {
  url: string;
}

export interface GatewayBotSessionStartLimitResponse {
  max_concurrency: number;
  remaining: number;
  reset_after: number;
  total: number;
}

export interface GatewayBotResponse {
  session_start_limit: GatewayBotSessionStartLimitResponse;
  shards: number;
  url: string;
}

export type FriendInviteResponseUses = number | null;

export type FriendInviteResponseType = null | 2;

export type FriendInviteResponseMaxUses = number | null;

export type FriendInviteResponseMaxAge = number | null;

export type FriendInviteResponseIsContact = boolean | null;

export type FriendInviteResponseInviter = null | UserResponse;

export type FriendInviteResponseFriendsCount = number | null;

export type FriendInviteResponseFlags = number | null;

export type FriendInviteResponseExpiresAt = string | null;

export type FriendInviteResponseCreatedAt = string | null;

export type FriendInviteResponseChannel = null | InviteChannelResponse;

export interface FriendInviteResponse {
  channel?: FriendInviteResponseChannel;
  code: string;
  created_at?: FriendInviteResponseCreatedAt;
  expires_at?: FriendInviteResponseExpiresAt;
  flags?: FriendInviteResponseFlags;
  friends_count?: FriendInviteResponseFriendsCount;
  inviter?: FriendInviteResponseInviter;
  is_contact?: FriendInviteResponseIsContact;
  max_age?: FriendInviteResponseMaxAge;
  max_uses?: FriendInviteResponseMaxUses;
  type?: FriendInviteResponseType;
  uses?: FriendInviteResponseUses;
}

export type ForumTagResponseEmojiName = string | null;

export type ForumTagResponseEmojiId = null | SnowflakeType;

export interface ForumTagResponse {
  emoji_id?: ForumTagResponseEmojiId;
  emoji_name?: ForumTagResponseEmojiName;
  id: SnowflakeType;
  moderated: boolean;
  name: string;
}

export type ForumLayout = number;

export type FlagToChannelActionResponseType = typeof FlagToChannelActionResponseType[keyof typeof FlagToChannelActionResponseType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const FlagToChannelActionResponseType = {
  NUMBER_2: 2,
} as const;

export interface FlagToChannelActionMetadataResponse {
  channel_id: SnowflakeType;
}

export interface FlagToChannelActionResponse {
  metadata: FlagToChannelActionMetadataResponse;
  type: FlagToChannelActionResponseType;
}

export interface FlagToChannelActionMetadata {
  channel_id: SnowflakeType;
}

export type FlagToChannelActionType = typeof FlagToChannelActionType[keyof typeof FlagToChannelActionType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const FlagToChannelActionType = {
  NUMBER_2: 2,
} as const;

export interface FlagToChannelAction {
  metadata: FlagToChannelActionMetadata;
  type: FlagToChannelActionType;
}

export type ExternalScheduledEventResponseUserRsvp = null | ScheduledEventUserResponse;

export type ExternalScheduledEventResponseUserCount = number | null;

export type ExternalScheduledEventResponseScheduledEndTime = string | null;

export type ExternalScheduledEventResponseImage = string | null;

export type ExternalScheduledEventResponseEntityType = typeof ExternalScheduledEventResponseEntityType[keyof typeof ExternalScheduledEventResponseEntityType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExternalScheduledEventResponseEntityType = {
  NUMBER_3: 3,
} as const;

export type ExternalScheduledEventResponseEntityId = null | SnowflakeType;

export type ExternalScheduledEventResponseDescription = string | null;

export type ExternalScheduledEventResponseCreatorId = null | SnowflakeType;

export type ExternalScheduledEventResponseCreator = null | UserResponse;

export type ExternalScheduledEventResponseChannelId = null | SnowflakeType;

export interface ExternalScheduledEventResponse {
  channel_id?: ExternalScheduledEventResponseChannelId;
  creator?: ExternalScheduledEventResponseCreator;
  creator_id?: ExternalScheduledEventResponseCreatorId;
  description?: ExternalScheduledEventResponseDescription;
  entity_id?: ExternalScheduledEventResponseEntityId;
  entity_metadata: EntityMetadataExternalResponse;
  entity_type: ExternalScheduledEventResponseEntityType;
  guild_id: SnowflakeType;
  id: SnowflakeType;
  image?: ExternalScheduledEventResponseImage;
  name: string;
  privacy_level: GuildScheduledEventPrivacyLevels;
  scheduled_end_time?: ExternalScheduledEventResponseScheduledEndTime;
  scheduled_start_time: string;
  status: GuildScheduledEventStatuses;
  user_count?: ExternalScheduledEventResponseUserCount;
  user_rsvp?: ExternalScheduledEventResponseUserRsvp;
}

export type ExternalScheduledEventPatchRequestPartialStatus = null | GuildScheduledEventStatuses;

export type ExternalScheduledEventPatchRequestPartialScheduledEndTime = string | null;

export type ExternalScheduledEventPatchRequestPartialImage = string | null;

export type ExternalScheduledEventPatchRequestPartialEntityType = null | 3;

/**
 * @maxLength 1000
 */
export type ExternalScheduledEventPatchRequestPartialDescription = string | null;

export type ExternalScheduledEventPatchRequestPartialChannelId = null | SnowflakeType;

export interface ExternalScheduledEventPatchRequestPartial {
  channel_id?: ExternalScheduledEventPatchRequestPartialChannelId;
  /** @maxLength 1000 */
  description?: ExternalScheduledEventPatchRequestPartialDescription;
  entity_metadata?: EntityMetadataExternal;
  entity_type?: ExternalScheduledEventPatchRequestPartialEntityType;
  image?: ExternalScheduledEventPatchRequestPartialImage;
  /** @maxLength 100 */
  name?: string;
  privacy_level?: GuildScheduledEventPrivacyLevels;
  scheduled_end_time?: ExternalScheduledEventPatchRequestPartialScheduledEndTime;
  scheduled_start_time?: string;
  status?: ExternalScheduledEventPatchRequestPartialStatus;
}

export type ExternalScheduledEventCreateRequestScheduledEndTime = string | null;

export type ExternalScheduledEventCreateRequestImage = string | null;

export type ExternalScheduledEventCreateRequestEntityType = typeof ExternalScheduledEventCreateRequestEntityType[keyof typeof ExternalScheduledEventCreateRequestEntityType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExternalScheduledEventCreateRequestEntityType = {
  NUMBER_3: 3,
} as const;

/**
 * @maxLength 1000
 */
export type ExternalScheduledEventCreateRequestDescription = string | null;

export type ExternalScheduledEventCreateRequestChannelId = null | SnowflakeType;

export interface ExternalScheduledEventCreateRequest {
  channel_id?: ExternalScheduledEventCreateRequestChannelId;
  /** @maxLength 1000 */
  description?: ExternalScheduledEventCreateRequestDescription;
  entity_metadata: EntityMetadataExternal;
  entity_type: ExternalScheduledEventCreateRequestEntityType;
  image?: ExternalScheduledEventCreateRequestImage;
  /** @maxLength 100 */
  name: string;
  privacy_level: GuildScheduledEventPrivacyLevels;
  scheduled_end_time?: ExternalScheduledEventCreateRequestScheduledEndTime;
  scheduled_start_time: string;
}

export type ExternalConnectionIntegrationResponseType = typeof ExternalConnectionIntegrationResponseType[keyof typeof ExternalConnectionIntegrationResponseType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExternalConnectionIntegrationResponseType = {
  twitch: 'twitch',
  youtube: 'youtube',
} as const;

export type ExternalConnectionIntegrationResponseSyncing = boolean | null;

export type ExternalConnectionIntegrationResponseSyncedAt = string | null;

export type ExternalConnectionIntegrationResponseSubscriberCount = number | null;

export type ExternalConnectionIntegrationResponseRoleId = null | SnowflakeType;

export type ExternalConnectionIntegrationResponseRevoked = boolean | null;

export type ExternalConnectionIntegrationResponseName = string | null;

export type ExternalConnectionIntegrationResponseExpireGracePeriod = null | IntegrationExpireGracePeriodTypes;

export type ExternalConnectionIntegrationResponseExpireBehavior = null | IntegrationExpireBehaviorTypes;

export type ExternalConnectionIntegrationResponseEnabled = boolean | null;

export type ExternalConnectionIntegrationResponseEnableEmoticons = boolean | null;

export type ExternalConnectionIntegrationResponseAccount = null | AccountResponse;

export interface ExternalConnectionIntegrationResponse {
  account?: ExternalConnectionIntegrationResponseAccount;
  enable_emoticons?: ExternalConnectionIntegrationResponseEnableEmoticons;
  enabled?: ExternalConnectionIntegrationResponseEnabled;
  expire_behavior?: ExternalConnectionIntegrationResponseExpireBehavior;
  expire_grace_period?: ExternalConnectionIntegrationResponseExpireGracePeriod;
  id: string;
  name?: ExternalConnectionIntegrationResponseName;
  revoked?: ExternalConnectionIntegrationResponseRevoked;
  role_id?: ExternalConnectionIntegrationResponseRoleId;
  subscriber_count?: ExternalConnectionIntegrationResponseSubscriberCount;
  synced_at?: ExternalConnectionIntegrationResponseSyncedAt;
  syncing?: ExternalConnectionIntegrationResponseSyncing;
  type: ExternalConnectionIntegrationResponseType;
  user: UserResponse;
}

export interface EntityMetadataVoiceResponse { [key: string]: unknown }

export interface EntityMetadataVoice { [key: string]: unknown }

export interface EntityMetadataStageInstanceResponse { [key: string]: unknown }

export interface EntityMetadataStageInstance { [key: string]: unknown }

export interface EntityMetadataExternalResponse {
  location: string;
}

export interface EntityMetadataExternal {
  /** @maxLength 100 */
  location: string;
}

export type EntitlementTypes = number;

export type EntitlementTenantFulfillmentStatusResponse = number;

export type EntitlementResponseStartsAt = string | null;

export type EntitlementResponseGuildId = null | SnowflakeType;

export type EntitlementResponseFulfillmentStatus = null | EntitlementTenantFulfillmentStatusResponse;

export type EntitlementResponseFulfilledAt = string | null;

export type EntitlementResponseEndsAt = string | null;

export type EntitlementResponseConsumed = boolean | null;

export interface EntitlementResponse {
  application_id: SnowflakeType;
  consumed?: EntitlementResponseConsumed;
  deleted: boolean;
  ends_at?: EntitlementResponseEndsAt;
  fulfilled_at?: EntitlementResponseFulfilledAt;
  fulfillment_status?: EntitlementResponseFulfillmentStatus;
  guild_id?: EntitlementResponseGuildId;
  id: SnowflakeType;
  sku_id: SnowflakeType;
  starts_at?: EntitlementResponseStartsAt;
  type: EntitlementTypes;
  user_id: SnowflakeType;
}

export type EntitlementOwnerTypes = number;

export type EmojiResponseUser = null | UserResponse;

export interface EmojiResponse {
  animated: boolean;
  available: boolean;
  id: SnowflakeType;
  managed: boolean;
  name: string;
  require_colons: boolean;
  roles: SnowflakeType[];
  user?: EmojiResponseUser;
}

export type EmojiId = null | SnowflakeType;

export type EmojiAnimated = boolean | null;

export interface Emoji {
  animated?: EmojiAnimated;
  id?: EmojiId;
  /** @maxLength 32 */
  name: string;
}

export type EmbeddedActivityInstanceLocation = GuildChannelLocation | PrivateChannelLocation | null;

export interface EmbeddedActivityInstance {
  application_id: SnowflakeType;
  instance_id: string;
  launch_id: string;
  location?: EmbeddedActivityInstanceLocation;
  users: SnowflakeType[];
}

export type DiscordIntegrationResponseUser = null | UserResponse;

export type DiscordIntegrationResponseType = typeof DiscordIntegrationResponseType[keyof typeof DiscordIntegrationResponseType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DiscordIntegrationResponseType = {
  discord: 'discord',
} as const;

export type DiscordIntegrationResponseScopesItem = typeof DiscordIntegrationResponseScopesItem[keyof typeof DiscordIntegrationResponseScopesItem];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DiscordIntegrationResponseScopesItem = {
  applicationscommands: 'applications.commands',
  bot: 'bot',
  webhookincoming: 'webhook.incoming',
} as const;

export type DiscordIntegrationResponseName = string | null;

export type DiscordIntegrationResponseEnabled = boolean | null;

export type DiscordIntegrationResponseAccount = null | AccountResponse;

export interface DiscordIntegrationResponse {
  account?: DiscordIntegrationResponseAccount;
  application: IntegrationApplicationResponse;
  enabled?: DiscordIntegrationResponseEnabled;
  id: SnowflakeType;
  name?: DiscordIntegrationResponseName;
  scopes: DiscordIntegrationResponseScopesItem[];
  type: DiscordIntegrationResponseType;
  user?: DiscordIntegrationResponseUser;
}

export type DefaultReactionEmojiResponseEmojiName = string | null;

export type DefaultReactionEmojiResponseEmojiId = null | SnowflakeType;

export interface DefaultReactionEmojiResponse {
  emoji_id?: DefaultReactionEmojiResponseEmojiId;
  emoji_name?: DefaultReactionEmojiResponseEmojiName;
}

export type DefaultKeywordRuleResponseTriggerType = typeof DefaultKeywordRuleResponseTriggerType[keyof typeof DefaultKeywordRuleResponseTriggerType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DefaultKeywordRuleResponseTriggerType = {
  NUMBER_4: 4,
} as const;

export type DefaultKeywordRuleResponseExemptRoles = SnowflakeType[] | null;

export type DefaultKeywordRuleResponseExemptChannels = SnowflakeType[] | null;

export type DefaultKeywordRuleResponseEnabled = boolean | null;

export type DefaultKeywordRuleResponseActionsItem = BlockMessageActionResponse | FlagToChannelActionResponse | QuarantineUserActionResponse | UserCommunicationDisabledActionResponse;

export interface DefaultKeywordRuleResponse {
  actions: DefaultKeywordRuleResponseActionsItem[];
  creator_id: SnowflakeType;
  enabled?: DefaultKeywordRuleResponseEnabled;
  event_type: AutomodEventType;
  exempt_channels?: DefaultKeywordRuleResponseExemptChannels;
  exempt_roles?: DefaultKeywordRuleResponseExemptRoles;
  guild_id: SnowflakeType;
  id: SnowflakeType;
  name: string;
  trigger_metadata: DefaultKeywordListTriggerMetadataResponse;
  trigger_type: DefaultKeywordRuleResponseTriggerType;
}

export type DefaultKeywordListUpsertRequestPartialTriggerType = typeof DefaultKeywordListUpsertRequestPartialTriggerType[keyof typeof DefaultKeywordListUpsertRequestPartialTriggerType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DefaultKeywordListUpsertRequestPartialTriggerType = {
  NUMBER_4: 4,
} as const;

/**
 * @maxItems 20
 */
export type DefaultKeywordListUpsertRequestPartialExemptRoles = SnowflakeType[] | null;

/**
 * @maxItems 50
 */
export type DefaultKeywordListUpsertRequestPartialExemptChannels = SnowflakeType[] | null;

export type DefaultKeywordListUpsertRequestPartialEnabled = boolean | null;

export type DefaultKeywordListUpsertRequestPartialActionsAnyOfItem = BlockMessageAction | FlagToChannelAction | QuarantineUserAction | UserCommunicationDisabledAction;

/**
 * @minItems 1
 * @maxItems 5
 */
export type DefaultKeywordListUpsertRequestPartialActions = DefaultKeywordListUpsertRequestPartialActionsAnyOfItem[] | null;

export interface DefaultKeywordListUpsertRequestPartial {
  /**
   * @minItems 1
   * @maxItems 5
   */
  actions?: DefaultKeywordListUpsertRequestPartialActions;
  enabled?: DefaultKeywordListUpsertRequestPartialEnabled;
  event_type?: AutomodEventType;
  /** @maxItems 50 */
  exempt_channels?: DefaultKeywordListUpsertRequestPartialExemptChannels;
  /** @maxItems 20 */
  exempt_roles?: DefaultKeywordListUpsertRequestPartialExemptRoles;
  /** @maxLength 100 */
  name?: string;
  trigger_metadata?: DefaultKeywordListTriggerMetadata;
  trigger_type?: DefaultKeywordListUpsertRequestPartialTriggerType;
}

export type DefaultKeywordListUpsertRequestTriggerType = typeof DefaultKeywordListUpsertRequestTriggerType[keyof typeof DefaultKeywordListUpsertRequestTriggerType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DefaultKeywordListUpsertRequestTriggerType = {
  NUMBER_4: 4,
} as const;

/**
 * @maxItems 20
 */
export type DefaultKeywordListUpsertRequestExemptRoles = SnowflakeType[] | null;

/**
 * @maxItems 50
 */
export type DefaultKeywordListUpsertRequestExemptChannels = SnowflakeType[] | null;

export type DefaultKeywordListUpsertRequestEnabled = boolean | null;

export type DefaultKeywordListUpsertRequestActionsAnyOfItem = BlockMessageAction | FlagToChannelAction | QuarantineUserAction | UserCommunicationDisabledAction;

/**
 * @minItems 1
 * @maxItems 5
 */
export type DefaultKeywordListUpsertRequestActions = DefaultKeywordListUpsertRequestActionsAnyOfItem[] | null;

export interface DefaultKeywordListUpsertRequest {
  /**
   * @minItems 1
   * @maxItems 5
   */
  actions?: DefaultKeywordListUpsertRequestActions;
  enabled?: DefaultKeywordListUpsertRequestEnabled;
  event_type: AutomodEventType;
  /** @maxItems 50 */
  exempt_channels?: DefaultKeywordListUpsertRequestExemptChannels;
  /** @maxItems 20 */
  exempt_roles?: DefaultKeywordListUpsertRequestExemptRoles;
  /** @maxLength 100 */
  name: string;
  trigger_metadata: DefaultKeywordListTriggerMetadata;
  trigger_type: DefaultKeywordListUpsertRequestTriggerType;
}

export interface DefaultKeywordListTriggerMetadataResponse {
  allow_list: string[];
  presets: AutomodKeywordPresetType[];
}

export type DefaultKeywordListTriggerMetadataPresets = AutomodKeywordPresetType[] | null;

/**
 * @maxItems 1000
 */
export type DefaultKeywordListTriggerMetadataAllowList = string[] | null;

export interface DefaultKeywordListTriggerMetadata {
  /** @maxItems 1000 */
  allow_list?: DefaultKeywordListTriggerMetadataAllowList;
  presets?: DefaultKeywordListTriggerMetadataPresets;
}

export type CreatedThreadResponseVideoQualityMode = null | VideoQualityModes;

export type CreatedThreadResponseUserLimit = number | null;

export type CreatedThreadResponseType = typeof CreatedThreadResponseType[keyof typeof CreatedThreadResponseType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreatedThreadResponseType = {
  NUMBER_10: 10,
  NUMBER_11: 11,
  NUMBER_12: 12,
} as const;

export type CreatedThreadResponseThreadMetadata = null | ThreadMetadataResponse;

export type CreatedThreadResponseRtcRegion = string | null;

export type CreatedThreadResponseRateLimitPerUser = number | null;

export type CreatedThreadResponsePermissions = string | null;

export type CreatedThreadResponseParentId = null | SnowflakeType;

export type CreatedThreadResponseMember = null | ThreadMemberResponse;

export type CreatedThreadResponseLastPinTimestamp = string | null;

export type CreatedThreadResponseLastMessageId = null | SnowflakeType;

export type CreatedThreadResponseBitrate = number | null;

export type CreatedThreadResponseAppliedTags = SnowflakeType[] | null;

export interface CreatedThreadResponse {
  applied_tags?: CreatedThreadResponseAppliedTags;
  bitrate?: CreatedThreadResponseBitrate;
  flags: number;
  guild_id: SnowflakeType;
  id: SnowflakeType;
  last_message_id?: CreatedThreadResponseLastMessageId;
  last_pin_timestamp?: CreatedThreadResponseLastPinTimestamp;
  member?: CreatedThreadResponseMember;
  member_count: number;
  message_count: number;
  name: string;
  owner_id: SnowflakeType;
  parent_id?: CreatedThreadResponseParentId;
  permissions?: CreatedThreadResponsePermissions;
  rate_limit_per_user?: CreatedThreadResponseRateLimitPerUser;
  rtc_region?: CreatedThreadResponseRtcRegion;
  thread_metadata?: CreatedThreadResponseThreadMetadata;
  total_message_sent: number;
  type: CreatedThreadResponseType;
  user_limit?: CreatedThreadResponseUserLimit;
  video_quality_mode?: CreatedThreadResponseVideoQualityMode;
}

export type CreateTextThreadWithoutMessageRequestType = null | 10 | 11 | 12;

/**
 * @minimum 0
 * @maximum 21600
 */
export type CreateTextThreadWithoutMessageRequestRateLimitPerUser = number | null;

export type CreateTextThreadWithoutMessageRequestInvitable = boolean | null;

export type CreateTextThreadWithoutMessageRequestAutoArchiveDuration = null | ThreadAutoArchiveDuration;

export interface CreateTextThreadWithoutMessageRequest {
  auto_archive_duration?: CreateTextThreadWithoutMessageRequestAutoArchiveDuration;
  invitable?: CreateTextThreadWithoutMessageRequestInvitable;
  /**
   * @minLength 1
   * @maxLength 100
   */
  name: string;
  /**
   * @minimum 0
   * @maximum 21600
   */
  rate_limit_per_user?: CreateTextThreadWithoutMessageRequestRateLimitPerUser;
  type?: CreateTextThreadWithoutMessageRequestType;
}

/**
 * @minimum 0
 * @maximum 21600
 */
export type CreateTextThreadWithMessageRequestRateLimitPerUser = number | null;

export type CreateTextThreadWithMessageRequestAutoArchiveDuration = null | ThreadAutoArchiveDuration;

export interface CreateTextThreadWithMessageRequest {
  auto_archive_duration?: CreateTextThreadWithMessageRequestAutoArchiveDuration;
  /**
   * @minLength 1
   * @maxLength 100
   */
  name: string;
  /**
   * @minimum 0
   * @maximum 21600
   */
  rate_limit_per_user?: CreateTextThreadWithMessageRequestRateLimitPerUser;
}

export type CreatePrivateChannelRequestRecipientId = null | SnowflakeType;

export type CreatePrivateChannelRequestNicksAnyOf = {[key: string]: string | null};

export type CreatePrivateChannelRequestNicks = CreatePrivateChannelRequestNicksAnyOf | null;

/**
 * @maxItems 1521
 */
export type CreatePrivateChannelRequestAccessTokens = string[] | null;

export interface CreatePrivateChannelRequest {
  /** @maxItems 1521 */
  access_tokens?: CreatePrivateChannelRequestAccessTokens;
  nicks?: CreatePrivateChannelRequestNicks;
  recipient_id?: CreatePrivateChannelRequestRecipientId;
}

export type CreateOrUpdateThreadTagRequestModerated = boolean | null;

/**
 * @maxLength 100
 */
export type CreateOrUpdateThreadTagRequestEmojiName = string | null;

export type CreateOrUpdateThreadTagRequestEmojiId = null | SnowflakeType;

export interface CreateOrUpdateThreadTagRequest {
  emoji_id?: CreateOrUpdateThreadTagRequestEmojiId;
  /** @maxLength 100 */
  emoji_name?: CreateOrUpdateThreadTagRequestEmojiName;
  moderated?: CreateOrUpdateThreadTagRequestModerated;
  /**
   * @minLength 0
   * @maxLength 20
   */
  name: string;
}

export type CreateMessageInteractionCallbackResponseType = typeof CreateMessageInteractionCallbackResponseType[keyof typeof CreateMessageInteractionCallbackResponseType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateMessageInteractionCallbackResponseType = {
  NUMBER_4: 4,
} as const;

export interface CreateMessageInteractionCallbackResponse {
  message: MessageResponse;
  type: CreateMessageInteractionCallbackResponseType;
}

export type CreateMessageInteractionCallbackRequestType = typeof CreateMessageInteractionCallbackRequestType[keyof typeof CreateMessageInteractionCallbackRequestType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateMessageInteractionCallbackRequestType = {
  NUMBER_4: 4,
  NUMBER_5: 5,
} as const;

export type CreateMessageInteractionCallbackRequestData = null | IncomingWebhookInteractionRequest;

export interface CreateMessageInteractionCallbackRequest {
  data?: CreateMessageInteractionCallbackRequestData;
  type: CreateMessageInteractionCallbackRequestType;
}

/**
 * @maxLength 100
 */
export type CreateGuildRequestRoleItemUnicodeEmoji = string | null;

export type CreateGuildRequestRoleItemPermissions = number | null;

/**
 * @maxLength 100
 */
export type CreateGuildRequestRoleItemName = string | null;

export type CreateGuildRequestRoleItemMentionable = boolean | null;

export type CreateGuildRequestRoleItemHoist = boolean | null;

/**
 * @minimum 0
 * @maximum 16777215
 */
export type CreateGuildRequestRoleItemColor = number | null;

export interface CreateGuildRequestRoleItem {
  /**
   * @minimum 0
   * @maximum 16777215
   */
  color?: CreateGuildRequestRoleItemColor;
  hoist?: CreateGuildRequestRoleItemHoist;
  id: number;
  mentionable?: CreateGuildRequestRoleItemMentionable;
  /** @maxLength 100 */
  name?: CreateGuildRequestRoleItemName;
  permissions?: CreateGuildRequestRoleItemPermissions;
  /** @maxLength 100 */
  unicode_emoji?: CreateGuildRequestRoleItemUnicodeEmoji;
}

export type CreateGuildRequestChannelItemVideoQualityMode = null | VideoQualityModes;

/**
 * @minimum 0
 */
export type CreateGuildRequestChannelItemUserLimit = number | null;

export type CreateGuildRequestChannelItemType = null | 0 | 2 | 4;

/**
 * @minLength 0
 * @maxLength 4096
 */
export type CreateGuildRequestChannelItemTopic = string | null;

export type CreateGuildRequestChannelItemRtcRegion = string | null;

/**
 * @minimum 0
 * @maximum 21600
 */
export type CreateGuildRequestChannelItemRateLimitPerUser = number | null;

/**
 * @minimum 0
 */
export type CreateGuildRequestChannelItemPosition = number | null;

/**
 * @maxItems 100
 */
export type CreateGuildRequestChannelItemPermissionOverwrites = ChannelPermissionOverwriteRequest[] | null;

export type CreateGuildRequestChannelItemParentId = null | SnowflakeType;

export type CreateGuildRequestChannelItemNsfw = boolean | null;

export type CreateGuildRequestChannelItemId = null | SnowflakeType;

/**
 * @minimum 0
 * @maximum 21600
 */
export type CreateGuildRequestChannelItemDefaultThreadRateLimitPerUser = number | null;

export type CreateGuildRequestChannelItemDefaultSortOrder = null | ThreadSortOrder;

export type CreateGuildRequestChannelItemDefaultReactionEmoji = null | UpdateDefaultReactionEmojiRequest;

export type CreateGuildRequestChannelItemDefaultForumLayout = null | ForumLayout;

export type CreateGuildRequestChannelItemDefaultAutoArchiveDuration = null | ThreadAutoArchiveDuration;

/**
 * @minimum 8000
 */
export type CreateGuildRequestChannelItemBitrate = number | null;

/**
 * @maxItems 20
 */
export type CreateGuildRequestChannelItemAvailableTags = CreateOrUpdateThreadTagRequest[] | null;

export interface CreateGuildRequestChannelItem {
  /** @maxItems 20 */
  available_tags?: CreateGuildRequestChannelItemAvailableTags;
  /** @minimum 8000 */
  bitrate?: CreateGuildRequestChannelItemBitrate;
  default_auto_archive_duration?: CreateGuildRequestChannelItemDefaultAutoArchiveDuration;
  default_forum_layout?: CreateGuildRequestChannelItemDefaultForumLayout;
  default_reaction_emoji?: CreateGuildRequestChannelItemDefaultReactionEmoji;
  default_sort_order?: CreateGuildRequestChannelItemDefaultSortOrder;
  /**
   * @minimum 0
   * @maximum 21600
   */
  default_thread_rate_limit_per_user?: CreateGuildRequestChannelItemDefaultThreadRateLimitPerUser;
  id?: CreateGuildRequestChannelItemId;
  /**
   * @minLength 1
   * @maxLength 100
   */
  name: string;
  nsfw?: CreateGuildRequestChannelItemNsfw;
  parent_id?: CreateGuildRequestChannelItemParentId;
  /** @maxItems 100 */
  permission_overwrites?: CreateGuildRequestChannelItemPermissionOverwrites;
  /** @minimum 0 */
  position?: CreateGuildRequestChannelItemPosition;
  /**
   * @minimum 0
   * @maximum 21600
   */
  rate_limit_per_user?: CreateGuildRequestChannelItemRateLimitPerUser;
  rtc_region?: CreateGuildRequestChannelItemRtcRegion;
  /**
   * @minLength 0
   * @maxLength 4096
   */
  topic?: CreateGuildRequestChannelItemTopic;
  type?: CreateGuildRequestChannelItemType;
  /** @minimum 0 */
  user_limit?: CreateGuildRequestChannelItemUserLimit;
  video_quality_mode?: CreateGuildRequestChannelItemVideoQualityMode;
}

export type CreateGuildInviteRequestUnique = boolean | null;

export type CreateGuildInviteRequestTemporary = boolean | null;

export type CreateGuildInviteRequestTargetUserId = null | SnowflakeType;

export type CreateGuildInviteRequestTargetType = null | 1 | 2;

export type CreateGuildInviteRequestTargetApplicationId = null | SnowflakeType;

/**
 * @minimum 0
 * @maximum 100
 */
export type CreateGuildInviteRequestMaxUses = number | null;

/**
 * @minimum 0
 * @maximum 604800
 */
export type CreateGuildInviteRequestMaxAge = number | null;

export interface CreateGuildInviteRequest {
  /**
   * @minimum 0
   * @maximum 604800
   */
  max_age?: CreateGuildInviteRequestMaxAge;
  /**
   * @minimum 0
   * @maximum 100
   */
  max_uses?: CreateGuildInviteRequestMaxUses;
  target_application_id?: CreateGuildInviteRequestTargetApplicationId;
  target_type?: CreateGuildInviteRequestTargetType;
  target_user_id?: CreateGuildInviteRequestTargetUserId;
  temporary?: CreateGuildInviteRequestTemporary;
  unique?: CreateGuildInviteRequestUnique;
}

export type CreateGuildChannelRequestVideoQualityMode = null | VideoQualityModes;

/**
 * @minimum 0
 */
export type CreateGuildChannelRequestUserLimit = number | null;

export type CreateGuildChannelRequestType = null | 0 | 2 | 4 | 5 | 13 | 14 | 15;

/**
 * @minLength 0
 * @maxLength 4096
 */
export type CreateGuildChannelRequestTopic = string | null;

export type CreateGuildChannelRequestRtcRegion = string | null;

/**
 * @minimum 0
 * @maximum 21600
 */
export type CreateGuildChannelRequestRateLimitPerUser = number | null;

/**
 * @minimum 0
 */
export type CreateGuildChannelRequestPosition = number | null;

/**
 * @maxItems 100
 */
export type CreateGuildChannelRequestPermissionOverwrites = ChannelPermissionOverwriteRequest[] | null;

export type CreateGuildChannelRequestParentId = null | SnowflakeType;

export type CreateGuildChannelRequestNsfw = boolean | null;

/**
 * @minimum 0
 * @maximum 21600
 */
export type CreateGuildChannelRequestDefaultThreadRateLimitPerUser = number | null;

export type CreateGuildChannelRequestDefaultSortOrder = null | ThreadSortOrder;

export type CreateGuildChannelRequestDefaultReactionEmoji = null | UpdateDefaultReactionEmojiRequest;

export type CreateGuildChannelRequestDefaultForumLayout = null | ForumLayout;

export type CreateGuildChannelRequestDefaultAutoArchiveDuration = null | ThreadAutoArchiveDuration;

/**
 * @minimum 8000
 */
export type CreateGuildChannelRequestBitrate = number | null;

export interface CreateGuildChannelRequest {
  /** @maxItems 20 */
  available_tags?: CreateGuildChannelRequestAvailableTags;
  /** @minimum 8000 */
  bitrate?: CreateGuildChannelRequestBitrate;
  default_auto_archive_duration?: CreateGuildChannelRequestDefaultAutoArchiveDuration;
  default_forum_layout?: CreateGuildChannelRequestDefaultForumLayout;
  default_reaction_emoji?: CreateGuildChannelRequestDefaultReactionEmoji;
  default_sort_order?: CreateGuildChannelRequestDefaultSortOrder;
  /**
   * @minimum 0
   * @maximum 21600
   */
  default_thread_rate_limit_per_user?: CreateGuildChannelRequestDefaultThreadRateLimitPerUser;
  /**
   * @minLength 1
   * @maxLength 100
   */
  name: string;
  nsfw?: CreateGuildChannelRequestNsfw;
  parent_id?: CreateGuildChannelRequestParentId;
  /** @maxItems 100 */
  permission_overwrites?: CreateGuildChannelRequestPermissionOverwrites;
  /** @minimum 0 */
  position?: CreateGuildChannelRequestPosition;
  /**
   * @minimum 0
   * @maximum 21600
   */
  rate_limit_per_user?: CreateGuildChannelRequestRateLimitPerUser;
  rtc_region?: CreateGuildChannelRequestRtcRegion;
  /**
   * @minLength 0
   * @maxLength 4096
   */
  topic?: CreateGuildChannelRequestTopic;
  type?: CreateGuildChannelRequestType;
  /** @minimum 0 */
  user_limit?: CreateGuildChannelRequestUserLimit;
  video_quality_mode?: CreateGuildChannelRequestVideoQualityMode;
}

export type CreateGuildChannelRequestAvailableTagsAnyOfItem = null | CreateOrUpdateThreadTagRequest;

/**
 * @maxItems 20
 */
export type CreateGuildChannelRequestAvailableTags = CreateGuildChannelRequestAvailableTagsAnyOfItem[] | null;

/**
 * @minimum 1
 * @maximum 604800
 */
export type CreateGroupDMInviteRequestMaxAge = number | null;

export interface CreateGroupDMInviteRequest {
  /**
   * @minimum 1
   * @maximum 604800
   */
  max_age?: CreateGroupDMInviteRequestMaxAge;
}

/**
 * @minimum 0
 * @maximum 21600
 */
export type CreateForumThreadRequestRateLimitPerUser = number | null;

export type CreateForumThreadRequestAutoArchiveDuration = null | ThreadAutoArchiveDuration;

/**
 * @maxItems 5
 */
export type CreateForumThreadRequestAppliedTags = SnowflakeType[] | null;

export interface CreateForumThreadRequest {
  /** @maxItems 5 */
  applied_tags?: CreateForumThreadRequestAppliedTags;
  auto_archive_duration?: CreateForumThreadRequestAutoArchiveDuration;
  message: BaseCreateMessageCreateRequest;
  /**
   * @minLength 1
   * @maxLength 100
   */
  name: string;
  /**
   * @minimum 0
   * @maximum 21600
   */
  rate_limit_per_user?: CreateForumThreadRequestRateLimitPerUser;
}

export interface CreateEntitlementRequestData {
  owner_id: SnowflakeType;
  owner_type: EntitlementOwnerTypes;
  sku_id: SnowflakeType;
}

export type ConnectedAccountVisibility = number;

export type ConnectedAccountResponseRevoked = boolean | null;

export type ConnectedAccountResponseName = string | null;

export type ConnectedAccountResponseIntegrations = ConnectedAccountIntegrationResponse[] | null;

export type ConnectedAccountProviders = string;

export interface ConnectedAccountResponse {
  friend_sync: boolean;
  id: string;
  integrations?: ConnectedAccountResponseIntegrations;
  name?: ConnectedAccountResponseName;
  revoked?: ConnectedAccountResponseRevoked;
  show_activity: boolean;
  two_way_link: boolean;
  type: ConnectedAccountProviders;
  verified: boolean;
  visibility: ConnectedAccountVisibility;
}

export type ConnectedAccountGuildResponseIcon = string | null;

export interface ConnectedAccountGuildResponse {
  icon?: ConnectedAccountGuildResponseIcon;
  id: SnowflakeType;
  name: string;
}

export interface ConnectedAccountIntegrationResponse {
  account: AccountResponse;
  guild: ConnectedAccountGuildResponse;
  id: string;
  type: IntegrationTypes;
}

export interface CommandPermissionResponse {
  id: SnowflakeType;
  permission: boolean;
  type: ApplicationCommandPermissionType;
}

export interface CommandPermissionsResponse {
  application_id: SnowflakeType;
  guild_id: SnowflakeType;
  id: SnowflakeType;
  permissions: CommandPermissionResponse[];
}

export type ChannelTypes = number;

export type ChannelSelectDefaultValueResponseType = typeof ChannelSelectDefaultValueResponseType[keyof typeof ChannelSelectDefaultValueResponseType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ChannelSelectDefaultValueResponseType = {
  channel: 'channel',
} as const;

export interface ChannelSelectDefaultValueResponse {
  id: SnowflakeType;
  type: ChannelSelectDefaultValueResponseType;
}

export type ChannelSelectDefaultValueType = typeof ChannelSelectDefaultValueType[keyof typeof ChannelSelectDefaultValueType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ChannelSelectDefaultValueType = {
  channel: 'channel',
} as const;

export interface ChannelSelectDefaultValue {
  id: SnowflakeType;
  type: ChannelSelectDefaultValueType;
}

export type ChannelSelectType = typeof ChannelSelectType[keyof typeof ChannelSelectType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ChannelSelectType = {
  NUMBER_8: 8,
} as const;

/**
 * @maxLength 150
 */
export type ChannelSelectPlaceholder = string | null;

/**
 * @minimum 0
 * @maximum 25
 */
export type ChannelSelectMinValues = number | null;

/**
 * @minimum 1
 * @maximum 25
 */
export type ChannelSelectMaxValues = number | null;

export type ChannelSelectDisabled = boolean | null;

/**
 * @maxItems 25
 */
export type ChannelSelectDefaultValues = ChannelSelectDefaultValue[] | null;

export type ChannelSelectChannelTypes = ChannelTypes[] | null;

export interface ChannelSelect {
  channel_types?: ChannelSelectChannelTypes;
  /** @maxLength 100 */
  custom_id: string;
  /** @maxItems 25 */
  default_values?: ChannelSelectDefaultValues;
  disabled?: ChannelSelectDisabled;
  /**
   * @minimum 1
   * @maximum 25
   */
  max_values?: ChannelSelectMaxValues;
  /**
   * @minimum 0
   * @maximum 25
   */
  min_values?: ChannelSelectMinValues;
  /** @maxLength 150 */
  placeholder?: ChannelSelectPlaceholder;
  type: ChannelSelectType;
}

export type ChannelPermissionOverwrites = number;

export interface ChannelPermissionOverwriteResponse {
  allow: string;
  deny: string;
  id: SnowflakeType;
  type: ChannelPermissionOverwrites;
}

export type ChannelPermissionOverwriteRequestType = null | ChannelPermissionOverwrites;

export type ChannelPermissionOverwriteRequestDeny = number | null;

export type ChannelPermissionOverwriteRequestAllow = number | null;

export interface ChannelPermissionOverwriteRequest {
  allow?: ChannelPermissionOverwriteRequestAllow;
  deny?: ChannelPermissionOverwriteRequestDeny;
  id: SnowflakeType;
  type?: ChannelPermissionOverwriteRequestType;
}

export type ChannelFollowerWebhookResponseUser = null | UserResponse;

export type ChannelFollowerWebhookResponseType = typeof ChannelFollowerWebhookResponseType[keyof typeof ChannelFollowerWebhookResponseType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ChannelFollowerWebhookResponseType = {
  NUMBER_2: 2,
} as const;

export type ChannelFollowerWebhookResponseSourceGuild = null | WebhookSourceGuildResponse;

export type ChannelFollowerWebhookResponseSourceChannel = null | WebhookSourceChannelResponse;

export type ChannelFollowerWebhookResponseGuildId = null | SnowflakeType;

export type ChannelFollowerWebhookResponseChannelId = null | SnowflakeType;

export type ChannelFollowerWebhookResponseAvatar = string | null;

export type ChannelFollowerWebhookResponseApplicationId = null | SnowflakeType;

export interface ChannelFollowerWebhookResponse {
  application_id?: ChannelFollowerWebhookResponseApplicationId;
  avatar?: ChannelFollowerWebhookResponseAvatar;
  channel_id?: ChannelFollowerWebhookResponseChannelId;
  guild_id?: ChannelFollowerWebhookResponseGuildId;
  id: SnowflakeType;
  name: string;
  source_channel?: ChannelFollowerWebhookResponseSourceChannel;
  source_guild?: ChannelFollowerWebhookResponseSourceGuild;
  type: ChannelFollowerWebhookResponseType;
  user?: ChannelFollowerWebhookResponseUser;
}

export interface ChannelFollowerResponse {
  channel_id: SnowflakeType;
  webhook_id: SnowflakeType;
}

export type ButtonStyleTypes = number;

/**
 * @maxLength 512
 */
export type ButtonUrl = string | null;

export type ButtonType = typeof ButtonType[keyof typeof ButtonType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ButtonType = {
  NUMBER_2: 2,
} as const;

export type ButtonSkuId = null | SnowflakeType;

/**
 * @maxLength 80
 */
export type ButtonLabel = string | null;

export type ButtonEmoji = null | Emoji;

export type ButtonDisabled = boolean | null;

/**
 * @maxLength 100
 */
export type ButtonCustomId = string | null;

export interface Button {
  /** @maxLength 100 */
  custom_id?: ButtonCustomId;
  disabled?: ButtonDisabled;
  emoji?: ButtonEmoji;
  /** @maxLength 80 */
  label?: ButtonLabel;
  sku_id?: ButtonSkuId;
  style: ButtonStyleTypes;
  type: ButtonType;
  /** @maxLength 512 */
  url?: ButtonUrl;
}

export interface BulkBanUsersResponse {
  banned_users: SnowflakeType[];
  failed_users: SnowflakeType[];
}

export type BotAccountPatchRequestBanner = string | null;

export type BotAccountPatchRequestAvatar = string | null;

export interface BotAccountPatchRequest {
  avatar?: BotAccountPatchRequestAvatar;
  banner?: BotAccountPatchRequestBanner;
  /**
   * @minLength 2
   * @maxLength 32
   */
  username: string;
}

export type BlockMessageActionResponseType = typeof BlockMessageActionResponseType[keyof typeof BlockMessageActionResponseType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const BlockMessageActionResponseType = {
  NUMBER_1: 1,
} as const;

export interface BlockMessageActionResponse {
  metadata: BlockMessageActionMetadataResponse;
  type: BlockMessageActionResponseType;
}

export type BlockMessageActionMetadataResponseCustomMessage = string | null;

export interface BlockMessageActionMetadataResponse {
  custom_message?: BlockMessageActionMetadataResponseCustomMessage;
}

/**
 * @maxLength 150
 */
export type BlockMessageActionMetadataCustomMessage = string | null;

export interface BlockMessageActionMetadata {
  /** @maxLength 150 */
  custom_message?: BlockMessageActionMetadataCustomMessage;
}

export type BlockMessageActionType = typeof BlockMessageActionType[keyof typeof BlockMessageActionType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const BlockMessageActionType = {
  NUMBER_1: 1,
} as const;

export type BlockMessageActionMetadataProperty = null | BlockMessageActionMetadata;

export interface BlockMessageAction {
  metadata?: BlockMessageActionMetadataProperty;
  type: BlockMessageActionType;
}

export type BasicMessageResponseWebhookId = null | SnowflakeType;

export type BasicMessageResponseThread = null | ThreadResponse;

export type BasicMessageResponseStickersAnyOfItem = GuildStickerResponse | StandardStickerResponse;

export type BasicMessageResponseStickers = BasicMessageResponseStickersAnyOfItem[] | null;

export type BasicMessageResponseStickerItems = MessageStickerItemResponse[] | null;

export type BasicMessageResponseRoleSubscriptionData = null | MessageRoleSubscriptionDataResponse;

export type BasicMessageResponseResolved = null | ResolvedObjectsResponse;

export type BasicMessageResponsePurchaseNotification = null | PurchaseNotificationResponse;

export type BasicMessageResponsePosition = number | null;

export type BasicMessageResponsePoll = null | PollResponse;

export type BasicMessageResponseNonce = number | string | null;

export type BasicMessageResponseMessageSnapshots = MessageSnapshotResponse[] | null;

export type BasicMessageResponseMessageReference = null | MessageReferenceResponse;

export type BasicMessageResponseMentionChannelsAnyOfItem = null | MessageMentionChannelResponse;

export type BasicMessageResponseMentionChannels = BasicMessageResponseMentionChannelsAnyOfItem[] | null;

export type BasicMessageResponseInteractionMetadata = ApplicationCommandInteractionMetadataResponse | MessageComponentInteractionMetadataResponse | ModalSubmitInteractionMetadataResponse | null;

export type BasicMessageResponseInteraction = null | MessageInteractionResponse;

export type BasicMessageResponseEditedTimestamp = string | null;

export type BasicMessageResponseComponentsItem = MessageComponentActionRowResponse | MessageComponentButtonResponse | MessageComponentChannelSelectResponse | MessageComponentInputTextResponse | MessageComponentMentionableSelectResponse | MessageComponentRoleSelectResponse | MessageComponentStringSelectResponse | MessageComponentUserSelectResponse;

export type BasicMessageResponseCall = null | MessageCallResponse;

export type BasicMessageResponseApplicationId = null | SnowflakeType;

export type BasicMessageResponseApplication = null | BasicApplicationResponse;

export type BasicMessageResponseActivity = null | MessageActivityResponse;

export interface BasicMessageResponse {
  activity?: BasicMessageResponseActivity;
  application?: BasicMessageResponseApplication;
  application_id?: BasicMessageResponseApplicationId;
  attachments: MessageAttachmentResponse[];
  author: UserResponse;
  call?: BasicMessageResponseCall;
  channel_id: SnowflakeType;
  components: BasicMessageResponseComponentsItem[];
  content: string;
  edited_timestamp?: BasicMessageResponseEditedTimestamp;
  embeds: MessageEmbedResponse[];
  flags: number;
  id: SnowflakeType;
  interaction?: BasicMessageResponseInteraction;
  interaction_metadata?: BasicMessageResponseInteractionMetadata;
  mention_channels?: BasicMessageResponseMentionChannels;
  mention_everyone: boolean;
  mention_roles: SnowflakeType[];
  mentions: UserResponse[];
  message_reference?: BasicMessageResponseMessageReference;
  message_snapshots?: BasicMessageResponseMessageSnapshots;
  nonce?: BasicMessageResponseNonce;
  pinned: boolean;
  poll?: BasicMessageResponsePoll;
  position?: BasicMessageResponsePosition;
  purchase_notification?: BasicMessageResponsePurchaseNotification;
  resolved?: BasicMessageResponseResolved;
  role_subscription_data?: BasicMessageResponseRoleSubscriptionData;
  sticker_items?: BasicMessageResponseStickerItems;
  stickers?: BasicMessageResponseStickers;
  thread?: BasicMessageResponseThread;
  timestamp: string;
  tts: boolean;
  type: MessageType;
  webhook_id?: BasicMessageResponseWebhookId;
}

export type BasicApplicationResponseType = null | ApplicationTypes;

export type BasicApplicationResponsePrimarySkuId = null | SnowflakeType;

export type BasicApplicationResponseIcon = string | null;

export type BasicApplicationResponseCoverImage = string | null;

export type BasicApplicationResponseBot = null | UserResponse;

export interface BasicApplicationResponse {
  bot?: BasicApplicationResponseBot;
  cover_image?: BasicApplicationResponseCoverImage;
  description: string;
  icon?: BasicApplicationResponseIcon;
  id: SnowflakeType;
  name: string;
  primary_sku_id?: BasicApplicationResponsePrimarySkuId;
  type?: BasicApplicationResponseType;
}

/**
 * @maxItems 3
 */
export type BaseCreateMessageCreateRequestStickerIds = SnowflakeType[] | null;

export type BaseCreateMessageCreateRequestPoll = null | PollCreateRequest;

export type BaseCreateMessageCreateRequestFlags = number | null;

/**
 * @maxItems 10
 */
export type BaseCreateMessageCreateRequestEmbeds = RichEmbed[] | null;

/**
 * @maxLength 4000
 */
export type BaseCreateMessageCreateRequestContent = string | null;

/**
 * @maxItems 5
 */
export type BaseCreateMessageCreateRequestComponents = ActionRow[] | null;

/**
 * @maxItems 10
 */
export type BaseCreateMessageCreateRequestAttachments = MessageAttachmentRequest[] | null;

export type BaseCreateMessageCreateRequestAllowedMentions = null | MessageAllowedMentionsRequest;

export interface BaseCreateMessageCreateRequest {
  allowed_mentions?: BaseCreateMessageCreateRequestAllowedMentions;
  /** @maxItems 10 */
  attachments?: BaseCreateMessageCreateRequestAttachments;
  /** @maxItems 5 */
  components?: BaseCreateMessageCreateRequestComponents;
  /** @maxLength 4000 */
  content?: BaseCreateMessageCreateRequestContent;
  /** @maxItems 10 */
  embeds?: BaseCreateMessageCreateRequestEmbeds;
  flags?: BaseCreateMessageCreateRequestFlags;
  poll?: BaseCreateMessageCreateRequestPoll;
  /** @maxItems 3 */
  sticker_ids?: BaseCreateMessageCreateRequestStickerIds;
}

export type AvailableLocalesEnum = string;

export type AutomodTriggerType = number;

export type AutomodKeywordPresetType = number;

export type AutomodEventType = number;

export type AutomodActionType = number;

export type AuditLogObjectChangeResponseKey = string | null;

export interface AuditLogObjectChangeResponse {
  key?: AuditLogObjectChangeResponseKey;
  new_value?: unknown;
  old_value?: unknown;
}

export type AuditLogEntryResponseUserId = null | SnowflakeType;

export type AuditLogEntryResponseTargetId = null | SnowflakeType;

export type AuditLogEntryResponseReason = string | null;

export type AuditLogEntryResponseOptionsAnyOf = {[key: string]: string};

export type AuditLogEntryResponseOptions = AuditLogEntryResponseOptionsAnyOf | null;

export type AuditLogEntryResponseChanges = AuditLogObjectChangeResponse[] | null;

export type AuditLogActionTypes = number;

export interface AuditLogEntryResponse {
  action_type: AuditLogActionTypes;
  changes?: AuditLogEntryResponseChanges;
  id: SnowflakeType;
  options?: AuditLogEntryResponseOptions;
  reason?: AuditLogEntryResponseReason;
  target_id?: AuditLogEntryResponseTargetId;
  user_id?: AuditLogEntryResponseUserId;
}

export type AttachmentResponseWidth = number | null;

export type AttachmentResponseWaveform = string | null;

export type AttachmentResponseTitle = string | null;

export type AttachmentResponseHeight = number | null;

export type AttachmentResponseEphemeral = boolean | null;

export type AttachmentResponseDurationSecs = number | null;

export type AttachmentResponseDescription = string | null;

export type AttachmentResponseContentType = string | null;

export type AttachmentResponseClipParticipants = UserResponse[] | null;

export type AttachmentResponseClipCreatedAt = string | null;

export type AttachmentResponseApplication = null | ApplicationResponse;

export interface AttachmentResponse {
  application?: AttachmentResponseApplication;
  clip_created_at?: AttachmentResponseClipCreatedAt;
  clip_participants?: AttachmentResponseClipParticipants;
  content_type?: AttachmentResponseContentType;
  description?: AttachmentResponseDescription;
  duration_secs?: AttachmentResponseDurationSecs;
  ephemeral?: AttachmentResponseEphemeral;
  filename: string;
  height?: AttachmentResponseHeight;
  id: SnowflakeType;
  proxy_url: string;
  size: number;
  title?: AttachmentResponseTitle;
  url: string;
  waveform?: AttachmentResponseWaveform;
  width?: AttachmentResponseWidth;
}

export type ApplicationUserRoleConnectionResponsePlatformUsername = string | null;

export type ApplicationUserRoleConnectionResponsePlatformName = string | null;

export interface ApplicationUserRoleConnectionResponse {
  metadata?: ApplicationUserRoleConnectionResponseMetadata;
  platform_name?: ApplicationUserRoleConnectionResponsePlatformName;
  platform_username?: ApplicationUserRoleConnectionResponsePlatformUsername;
}

export type ApplicationUserRoleConnectionResponseMetadataAnyOf = {[key: string]: string};

export type ApplicationUserRoleConnectionResponseMetadata = ApplicationUserRoleConnectionResponseMetadataAnyOf | null;

export type ApplicationTypes = number;

export type ApplicationRoleConnectionsMetadataItemResponseNameLocalizationsAnyOf = {[key: string]: string};

export type ApplicationRoleConnectionsMetadataItemResponseNameLocalizations = ApplicationRoleConnectionsMetadataItemResponseNameLocalizationsAnyOf | null;

export type ApplicationRoleConnectionsMetadataItemResponseDescriptionLocalizationsAnyOf = {[key: string]: string};

export type ApplicationRoleConnectionsMetadataItemResponseDescriptionLocalizations = ApplicationRoleConnectionsMetadataItemResponseDescriptionLocalizationsAnyOf | null;

export interface ApplicationRoleConnectionsMetadataItemResponse {
  description: string;
  description_localizations?: ApplicationRoleConnectionsMetadataItemResponseDescriptionLocalizations;
  key: string;
  name: string;
  name_localizations?: ApplicationRoleConnectionsMetadataItemResponseNameLocalizations;
  type: MetadataItemTypes;
}

export type ApplicationRoleConnectionsMetadataItemRequestNameLocalizationsAnyOf = {[key: string]: string | null};

export type ApplicationRoleConnectionsMetadataItemRequestNameLocalizations = ApplicationRoleConnectionsMetadataItemRequestNameLocalizationsAnyOf | null;

export interface ApplicationRoleConnectionsMetadataItemRequest {
  /**
   * @minLength 1
   * @maxLength 200
   */
  description: string;
  description_localizations?: ApplicationRoleConnectionsMetadataItemRequestDescriptionLocalizations;
  /**
   * @minLength 1
   * @maxLength 50
   */
  key: string;
  /**
   * @minLength 1
   * @maxLength 100
   */
  name: string;
  name_localizations?: ApplicationRoleConnectionsMetadataItemRequestNameLocalizations;
  type: MetadataItemTypes;
}

export type ApplicationRoleConnectionsMetadataItemRequestDescriptionLocalizationsAnyOf = {[key: string]: string | null};

export type ApplicationRoleConnectionsMetadataItemRequestDescriptionLocalizations = ApplicationRoleConnectionsMetadataItemRequestDescriptionLocalizationsAnyOf | null;

export type ApplicationResponseType = null | ApplicationTypes;

export type ApplicationResponseTermsOfServiceUrl = string | null;

export type ApplicationResponseTags = string[] | null;

export type ApplicationResponseSlug = string | null;

export type ApplicationResponseRpcOriginsAnyOfItem = string | null;

export type ApplicationResponseRpcOrigins = ApplicationResponseRpcOriginsAnyOfItem[] | null;

export type ApplicationResponsePrivacyPolicyUrl = string | null;

export type ApplicationResponsePrimarySkuId = null | SnowflakeType;

export type ApplicationResponseMaxParticipants = number | null;

export type ApplicationResponseIntegrationTypesConfigAnyOf = {[key: string]: ApplicationIntegrationTypeConfigurationResponse};

export type ApplicationResponseIntegrationTypesConfig = ApplicationResponseIntegrationTypesConfigAnyOf | null;

export type ApplicationResponseInstallParams = null | ApplicationOAuth2InstallParamsResponse;

export type ApplicationResponseIcon = string | null;

export type ApplicationResponseGuildId = null | SnowflakeType;

export type ApplicationResponseCustomInstallUrl = string | null;

export type ApplicationResponseCoverImage = string | null;

export type ApplicationResponseBotRequireCodeGrant = boolean | null;

export type ApplicationResponseBotPublic = boolean | null;

export type ApplicationResponseBot = null | UserResponse;

export interface ApplicationResponse {
  bot?: ApplicationResponseBot;
  bot_public?: ApplicationResponseBotPublic;
  bot_require_code_grant?: ApplicationResponseBotRequireCodeGrant;
  cover_image?: ApplicationResponseCoverImage;
  custom_install_url?: ApplicationResponseCustomInstallUrl;
  description: string;
  flags: number;
  guild_id?: ApplicationResponseGuildId;
  icon?: ApplicationResponseIcon;
  id: SnowflakeType;
  install_params?: ApplicationResponseInstallParams;
  integration_types_config?: ApplicationResponseIntegrationTypesConfig;
  max_participants?: ApplicationResponseMaxParticipants;
  name: string;
  primary_sku_id?: ApplicationResponsePrimarySkuId;
  privacy_policy_url?: ApplicationResponsePrivacyPolicyUrl;
  rpc_origins?: ApplicationResponseRpcOrigins;
  slug?: ApplicationResponseSlug;
  tags?: ApplicationResponseTags;
  terms_of_service_url?: ApplicationResponseTermsOfServiceUrl;
  type?: ApplicationResponseType;
  verify_key: string;
}

export type ApplicationOAuth2InstallParamsResponseScopesItem = typeof ApplicationOAuth2InstallParamsResponseScopesItem[keyof typeof ApplicationOAuth2InstallParamsResponseScopesItem];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ApplicationOAuth2InstallParamsResponseScopesItem = {
  applicationscommands: 'applications.commands',
  bot: 'bot',
} as const;

export interface ApplicationOAuth2InstallParamsResponse {
  permissions: string;
  scopes: ApplicationOAuth2InstallParamsResponseScopesItem[];
}

export type ApplicationOAuth2InstallParamsScopesAnyOfItem = typeof ApplicationOAuth2InstallParamsScopesAnyOfItem[keyof typeof ApplicationOAuth2InstallParamsScopesAnyOfItem];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ApplicationOAuth2InstallParamsScopesAnyOfItem = {
  applicationscommands: 'applications.commands',
  bot: 'bot',
} as const;

/**
 * @minItems 1
 */
export type ApplicationOAuth2InstallParamsScopes = ApplicationOAuth2InstallParamsScopesAnyOfItem[] | null;

/**
 * @minimum 0
 * @maximum 2251799813685247
 */
export type ApplicationOAuth2InstallParamsPermissions = number | null;

export interface ApplicationOAuth2InstallParams {
  /**
   * @minimum 0
   * @maximum 2251799813685247
   */
  permissions?: ApplicationOAuth2InstallParamsPermissions;
  /** @minItems 1 */
  scopes?: ApplicationOAuth2InstallParamsScopes;
}

export type ApplicationIntegrationTypeConfigurationResponseOauth2InstallParams = null | ApplicationOAuth2InstallParamsResponse;

export interface ApplicationIntegrationTypeConfigurationResponse {
  oauth2_install_params?: ApplicationIntegrationTypeConfigurationResponseOauth2InstallParams;
}

export type ApplicationIntegrationTypeConfigurationOauth2InstallParams = null | ApplicationOAuth2InstallParams;

export interface ApplicationIntegrationTypeConfiguration {
  oauth2_install_params?: ApplicationIntegrationTypeConfigurationOauth2InstallParams;
}

export type ApplicationIntegrationType = number;

export type ApplicationIncomingWebhookResponseUser = null | UserResponse;

export type ApplicationIncomingWebhookResponseType = typeof ApplicationIncomingWebhookResponseType[keyof typeof ApplicationIncomingWebhookResponseType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ApplicationIncomingWebhookResponseType = {
  NUMBER_3: 3,
} as const;

export type ApplicationIncomingWebhookResponseGuildId = null | SnowflakeType;

export type ApplicationIncomingWebhookResponseChannelId = null | SnowflakeType;

export type ApplicationIncomingWebhookResponseAvatar = string | null;

export type ApplicationIncomingWebhookResponseApplicationId = null | SnowflakeType;

export interface ApplicationIncomingWebhookResponse {
  application_id?: ApplicationIncomingWebhookResponseApplicationId;
  avatar?: ApplicationIncomingWebhookResponseAvatar;
  channel_id?: ApplicationIncomingWebhookResponseChannelId;
  guild_id?: ApplicationIncomingWebhookResponseGuildId;
  id: SnowflakeType;
  name: string;
  type: ApplicationIncomingWebhookResponseType;
  user?: ApplicationIncomingWebhookResponseUser;
}

export type ApplicationFormPartialType = null | ApplicationTypes;

export type ApplicationFormPartialTeamId = null | SnowflakeType;

/**
 * @maxItems 5
 */
export type ApplicationFormPartialTags = string[] | null;

/**
 * @maxLength 2048
 */
export type ApplicationFormPartialRoleConnectionsVerificationUrl = string | null;

/**
 * @minimum -1
 */
export type ApplicationFormPartialMaxParticipants = number | null;

/**
 * @maxLength 2048
 */
export type ApplicationFormPartialInteractionsEndpointUrl = string | null;

export type ApplicationFormPartialIntegrationTypesConfigAnyOf = {[key: string]: null | ApplicationIntegrationTypeConfiguration};

export type ApplicationFormPartialIntegrationTypesConfig = ApplicationFormPartialIntegrationTypesConfigAnyOf | null;

export type ApplicationFormPartialInstallParams = null | ApplicationOAuth2InstallParams;

export type ApplicationFormPartialIcon = string | null;

export type ApplicationFormPartialFlags = number | null;

export type ApplicationFormPartialExplicitContentFilter = null | ApplicationExplicitContentFilterTypes;

export type ApplicationFormPartialDescriptionAnyOf = {
  /** @maxLength 400 */
  default: string;
  localizations?: ApplicationFormPartialDescriptionAnyOfLocalizations;
};

export type ApplicationFormPartialDescription = ApplicationFormPartialDescriptionAnyOf | null;

export interface ApplicationFormPartial {
  cover_image?: ApplicationFormPartialCoverImage;
  /** @maxLength 2048 */
  custom_install_url?: ApplicationFormPartialCustomInstallUrl;
  description?: ApplicationFormPartialDescription;
  explicit_content_filter?: ApplicationFormPartialExplicitContentFilter;
  flags?: ApplicationFormPartialFlags;
  icon?: ApplicationFormPartialIcon;
  install_params?: ApplicationFormPartialInstallParams;
  integration_types_config?: ApplicationFormPartialIntegrationTypesConfig;
  /** @maxLength 2048 */
  interactions_endpoint_url?: ApplicationFormPartialInteractionsEndpointUrl;
  /** @minimum -1 */
  max_participants?: ApplicationFormPartialMaxParticipants;
  /** @maxLength 2048 */
  role_connections_verification_url?: ApplicationFormPartialRoleConnectionsVerificationUrl;
  /** @maxItems 5 */
  tags?: ApplicationFormPartialTags;
  team_id?: ApplicationFormPartialTeamId;
  type?: ApplicationFormPartialType;
}

export type ApplicationFormPartialDescriptionAnyOfLocalizationsAnyOf = {[key: string]: string};

export type ApplicationFormPartialDescriptionAnyOfLocalizations = ApplicationFormPartialDescriptionAnyOfLocalizationsAnyOf | null;

/**
 * @maxLength 2048
 */
export type ApplicationFormPartialCustomInstallUrl = string | null;

export type ApplicationFormPartialCoverImage = string | null;

export type ApplicationExplicitContentFilterTypes = number;

export type ApplicationCommandUserOptionResponseType = typeof ApplicationCommandUserOptionResponseType[keyof typeof ApplicationCommandUserOptionResponseType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ApplicationCommandUserOptionResponseType = {
  NUMBER_6: 6,
} as const;

export type ApplicationCommandUserOptionResponseRequired = boolean | null;

export type ApplicationCommandUserOptionResponseNameLocalized = string | null;

export type ApplicationCommandUserOptionResponseNameLocalizationsAnyOf = {[key: string]: string};

export type ApplicationCommandUserOptionResponseNameLocalizations = ApplicationCommandUserOptionResponseNameLocalizationsAnyOf | null;

export type ApplicationCommandUserOptionResponseDescriptionLocalized = string | null;

export type ApplicationCommandUserOptionResponseDescriptionLocalizationsAnyOf = {[key: string]: string};

export type ApplicationCommandUserOptionResponseDescriptionLocalizations = ApplicationCommandUserOptionResponseDescriptionLocalizationsAnyOf | null;

export interface ApplicationCommandUserOptionResponse {
  description: string;
  description_localizations?: ApplicationCommandUserOptionResponseDescriptionLocalizations;
  description_localized?: ApplicationCommandUserOptionResponseDescriptionLocalized;
  name: string;
  name_localizations?: ApplicationCommandUserOptionResponseNameLocalizations;
  name_localized?: ApplicationCommandUserOptionResponseNameLocalized;
  required?: ApplicationCommandUserOptionResponseRequired;
  type: ApplicationCommandUserOptionResponseType;
}

export type ApplicationCommandUserOptionType = typeof ApplicationCommandUserOptionType[keyof typeof ApplicationCommandUserOptionType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ApplicationCommandUserOptionType = {
  NUMBER_6: 6,
} as const;

export type ApplicationCommandUserOptionRequired = boolean | null;

export type ApplicationCommandUserOptionNameLocalizationsAnyOf = {[key: string]: string};

export type ApplicationCommandUserOptionNameLocalizations = ApplicationCommandUserOptionNameLocalizationsAnyOf | null;

export type ApplicationCommandUserOptionDescriptionLocalizationsAnyOf = {[key: string]: string};

export type ApplicationCommandUserOptionDescriptionLocalizations = ApplicationCommandUserOptionDescriptionLocalizationsAnyOf | null;

export interface ApplicationCommandUserOption {
  /**
   * @minLength 1
   * @maxLength 100
   */
  description: string;
  description_localizations?: ApplicationCommandUserOptionDescriptionLocalizations;
  /**
   * @minLength 1
   * @maxLength 32
   */
  name: string;
  name_localizations?: ApplicationCommandUserOptionNameLocalizations;
  required?: ApplicationCommandUserOptionRequired;
  type: ApplicationCommandUserOptionType;
}

export type ApplicationCommandUpdateRequestType = null | ApplicationCommandType;

export type ApplicationCommandUpdateRequestOptionsAnyOfItem = ApplicationCommandAttachmentOption | ApplicationCommandBooleanOption | ApplicationCommandChannelOption | ApplicationCommandIntegerOption | ApplicationCommandMentionableOption | ApplicationCommandNumberOption | ApplicationCommandRoleOption | ApplicationCommandStringOption | ApplicationCommandSubcommandGroupOption | ApplicationCommandSubcommandOption | ApplicationCommandUserOption;

/**
 * @maxItems 25
 */
export type ApplicationCommandUpdateRequestOptions = ApplicationCommandUpdateRequestOptionsAnyOfItem[] | null;

export type ApplicationCommandUpdateRequestNameLocalizationsAnyOf = {[key: string]: string};

export type ApplicationCommandUpdateRequestNameLocalizations = ApplicationCommandUpdateRequestNameLocalizationsAnyOf | null;

/**
 * @minItems 1
 */
export type ApplicationCommandUpdateRequestIntegrationTypes = ApplicationIntegrationType[] | null;

export type ApplicationCommandUpdateRequestId = null | SnowflakeType;

export type ApplicationCommandUpdateRequestHandler = null | ApplicationCommandHandler;

export type ApplicationCommandUpdateRequestDmPermission = boolean | null;

export type ApplicationCommandUpdateRequestDescriptionLocalizationsAnyOf = {[key: string]: string};

export type ApplicationCommandUpdateRequestDescriptionLocalizations = ApplicationCommandUpdateRequestDescriptionLocalizationsAnyOf | null;

/**
 * @maxLength 100
 */
export type ApplicationCommandUpdateRequestDescription = string | null;

/**
 * @minimum 0
 * @maximum 2251799813685247
 */
export type ApplicationCommandUpdateRequestDefaultMemberPermissions = number | null;

/**
 * @minItems 1
 */
export type ApplicationCommandUpdateRequestContexts = InteractionContextType[] | null;

export interface ApplicationCommandUpdateRequest {
  /** @minItems 1 */
  contexts?: ApplicationCommandUpdateRequestContexts;
  /**
   * @minimum 0
   * @maximum 2251799813685247
   */
  default_member_permissions?: ApplicationCommandUpdateRequestDefaultMemberPermissions;
  /** @maxLength 100 */
  description?: ApplicationCommandUpdateRequestDescription;
  description_localizations?: ApplicationCommandUpdateRequestDescriptionLocalizations;
  dm_permission?: ApplicationCommandUpdateRequestDmPermission;
  handler?: ApplicationCommandUpdateRequestHandler;
  id?: ApplicationCommandUpdateRequestId;
  /** @minItems 1 */
  integration_types?: ApplicationCommandUpdateRequestIntegrationTypes;
  /**
   * @minLength 1
   * @maxLength 32
   */
  name: string;
  name_localizations?: ApplicationCommandUpdateRequestNameLocalizations;
  /** @maxItems 25 */
  options?: ApplicationCommandUpdateRequestOptions;
  type?: ApplicationCommandUpdateRequestType;
}

export type ApplicationCommandType = number;

export type ApplicationCommandSubcommandOptionResponseType = typeof ApplicationCommandSubcommandOptionResponseType[keyof typeof ApplicationCommandSubcommandOptionResponseType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ApplicationCommandSubcommandOptionResponseType = {
  NUMBER_1: 1,
} as const;

export type ApplicationCommandSubcommandOptionResponseRequired = boolean | null;

export type ApplicationCommandSubcommandOptionResponseOptionsAnyOfItem = ApplicationCommandAttachmentOptionResponse | ApplicationCommandBooleanOptionResponse | ApplicationCommandChannelOptionResponse | ApplicationCommandIntegerOptionResponse | ApplicationCommandMentionableOptionResponse | ApplicationCommandNumberOptionResponse | ApplicationCommandRoleOptionResponse | ApplicationCommandStringOptionResponse | ApplicationCommandUserOptionResponse;

export type ApplicationCommandSubcommandOptionResponseOptions = ApplicationCommandSubcommandOptionResponseOptionsAnyOfItem[] | null;

export type ApplicationCommandSubcommandOptionResponseNameLocalized = string | null;

export type ApplicationCommandSubcommandOptionResponseNameLocalizationsAnyOf = {[key: string]: string};

export type ApplicationCommandSubcommandOptionResponseNameLocalizations = ApplicationCommandSubcommandOptionResponseNameLocalizationsAnyOf | null;

export type ApplicationCommandSubcommandOptionResponseDescriptionLocalized = string | null;

export interface ApplicationCommandSubcommandOptionResponse {
  description: string;
  description_localizations?: ApplicationCommandSubcommandOptionResponseDescriptionLocalizations;
  description_localized?: ApplicationCommandSubcommandOptionResponseDescriptionLocalized;
  name: string;
  name_localizations?: ApplicationCommandSubcommandOptionResponseNameLocalizations;
  name_localized?: ApplicationCommandSubcommandOptionResponseNameLocalized;
  options?: ApplicationCommandSubcommandOptionResponseOptions;
  required?: ApplicationCommandSubcommandOptionResponseRequired;
  type: ApplicationCommandSubcommandOptionResponseType;
}

export type ApplicationCommandSubcommandOptionResponseDescriptionLocalizationsAnyOf = {[key: string]: string};

export type ApplicationCommandSubcommandOptionResponseDescriptionLocalizations = ApplicationCommandSubcommandOptionResponseDescriptionLocalizationsAnyOf | null;

export type ApplicationCommandSubcommandOptionType = typeof ApplicationCommandSubcommandOptionType[keyof typeof ApplicationCommandSubcommandOptionType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ApplicationCommandSubcommandOptionType = {
  NUMBER_1: 1,
} as const;

export type ApplicationCommandSubcommandOptionRequired = boolean | null;

export type ApplicationCommandSubcommandOptionOptionsAnyOfItem = ApplicationCommandAttachmentOption | ApplicationCommandBooleanOption | ApplicationCommandChannelOption | ApplicationCommandIntegerOption | ApplicationCommandMentionableOption | ApplicationCommandNumberOption | ApplicationCommandRoleOption | ApplicationCommandStringOption | ApplicationCommandUserOption;

/**
 * @maxItems 25
 */
export type ApplicationCommandSubcommandOptionOptions = ApplicationCommandSubcommandOptionOptionsAnyOfItem[] | null;

export type ApplicationCommandSubcommandOptionNameLocalizationsAnyOf = {[key: string]: string};

export type ApplicationCommandSubcommandOptionNameLocalizations = ApplicationCommandSubcommandOptionNameLocalizationsAnyOf | null;

export type ApplicationCommandSubcommandOptionDescriptionLocalizationsAnyOf = {[key: string]: string};

export type ApplicationCommandSubcommandOptionDescriptionLocalizations = ApplicationCommandSubcommandOptionDescriptionLocalizationsAnyOf | null;

export interface ApplicationCommandSubcommandOption {
  /**
   * @minLength 1
   * @maxLength 100
   */
  description: string;
  description_localizations?: ApplicationCommandSubcommandOptionDescriptionLocalizations;
  /**
   * @minLength 1
   * @maxLength 32
   */
  name: string;
  name_localizations?: ApplicationCommandSubcommandOptionNameLocalizations;
  /** @maxItems 25 */
  options?: ApplicationCommandSubcommandOptionOptions;
  required?: ApplicationCommandSubcommandOptionRequired;
  type: ApplicationCommandSubcommandOptionType;
}

export type ApplicationCommandSubcommandGroupOptionResponseType = typeof ApplicationCommandSubcommandGroupOptionResponseType[keyof typeof ApplicationCommandSubcommandGroupOptionResponseType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ApplicationCommandSubcommandGroupOptionResponseType = {
  NUMBER_2: 2,
} as const;

export type ApplicationCommandSubcommandGroupOptionResponseRequired = boolean | null;

export type ApplicationCommandSubcommandGroupOptionResponseOptions = ApplicationCommandSubcommandOptionResponse[] | null;

export type ApplicationCommandSubcommandGroupOptionResponseNameLocalized = string | null;

export type ApplicationCommandSubcommandGroupOptionResponseNameLocalizationsAnyOf = {[key: string]: string};

export type ApplicationCommandSubcommandGroupOptionResponseNameLocalizations = ApplicationCommandSubcommandGroupOptionResponseNameLocalizationsAnyOf | null;

export type ApplicationCommandSubcommandGroupOptionResponseDescriptionLocalized = string | null;

export type ApplicationCommandSubcommandGroupOptionResponseDescriptionLocalizationsAnyOf = {[key: string]: string};

export type ApplicationCommandSubcommandGroupOptionResponseDescriptionLocalizations = ApplicationCommandSubcommandGroupOptionResponseDescriptionLocalizationsAnyOf | null;

export interface ApplicationCommandSubcommandGroupOptionResponse {
  description: string;
  description_localizations?: ApplicationCommandSubcommandGroupOptionResponseDescriptionLocalizations;
  description_localized?: ApplicationCommandSubcommandGroupOptionResponseDescriptionLocalized;
  name: string;
  name_localizations?: ApplicationCommandSubcommandGroupOptionResponseNameLocalizations;
  name_localized?: ApplicationCommandSubcommandGroupOptionResponseNameLocalized;
  options?: ApplicationCommandSubcommandGroupOptionResponseOptions;
  required?: ApplicationCommandSubcommandGroupOptionResponseRequired;
  type: ApplicationCommandSubcommandGroupOptionResponseType;
}

export type ApplicationCommandSubcommandGroupOptionType = typeof ApplicationCommandSubcommandGroupOptionType[keyof typeof ApplicationCommandSubcommandGroupOptionType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ApplicationCommandSubcommandGroupOptionType = {
  NUMBER_2: 2,
} as const;

export type ApplicationCommandSubcommandGroupOptionRequired = boolean | null;

/**
 * @maxItems 25
 */
export type ApplicationCommandSubcommandGroupOptionOptions = ApplicationCommandSubcommandOption[] | null;

export interface ApplicationCommandSubcommandGroupOption {
  /**
   * @minLength 1
   * @maxLength 100
   */
  description: string;
  description_localizations?: ApplicationCommandSubcommandGroupOptionDescriptionLocalizations;
  /**
   * @minLength 1
   * @maxLength 32
   */
  name: string;
  name_localizations?: ApplicationCommandSubcommandGroupOptionNameLocalizations;
  /** @maxItems 25 */
  options?: ApplicationCommandSubcommandGroupOptionOptions;
  required?: ApplicationCommandSubcommandGroupOptionRequired;
  type: ApplicationCommandSubcommandGroupOptionType;
}

export type ApplicationCommandSubcommandGroupOptionNameLocalizationsAnyOf = {[key: string]: string};

export type ApplicationCommandSubcommandGroupOptionNameLocalizations = ApplicationCommandSubcommandGroupOptionNameLocalizationsAnyOf | null;

export type ApplicationCommandSubcommandGroupOptionDescriptionLocalizationsAnyOf = {[key: string]: string};

export type ApplicationCommandSubcommandGroupOptionDescriptionLocalizations = ApplicationCommandSubcommandGroupOptionDescriptionLocalizationsAnyOf | null;

export type ApplicationCommandStringOptionResponseType = typeof ApplicationCommandStringOptionResponseType[keyof typeof ApplicationCommandStringOptionResponseType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ApplicationCommandStringOptionResponseType = {
  NUMBER_3: 3,
} as const;

export type ApplicationCommandStringOptionResponseRequired = boolean | null;

export type ApplicationCommandStringOptionResponseNameLocalized = string | null;

export type ApplicationCommandStringOptionResponseNameLocalizationsAnyOf = {[key: string]: string};

export type ApplicationCommandStringOptionResponseNameLocalizations = ApplicationCommandStringOptionResponseNameLocalizationsAnyOf | null;

export type ApplicationCommandStringOptionResponseMinLength = number | null;

export type ApplicationCommandStringOptionResponseMaxLength = number | null;

export type ApplicationCommandStringOptionResponseDescriptionLocalized = string | null;

export type ApplicationCommandStringOptionResponseDescriptionLocalizationsAnyOf = {[key: string]: string};

export type ApplicationCommandStringOptionResponseDescriptionLocalizations = ApplicationCommandStringOptionResponseDescriptionLocalizationsAnyOf | null;

export type ApplicationCommandStringOptionResponseChoices = ApplicationCommandOptionStringChoiceResponse[] | null;

export type ApplicationCommandStringOptionResponseAutocomplete = boolean | null;

export interface ApplicationCommandStringOptionResponse {
  autocomplete?: ApplicationCommandStringOptionResponseAutocomplete;
  choices?: ApplicationCommandStringOptionResponseChoices;
  description: string;
  description_localizations?: ApplicationCommandStringOptionResponseDescriptionLocalizations;
  description_localized?: ApplicationCommandStringOptionResponseDescriptionLocalized;
  max_length?: ApplicationCommandStringOptionResponseMaxLength;
  min_length?: ApplicationCommandStringOptionResponseMinLength;
  name: string;
  name_localizations?: ApplicationCommandStringOptionResponseNameLocalizations;
  name_localized?: ApplicationCommandStringOptionResponseNameLocalized;
  required?: ApplicationCommandStringOptionResponseRequired;
  type: ApplicationCommandStringOptionResponseType;
}

export type ApplicationCommandStringOptionType = typeof ApplicationCommandStringOptionType[keyof typeof ApplicationCommandStringOptionType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ApplicationCommandStringOptionType = {
  NUMBER_3: 3,
} as const;

export type ApplicationCommandStringOptionRequired = boolean | null;

export type ApplicationCommandStringOptionNameLocalizationsAnyOf = {[key: string]: string};

export type ApplicationCommandStringOptionNameLocalizations = ApplicationCommandStringOptionNameLocalizationsAnyOf | null;

/**
 * @minimum 0
 * @maximum 6000
 */
export type ApplicationCommandStringOptionMinLength = number | null;

/**
 * @minimum 1
 * @maximum 6000
 */
export type ApplicationCommandStringOptionMaxLength = number | null;

export type ApplicationCommandStringOptionDescriptionLocalizationsAnyOf = {[key: string]: string};

export type ApplicationCommandStringOptionDescriptionLocalizations = ApplicationCommandStringOptionDescriptionLocalizationsAnyOf | null;

/**
 * @maxItems 25
 */
export type ApplicationCommandStringOptionChoices = ApplicationCommandOptionStringChoice[] | null;

export type ApplicationCommandStringOptionAutocomplete = boolean | null;

export interface ApplicationCommandStringOption {
  autocomplete?: ApplicationCommandStringOptionAutocomplete;
  /** @maxItems 25 */
  choices?: ApplicationCommandStringOptionChoices;
  /**
   * @minLength 1
   * @maxLength 100
   */
  description: string;
  description_localizations?: ApplicationCommandStringOptionDescriptionLocalizations;
  /**
   * @minimum 1
   * @maximum 6000
   */
  max_length?: ApplicationCommandStringOptionMaxLength;
  /**
   * @minimum 0
   * @maximum 6000
   */
  min_length?: ApplicationCommandStringOptionMinLength;
  /**
   * @minLength 1
   * @maxLength 32
   */
  name: string;
  name_localizations?: ApplicationCommandStringOptionNameLocalizations;
  required?: ApplicationCommandStringOptionRequired;
  type: ApplicationCommandStringOptionType;
}

export type ApplicationCommandRoleOptionResponseType = typeof ApplicationCommandRoleOptionResponseType[keyof typeof ApplicationCommandRoleOptionResponseType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ApplicationCommandRoleOptionResponseType = {
  NUMBER_8: 8,
} as const;

export type ApplicationCommandRoleOptionResponseRequired = boolean | null;

export type ApplicationCommandRoleOptionResponseNameLocalized = string | null;

export type ApplicationCommandRoleOptionResponseNameLocalizationsAnyOf = {[key: string]: string};

export type ApplicationCommandRoleOptionResponseNameLocalizations = ApplicationCommandRoleOptionResponseNameLocalizationsAnyOf | null;

export type ApplicationCommandRoleOptionResponseDescriptionLocalized = string | null;

export interface ApplicationCommandRoleOptionResponse {
  description: string;
  description_localizations?: ApplicationCommandRoleOptionResponseDescriptionLocalizations;
  description_localized?: ApplicationCommandRoleOptionResponseDescriptionLocalized;
  name: string;
  name_localizations?: ApplicationCommandRoleOptionResponseNameLocalizations;
  name_localized?: ApplicationCommandRoleOptionResponseNameLocalized;
  required?: ApplicationCommandRoleOptionResponseRequired;
  type: ApplicationCommandRoleOptionResponseType;
}

export type ApplicationCommandRoleOptionResponseDescriptionLocalizationsAnyOf = {[key: string]: string};

export type ApplicationCommandRoleOptionResponseDescriptionLocalizations = ApplicationCommandRoleOptionResponseDescriptionLocalizationsAnyOf | null;

export type ApplicationCommandRoleOptionType = typeof ApplicationCommandRoleOptionType[keyof typeof ApplicationCommandRoleOptionType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ApplicationCommandRoleOptionType = {
  NUMBER_8: 8,
} as const;

export type ApplicationCommandRoleOptionRequired = boolean | null;

export type ApplicationCommandRoleOptionNameLocalizationsAnyOf = {[key: string]: string};

export type ApplicationCommandRoleOptionNameLocalizations = ApplicationCommandRoleOptionNameLocalizationsAnyOf | null;

export type ApplicationCommandRoleOptionDescriptionLocalizationsAnyOf = {[key: string]: string};

export type ApplicationCommandRoleOptionDescriptionLocalizations = ApplicationCommandRoleOptionDescriptionLocalizationsAnyOf | null;

export interface ApplicationCommandRoleOption {
  /**
   * @minLength 1
   * @maxLength 100
   */
  description: string;
  description_localizations?: ApplicationCommandRoleOptionDescriptionLocalizations;
  /**
   * @minLength 1
   * @maxLength 32
   */
  name: string;
  name_localizations?: ApplicationCommandRoleOptionNameLocalizations;
  required?: ApplicationCommandRoleOptionRequired;
  type: ApplicationCommandRoleOptionType;
}

export type ApplicationCommandResponseOptionsAnyOfItem = ApplicationCommandAttachmentOptionResponse | ApplicationCommandBooleanOptionResponse | ApplicationCommandChannelOptionResponse | ApplicationCommandIntegerOptionResponse | ApplicationCommandMentionableOptionResponse | ApplicationCommandNumberOptionResponse | ApplicationCommandRoleOptionResponse | ApplicationCommandStringOptionResponse | ApplicationCommandSubcommandGroupOptionResponse | ApplicationCommandSubcommandOptionResponse | ApplicationCommandUserOptionResponse;

export type ApplicationCommandResponseOptions = ApplicationCommandResponseOptionsAnyOfItem[] | null;

export type ApplicationCommandResponseNsfw = boolean | null;

export type ApplicationCommandResponseNameLocalized = string | null;

export type ApplicationCommandResponseNameLocalizationsAnyOf = {[key: string]: string};

export type ApplicationCommandResponseNameLocalizations = ApplicationCommandResponseNameLocalizationsAnyOf | null;

export type ApplicationCommandResponseIntegrationTypes = ApplicationIntegrationType[] | null;

export type ApplicationCommandResponseGuildId = null | SnowflakeType;

export type ApplicationCommandResponseDmPermission = boolean | null;

export type ApplicationCommandResponseDescriptionLocalized = string | null;

export type ApplicationCommandResponseDescriptionLocalizationsAnyOf = {[key: string]: string};

export type ApplicationCommandResponseDescriptionLocalizations = ApplicationCommandResponseDescriptionLocalizationsAnyOf | null;

export type ApplicationCommandResponseDefaultMemberPermissions = string | null;

export type ApplicationCommandResponseContexts = InteractionContextType[] | null;

export interface ApplicationCommandResponse {
  application_id: SnowflakeType;
  contexts?: ApplicationCommandResponseContexts;
  default_member_permissions?: ApplicationCommandResponseDefaultMemberPermissions;
  description: string;
  description_localizations?: ApplicationCommandResponseDescriptionLocalizations;
  description_localized?: ApplicationCommandResponseDescriptionLocalized;
  dm_permission?: ApplicationCommandResponseDmPermission;
  guild_id?: ApplicationCommandResponseGuildId;
  id: SnowflakeType;
  integration_types?: ApplicationCommandResponseIntegrationTypes;
  name: string;
  name_localizations?: ApplicationCommandResponseNameLocalizations;
  name_localized?: ApplicationCommandResponseNameLocalized;
  nsfw?: ApplicationCommandResponseNsfw;
  options?: ApplicationCommandResponseOptions;
  type: ApplicationCommandType;
  version: SnowflakeType;
}

export type ApplicationCommandPermissionType = number;

export interface ApplicationCommandPermission {
  id: SnowflakeType;
  permission: boolean;
  type: ApplicationCommandPermissionType;
}

export type ApplicationCommandPatchRequestPartialOptionsAnyOfItem = ApplicationCommandAttachmentOption | ApplicationCommandBooleanOption | ApplicationCommandChannelOption | ApplicationCommandIntegerOption | ApplicationCommandMentionableOption | ApplicationCommandNumberOption | ApplicationCommandRoleOption | ApplicationCommandStringOption | ApplicationCommandSubcommandGroupOption | ApplicationCommandSubcommandOption | ApplicationCommandUserOption;

/**
 * @maxItems 25
 */
export type ApplicationCommandPatchRequestPartialOptions = ApplicationCommandPatchRequestPartialOptionsAnyOfItem[] | null;

export type ApplicationCommandPatchRequestPartialNameLocalizationsAnyOf = {[key: string]: string};

export type ApplicationCommandPatchRequestPartialNameLocalizations = ApplicationCommandPatchRequestPartialNameLocalizationsAnyOf | null;

/**
 * @minItems 1
 */
export type ApplicationCommandPatchRequestPartialIntegrationTypes = ApplicationIntegrationType[] | null;

export type ApplicationCommandPatchRequestPartialHandler = null | ApplicationCommandHandler;

export type ApplicationCommandPatchRequestPartialDmPermission = boolean | null;

export interface ApplicationCommandPatchRequestPartial {
  /** @minItems 1 */
  contexts?: ApplicationCommandPatchRequestPartialContexts;
  /**
   * @minimum 0
   * @maximum 2251799813685247
   */
  default_member_permissions?: ApplicationCommandPatchRequestPartialDefaultMemberPermissions;
  /** @maxLength 100 */
  description?: ApplicationCommandPatchRequestPartialDescription;
  description_localizations?: ApplicationCommandPatchRequestPartialDescriptionLocalizations;
  dm_permission?: ApplicationCommandPatchRequestPartialDmPermission;
  handler?: ApplicationCommandPatchRequestPartialHandler;
  /** @minItems 1 */
  integration_types?: ApplicationCommandPatchRequestPartialIntegrationTypes;
  /**
   * @minLength 1
   * @maxLength 32
   */
  name?: string;
  name_localizations?: ApplicationCommandPatchRequestPartialNameLocalizations;
  /** @maxItems 25 */
  options?: ApplicationCommandPatchRequestPartialOptions;
}

export type ApplicationCommandPatchRequestPartialDescriptionLocalizationsAnyOf = {[key: string]: string};

export type ApplicationCommandPatchRequestPartialDescriptionLocalizations = ApplicationCommandPatchRequestPartialDescriptionLocalizationsAnyOf | null;

/**
 * @maxLength 100
 */
export type ApplicationCommandPatchRequestPartialDescription = string | null;

/**
 * @minimum 0
 * @maximum 2251799813685247
 */
export type ApplicationCommandPatchRequestPartialDefaultMemberPermissions = number | null;

/**
 * @minItems 1
 */
export type ApplicationCommandPatchRequestPartialContexts = InteractionContextType[] | null;

export type ApplicationCommandOptionType = number;

export type ApplicationCommandOptionStringChoiceResponseNameLocalized = string | null;

export interface ApplicationCommandOptionStringChoiceResponse {
  name: string;
  name_localizations?: ApplicationCommandOptionStringChoiceResponseNameLocalizations;
  name_localized?: ApplicationCommandOptionStringChoiceResponseNameLocalized;
  value: string;
}

export type ApplicationCommandOptionStringChoiceResponseNameLocalizationsAnyOf = {[key: string]: string};

export type ApplicationCommandOptionStringChoiceResponseNameLocalizations = ApplicationCommandOptionStringChoiceResponseNameLocalizationsAnyOf | null;

export type ApplicationCommandOptionStringChoiceNameLocalizationsAnyOf = {[key: string]: string};

export type ApplicationCommandOptionStringChoiceNameLocalizations = ApplicationCommandOptionStringChoiceNameLocalizationsAnyOf | null;

export interface ApplicationCommandOptionStringChoice {
  /**
   * @minLength 1
   * @maxLength 100
   */
  name: string;
  name_localizations?: ApplicationCommandOptionStringChoiceNameLocalizations;
  /** @maxLength 6000 */
  value: string;
}

export type ApplicationCommandOptionNumberChoiceResponseNameLocalized = string | null;

export type ApplicationCommandOptionNumberChoiceResponseNameLocalizationsAnyOf = {[key: string]: string};

export type ApplicationCommandOptionNumberChoiceResponseNameLocalizations = ApplicationCommandOptionNumberChoiceResponseNameLocalizationsAnyOf | null;

export interface ApplicationCommandOptionNumberChoiceResponse {
  name: string;
  name_localizations?: ApplicationCommandOptionNumberChoiceResponseNameLocalizations;
  name_localized?: ApplicationCommandOptionNumberChoiceResponseNameLocalized;
  value: number;
}

export type ApplicationCommandOptionNumberChoiceNameLocalizationsAnyOf = {[key: string]: string};

export type ApplicationCommandOptionNumberChoiceNameLocalizations = ApplicationCommandOptionNumberChoiceNameLocalizationsAnyOf | null;

export interface ApplicationCommandOptionNumberChoice {
  /**
   * @minLength 1
   * @maxLength 100
   */
  name: string;
  name_localizations?: ApplicationCommandOptionNumberChoiceNameLocalizations;
  value: number;
}

export type ApplicationCommandOptionIntegerChoiceResponseNameLocalized = string | null;

export interface ApplicationCommandOptionIntegerChoiceResponse {
  name: string;
  name_localizations?: ApplicationCommandOptionIntegerChoiceResponseNameLocalizations;
  name_localized?: ApplicationCommandOptionIntegerChoiceResponseNameLocalized;
  value: Int53Type;
}

export type ApplicationCommandOptionIntegerChoiceResponseNameLocalizationsAnyOf = {[key: string]: string};

export type ApplicationCommandOptionIntegerChoiceResponseNameLocalizations = ApplicationCommandOptionIntegerChoiceResponseNameLocalizationsAnyOf | null;

export type ApplicationCommandOptionIntegerChoiceNameLocalizationsAnyOf = {[key: string]: string};

export type ApplicationCommandOptionIntegerChoiceNameLocalizations = ApplicationCommandOptionIntegerChoiceNameLocalizationsAnyOf | null;

export interface ApplicationCommandOptionIntegerChoice {
  /**
   * @minLength 1
   * @maxLength 100
   */
  name: string;
  name_localizations?: ApplicationCommandOptionIntegerChoiceNameLocalizations;
  value: Int53Type;
}

export type ApplicationCommandNumberOptionResponseType = typeof ApplicationCommandNumberOptionResponseType[keyof typeof ApplicationCommandNumberOptionResponseType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ApplicationCommandNumberOptionResponseType = {
  NUMBER_10: 10,
} as const;

export type ApplicationCommandNumberOptionResponseRequired = boolean | null;

export type ApplicationCommandNumberOptionResponseNameLocalized = string | null;

export interface ApplicationCommandNumberOptionResponse {
  autocomplete?: ApplicationCommandNumberOptionResponseAutocomplete;
  choices?: ApplicationCommandNumberOptionResponseChoices;
  description: string;
  description_localizations?: ApplicationCommandNumberOptionResponseDescriptionLocalizations;
  description_localized?: ApplicationCommandNumberOptionResponseDescriptionLocalized;
  max_value?: ApplicationCommandNumberOptionResponseMaxValue;
  min_value?: ApplicationCommandNumberOptionResponseMinValue;
  name: string;
  name_localizations?: ApplicationCommandNumberOptionResponseNameLocalizations;
  name_localized?: ApplicationCommandNumberOptionResponseNameLocalized;
  required?: ApplicationCommandNumberOptionResponseRequired;
  type: ApplicationCommandNumberOptionResponseType;
}

export type ApplicationCommandNumberOptionResponseNameLocalizationsAnyOf = {[key: string]: string};

export type ApplicationCommandNumberOptionResponseNameLocalizations = ApplicationCommandNumberOptionResponseNameLocalizationsAnyOf | null;

export type ApplicationCommandNumberOptionResponseMinValue = number | null;

export type ApplicationCommandNumberOptionResponseMaxValue = number | null;

export type ApplicationCommandNumberOptionResponseDescriptionLocalized = string | null;

export type ApplicationCommandNumberOptionResponseDescriptionLocalizationsAnyOf = {[key: string]: string};

export type ApplicationCommandNumberOptionResponseDescriptionLocalizations = ApplicationCommandNumberOptionResponseDescriptionLocalizationsAnyOf | null;

export type ApplicationCommandNumberOptionResponseChoices = ApplicationCommandOptionNumberChoiceResponse[] | null;

export type ApplicationCommandNumberOptionResponseAutocomplete = boolean | null;

export type ApplicationCommandNumberOptionType = typeof ApplicationCommandNumberOptionType[keyof typeof ApplicationCommandNumberOptionType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ApplicationCommandNumberOptionType = {
  NUMBER_10: 10,
} as const;

export type ApplicationCommandNumberOptionRequired = boolean | null;

export type ApplicationCommandNumberOptionNameLocalizationsAnyOf = {[key: string]: string};

export type ApplicationCommandNumberOptionNameLocalizations = ApplicationCommandNumberOptionNameLocalizationsAnyOf | null;

export type ApplicationCommandNumberOptionMinValue = number | null;

export type ApplicationCommandNumberOptionMaxValue = number | null;

export type ApplicationCommandNumberOptionDescriptionLocalizationsAnyOf = {[key: string]: string};

export type ApplicationCommandNumberOptionDescriptionLocalizations = ApplicationCommandNumberOptionDescriptionLocalizationsAnyOf | null;

/**
 * @maxItems 25
 */
export type ApplicationCommandNumberOptionChoices = ApplicationCommandOptionNumberChoice[] | null;

export type ApplicationCommandNumberOptionAutocomplete = boolean | null;

export interface ApplicationCommandNumberOption {
  autocomplete?: ApplicationCommandNumberOptionAutocomplete;
  /** @maxItems 25 */
  choices?: ApplicationCommandNumberOptionChoices;
  /**
   * @minLength 1
   * @maxLength 100
   */
  description: string;
  description_localizations?: ApplicationCommandNumberOptionDescriptionLocalizations;
  max_value?: ApplicationCommandNumberOptionMaxValue;
  min_value?: ApplicationCommandNumberOptionMinValue;
  /**
   * @minLength 1
   * @maxLength 32
   */
  name: string;
  name_localizations?: ApplicationCommandNumberOptionNameLocalizations;
  required?: ApplicationCommandNumberOptionRequired;
  type: ApplicationCommandNumberOptionType;
}

export type ApplicationCommandMentionableOptionResponseType = typeof ApplicationCommandMentionableOptionResponseType[keyof typeof ApplicationCommandMentionableOptionResponseType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ApplicationCommandMentionableOptionResponseType = {
  NUMBER_9: 9,
} as const;

export type ApplicationCommandMentionableOptionResponseRequired = boolean | null;

export type ApplicationCommandMentionableOptionResponseNameLocalized = string | null;

export type ApplicationCommandMentionableOptionResponseNameLocalizationsAnyOf = {[key: string]: string};

export type ApplicationCommandMentionableOptionResponseNameLocalizations = ApplicationCommandMentionableOptionResponseNameLocalizationsAnyOf | null;

export type ApplicationCommandMentionableOptionResponseDescriptionLocalized = string | null;

export type ApplicationCommandMentionableOptionResponseDescriptionLocalizationsAnyOf = {[key: string]: string};

export type ApplicationCommandMentionableOptionResponseDescriptionLocalizations = ApplicationCommandMentionableOptionResponseDescriptionLocalizationsAnyOf | null;

export interface ApplicationCommandMentionableOptionResponse {
  description: string;
  description_localizations?: ApplicationCommandMentionableOptionResponseDescriptionLocalizations;
  description_localized?: ApplicationCommandMentionableOptionResponseDescriptionLocalized;
  name: string;
  name_localizations?: ApplicationCommandMentionableOptionResponseNameLocalizations;
  name_localized?: ApplicationCommandMentionableOptionResponseNameLocalized;
  required?: ApplicationCommandMentionableOptionResponseRequired;
  type: ApplicationCommandMentionableOptionResponseType;
}

export type ApplicationCommandMentionableOptionType = typeof ApplicationCommandMentionableOptionType[keyof typeof ApplicationCommandMentionableOptionType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ApplicationCommandMentionableOptionType = {
  NUMBER_9: 9,
} as const;

export type ApplicationCommandMentionableOptionRequired = boolean | null;

export interface ApplicationCommandMentionableOption {
  /**
   * @minLength 1
   * @maxLength 100
   */
  description: string;
  description_localizations?: ApplicationCommandMentionableOptionDescriptionLocalizations;
  /**
   * @minLength 1
   * @maxLength 32
   */
  name: string;
  name_localizations?: ApplicationCommandMentionableOptionNameLocalizations;
  required?: ApplicationCommandMentionableOptionRequired;
  type: ApplicationCommandMentionableOptionType;
}

export type ApplicationCommandMentionableOptionNameLocalizationsAnyOf = {[key: string]: string};

export type ApplicationCommandMentionableOptionNameLocalizations = ApplicationCommandMentionableOptionNameLocalizationsAnyOf | null;

export type ApplicationCommandMentionableOptionDescriptionLocalizationsAnyOf = {[key: string]: string};

export type ApplicationCommandMentionableOptionDescriptionLocalizations = ApplicationCommandMentionableOptionDescriptionLocalizationsAnyOf | null;

export type ApplicationCommandInteractionMetadataResponseUser = null | UserResponse;

export type ApplicationCommandInteractionMetadataResponseType = typeof ApplicationCommandInteractionMetadataResponseType[keyof typeof ApplicationCommandInteractionMetadataResponseType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ApplicationCommandInteractionMetadataResponseType = {
  NUMBER_2: 2,
} as const;

export type ApplicationCommandInteractionMetadataResponseTargetUser = null | UserResponse;

export type ApplicationCommandInteractionMetadataResponseTargetMessageId = null | SnowflakeType;

export type ApplicationCommandInteractionMetadataResponseOriginalResponseMessageId = null | SnowflakeType;

export type ApplicationCommandInteractionMetadataResponseAuthorizingIntegrationOwners = {[key: string]: SnowflakeType};

export interface ApplicationCommandInteractionMetadataResponse {
  authorizing_integration_owners: ApplicationCommandInteractionMetadataResponseAuthorizingIntegrationOwners;
  id: SnowflakeType;
  original_response_message_id?: ApplicationCommandInteractionMetadataResponseOriginalResponseMessageId;
  target_message_id?: ApplicationCommandInteractionMetadataResponseTargetMessageId;
  target_user?: ApplicationCommandInteractionMetadataResponseTargetUser;
  type: ApplicationCommandInteractionMetadataResponseType;
  user?: ApplicationCommandInteractionMetadataResponseUser;
}

export type ApplicationCommandIntegerOptionResponseType = typeof ApplicationCommandIntegerOptionResponseType[keyof typeof ApplicationCommandIntegerOptionResponseType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ApplicationCommandIntegerOptionResponseType = {
  NUMBER_4: 4,
} as const;

export type ApplicationCommandIntegerOptionResponseRequired = boolean | null;

export type ApplicationCommandIntegerOptionResponseNameLocalized = string | null;

export type ApplicationCommandIntegerOptionResponseNameLocalizationsAnyOf = {[key: string]: string};

export type ApplicationCommandIntegerOptionResponseNameLocalizations = ApplicationCommandIntegerOptionResponseNameLocalizationsAnyOf | null;

export type ApplicationCommandIntegerOptionResponseMinValue = null | Int53Type;

export type ApplicationCommandIntegerOptionResponseMaxValue = null | Int53Type;

export type ApplicationCommandIntegerOptionResponseDescriptionLocalized = string | null;

export type ApplicationCommandIntegerOptionResponseDescriptionLocalizationsAnyOf = {[key: string]: string};

export type ApplicationCommandIntegerOptionResponseDescriptionLocalizations = ApplicationCommandIntegerOptionResponseDescriptionLocalizationsAnyOf | null;

export type ApplicationCommandIntegerOptionResponseChoices = ApplicationCommandOptionIntegerChoiceResponse[] | null;

export type ApplicationCommandIntegerOptionResponseAutocomplete = boolean | null;

export interface ApplicationCommandIntegerOptionResponse {
  autocomplete?: ApplicationCommandIntegerOptionResponseAutocomplete;
  choices?: ApplicationCommandIntegerOptionResponseChoices;
  description: string;
  description_localizations?: ApplicationCommandIntegerOptionResponseDescriptionLocalizations;
  description_localized?: ApplicationCommandIntegerOptionResponseDescriptionLocalized;
  max_value?: ApplicationCommandIntegerOptionResponseMaxValue;
  min_value?: ApplicationCommandIntegerOptionResponseMinValue;
  name: string;
  name_localizations?: ApplicationCommandIntegerOptionResponseNameLocalizations;
  name_localized?: ApplicationCommandIntegerOptionResponseNameLocalized;
  required?: ApplicationCommandIntegerOptionResponseRequired;
  type: ApplicationCommandIntegerOptionResponseType;
}

export type ApplicationCommandIntegerOptionType = typeof ApplicationCommandIntegerOptionType[keyof typeof ApplicationCommandIntegerOptionType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ApplicationCommandIntegerOptionType = {
  NUMBER_4: 4,
} as const;

export type ApplicationCommandIntegerOptionRequired = boolean | null;

export type ApplicationCommandIntegerOptionNameLocalizationsAnyOf = {[key: string]: string};

export type ApplicationCommandIntegerOptionNameLocalizations = ApplicationCommandIntegerOptionNameLocalizationsAnyOf | null;

export type ApplicationCommandIntegerOptionMinValue = null | Int53Type;

export type ApplicationCommandIntegerOptionMaxValue = null | Int53Type;

export type ApplicationCommandIntegerOptionDescriptionLocalizationsAnyOf = {[key: string]: string};

export type ApplicationCommandIntegerOptionDescriptionLocalizations = ApplicationCommandIntegerOptionDescriptionLocalizationsAnyOf | null;

/**
 * @maxItems 25
 */
export type ApplicationCommandIntegerOptionChoices = ApplicationCommandOptionIntegerChoice[] | null;

export type ApplicationCommandIntegerOptionAutocomplete = boolean | null;

export interface ApplicationCommandIntegerOption {
  autocomplete?: ApplicationCommandIntegerOptionAutocomplete;
  /** @maxItems 25 */
  choices?: ApplicationCommandIntegerOptionChoices;
  /**
   * @minLength 1
   * @maxLength 100
   */
  description: string;
  description_localizations?: ApplicationCommandIntegerOptionDescriptionLocalizations;
  max_value?: ApplicationCommandIntegerOptionMaxValue;
  min_value?: ApplicationCommandIntegerOptionMinValue;
  /**
   * @minLength 1
   * @maxLength 32
   */
  name: string;
  name_localizations?: ApplicationCommandIntegerOptionNameLocalizations;
  required?: ApplicationCommandIntegerOptionRequired;
  type: ApplicationCommandIntegerOptionType;
}

export type ApplicationCommandHandler = number;

export type ApplicationCommandCreateRequestType = null | ApplicationCommandType;

export type ApplicationCommandCreateRequestOptionsAnyOfItem = ApplicationCommandAttachmentOption | ApplicationCommandBooleanOption | ApplicationCommandChannelOption | ApplicationCommandIntegerOption | ApplicationCommandMentionableOption | ApplicationCommandNumberOption | ApplicationCommandRoleOption | ApplicationCommandStringOption | ApplicationCommandSubcommandGroupOption | ApplicationCommandSubcommandOption | ApplicationCommandUserOption;

/**
 * @maxItems 25
 */
export type ApplicationCommandCreateRequestOptions = ApplicationCommandCreateRequestOptionsAnyOfItem[] | null;

export type ApplicationCommandCreateRequestNameLocalizationsAnyOf = {[key: string]: string};

export type ApplicationCommandCreateRequestNameLocalizations = ApplicationCommandCreateRequestNameLocalizationsAnyOf | null;

/**
 * @minItems 1
 */
export type ApplicationCommandCreateRequestIntegrationTypes = ApplicationIntegrationType[] | null;

export type ApplicationCommandCreateRequestHandler = null | ApplicationCommandHandler;

export type ApplicationCommandCreateRequestDmPermission = boolean | null;

export type ApplicationCommandCreateRequestDescriptionLocalizationsAnyOf = {[key: string]: string};

export type ApplicationCommandCreateRequestDescriptionLocalizations = ApplicationCommandCreateRequestDescriptionLocalizationsAnyOf | null;

/**
 * @maxLength 100
 */
export type ApplicationCommandCreateRequestDescription = string | null;

/**
 * @minimum 0
 * @maximum 2251799813685247
 */
export type ApplicationCommandCreateRequestDefaultMemberPermissions = number | null;

/**
 * @minItems 1
 */
export type ApplicationCommandCreateRequestContexts = InteractionContextType[] | null;

export interface ApplicationCommandCreateRequest {
  /** @minItems 1 */
  contexts?: ApplicationCommandCreateRequestContexts;
  /**
   * @minimum 0
   * @maximum 2251799813685247
   */
  default_member_permissions?: ApplicationCommandCreateRequestDefaultMemberPermissions;
  /** @maxLength 100 */
  description?: ApplicationCommandCreateRequestDescription;
  description_localizations?: ApplicationCommandCreateRequestDescriptionLocalizations;
  dm_permission?: ApplicationCommandCreateRequestDmPermission;
  handler?: ApplicationCommandCreateRequestHandler;
  /** @minItems 1 */
  integration_types?: ApplicationCommandCreateRequestIntegrationTypes;
  /**
   * @minLength 1
   * @maxLength 32
   */
  name: string;
  name_localizations?: ApplicationCommandCreateRequestNameLocalizations;
  /** @maxItems 25 */
  options?: ApplicationCommandCreateRequestOptions;
  type?: ApplicationCommandCreateRequestType;
}

export type ApplicationCommandChannelOptionResponseType = typeof ApplicationCommandChannelOptionResponseType[keyof typeof ApplicationCommandChannelOptionResponseType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ApplicationCommandChannelOptionResponseType = {
  NUMBER_7: 7,
} as const;

export type ApplicationCommandChannelOptionResponseRequired = boolean | null;

export type ApplicationCommandChannelOptionResponseNameLocalized = string | null;

export interface ApplicationCommandChannelOptionResponse {
  channel_types?: ApplicationCommandChannelOptionResponseChannelTypes;
  description: string;
  description_localizations?: ApplicationCommandChannelOptionResponseDescriptionLocalizations;
  description_localized?: ApplicationCommandChannelOptionResponseDescriptionLocalized;
  name: string;
  name_localizations?: ApplicationCommandChannelOptionResponseNameLocalizations;
  name_localized?: ApplicationCommandChannelOptionResponseNameLocalized;
  required?: ApplicationCommandChannelOptionResponseRequired;
  type: ApplicationCommandChannelOptionResponseType;
}

export type ApplicationCommandChannelOptionResponseNameLocalizationsAnyOf = {[key: string]: string};

export type ApplicationCommandChannelOptionResponseNameLocalizations = ApplicationCommandChannelOptionResponseNameLocalizationsAnyOf | null;

export type ApplicationCommandChannelOptionResponseDescriptionLocalized = string | null;

export type ApplicationCommandChannelOptionResponseDescriptionLocalizationsAnyOf = {[key: string]: string};

export type ApplicationCommandChannelOptionResponseDescriptionLocalizations = ApplicationCommandChannelOptionResponseDescriptionLocalizationsAnyOf | null;

export type ApplicationCommandChannelOptionResponseChannelTypes = ChannelTypes[] | null;

export type ApplicationCommandChannelOptionType = typeof ApplicationCommandChannelOptionType[keyof typeof ApplicationCommandChannelOptionType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ApplicationCommandChannelOptionType = {
  NUMBER_7: 7,
} as const;

export type ApplicationCommandChannelOptionRequired = boolean | null;

export interface ApplicationCommandChannelOption {
  channel_types?: ApplicationCommandChannelOptionChannelTypes;
  /**
   * @minLength 1
   * @maxLength 100
   */
  description: string;
  description_localizations?: ApplicationCommandChannelOptionDescriptionLocalizations;
  /**
   * @minLength 1
   * @maxLength 32
   */
  name: string;
  name_localizations?: ApplicationCommandChannelOptionNameLocalizations;
  required?: ApplicationCommandChannelOptionRequired;
  type: ApplicationCommandChannelOptionType;
}

export type ApplicationCommandChannelOptionNameLocalizationsAnyOf = {[key: string]: string};

export type ApplicationCommandChannelOptionNameLocalizations = ApplicationCommandChannelOptionNameLocalizationsAnyOf | null;

export type ApplicationCommandChannelOptionDescriptionLocalizationsAnyOf = {[key: string]: string};

export type ApplicationCommandChannelOptionDescriptionLocalizations = ApplicationCommandChannelOptionDescriptionLocalizationsAnyOf | null;

export type ApplicationCommandChannelOptionChannelTypes = ChannelTypes[] | null;

export type ApplicationCommandBooleanOptionResponseType = typeof ApplicationCommandBooleanOptionResponseType[keyof typeof ApplicationCommandBooleanOptionResponseType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ApplicationCommandBooleanOptionResponseType = {
  NUMBER_5: 5,
} as const;

export type ApplicationCommandBooleanOptionResponseRequired = boolean | null;

export type ApplicationCommandBooleanOptionResponseNameLocalized = string | null;

export type ApplicationCommandBooleanOptionResponseNameLocalizationsAnyOf = {[key: string]: string};

export type ApplicationCommandBooleanOptionResponseNameLocalizations = ApplicationCommandBooleanOptionResponseNameLocalizationsAnyOf | null;

export type ApplicationCommandBooleanOptionResponseDescriptionLocalized = string | null;

export interface ApplicationCommandBooleanOptionResponse {
  description: string;
  description_localizations?: ApplicationCommandBooleanOptionResponseDescriptionLocalizations;
  description_localized?: ApplicationCommandBooleanOptionResponseDescriptionLocalized;
  name: string;
  name_localizations?: ApplicationCommandBooleanOptionResponseNameLocalizations;
  name_localized?: ApplicationCommandBooleanOptionResponseNameLocalized;
  required?: ApplicationCommandBooleanOptionResponseRequired;
  type: ApplicationCommandBooleanOptionResponseType;
}

export type ApplicationCommandBooleanOptionResponseDescriptionLocalizationsAnyOf = {[key: string]: string};

export type ApplicationCommandBooleanOptionResponseDescriptionLocalizations = ApplicationCommandBooleanOptionResponseDescriptionLocalizationsAnyOf | null;

export type ApplicationCommandBooleanOptionType = typeof ApplicationCommandBooleanOptionType[keyof typeof ApplicationCommandBooleanOptionType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ApplicationCommandBooleanOptionType = {
  NUMBER_5: 5,
} as const;

export type ApplicationCommandBooleanOptionRequired = boolean | null;

export interface ApplicationCommandBooleanOption {
  /**
   * @minLength 1
   * @maxLength 100
   */
  description: string;
  description_localizations?: ApplicationCommandBooleanOptionDescriptionLocalizations;
  /**
   * @minLength 1
   * @maxLength 32
   */
  name: string;
  name_localizations?: ApplicationCommandBooleanOptionNameLocalizations;
  required?: ApplicationCommandBooleanOptionRequired;
  type: ApplicationCommandBooleanOptionType;
}

export type ApplicationCommandBooleanOptionNameLocalizationsAnyOf = {[key: string]: string};

export type ApplicationCommandBooleanOptionNameLocalizations = ApplicationCommandBooleanOptionNameLocalizationsAnyOf | null;

export type ApplicationCommandBooleanOptionDescriptionLocalizationsAnyOf = {[key: string]: string};

export type ApplicationCommandBooleanOptionDescriptionLocalizations = ApplicationCommandBooleanOptionDescriptionLocalizationsAnyOf | null;

export type ApplicationCommandAutocompleteCallbackRequestType = typeof ApplicationCommandAutocompleteCallbackRequestType[keyof typeof ApplicationCommandAutocompleteCallbackRequestType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ApplicationCommandAutocompleteCallbackRequestType = {
  NUMBER_8: 8,
} as const;

export type ApplicationCommandAutocompleteCallbackRequestData = InteractionApplicationCommandAutocompleteCallbackIntegerData | InteractionApplicationCommandAutocompleteCallbackNumberData | InteractionApplicationCommandAutocompleteCallbackStringData;

export interface ApplicationCommandAutocompleteCallbackRequest {
  data: ApplicationCommandAutocompleteCallbackRequestData;
  type: ApplicationCommandAutocompleteCallbackRequestType;
}

export type ApplicationCommandAttachmentOptionResponseType = typeof ApplicationCommandAttachmentOptionResponseType[keyof typeof ApplicationCommandAttachmentOptionResponseType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ApplicationCommandAttachmentOptionResponseType = {
  NUMBER_11: 11,
} as const;

export type ApplicationCommandAttachmentOptionResponseRequired = boolean | null;

export type ApplicationCommandAttachmentOptionResponseNameLocalized = string | null;

export interface ApplicationCommandAttachmentOptionResponse {
  description: string;
  description_localizations?: ApplicationCommandAttachmentOptionResponseDescriptionLocalizations;
  description_localized?: ApplicationCommandAttachmentOptionResponseDescriptionLocalized;
  name: string;
  name_localizations?: ApplicationCommandAttachmentOptionResponseNameLocalizations;
  name_localized?: ApplicationCommandAttachmentOptionResponseNameLocalized;
  required?: ApplicationCommandAttachmentOptionResponseRequired;
  type: ApplicationCommandAttachmentOptionResponseType;
}

export type ApplicationCommandAttachmentOptionResponseNameLocalizationsAnyOf = {[key: string]: string};

export type ApplicationCommandAttachmentOptionResponseNameLocalizations = ApplicationCommandAttachmentOptionResponseNameLocalizationsAnyOf | null;

export type ApplicationCommandAttachmentOptionResponseDescriptionLocalized = string | null;

export type ApplicationCommandAttachmentOptionResponseDescriptionLocalizationsAnyOf = {[key: string]: string};

export type ApplicationCommandAttachmentOptionResponseDescriptionLocalizations = ApplicationCommandAttachmentOptionResponseDescriptionLocalizationsAnyOf | null;

export type ApplicationCommandAttachmentOptionType = typeof ApplicationCommandAttachmentOptionType[keyof typeof ApplicationCommandAttachmentOptionType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ApplicationCommandAttachmentOptionType = {
  NUMBER_11: 11,
} as const;

export type ApplicationCommandAttachmentOptionRequired = boolean | null;

export type ApplicationCommandAttachmentOptionNameLocalizationsAnyOf = {[key: string]: string};

export type ApplicationCommandAttachmentOptionNameLocalizations = ApplicationCommandAttachmentOptionNameLocalizationsAnyOf | null;

export type ApplicationCommandAttachmentOptionDescriptionLocalizationsAnyOf = {[key: string]: string};

export type ApplicationCommandAttachmentOptionDescriptionLocalizations = ApplicationCommandAttachmentOptionDescriptionLocalizationsAnyOf | null;

export interface ApplicationCommandAttachmentOption {
  /**
   * @minLength 1
   * @maxLength 100
   */
  description: string;
  description_localizations?: ApplicationCommandAttachmentOptionDescriptionLocalizations;
  /**
   * @minLength 1
   * @maxLength 32
   */
  name: string;
  name_localizations?: ApplicationCommandAttachmentOptionNameLocalizations;
  required?: ApplicationCommandAttachmentOptionRequired;
  type: ApplicationCommandAttachmentOptionType;
}

export type AllowedMentionTypes = string;

export type AfkTimeouts = number;

export type ActivityLocationKinds = string;

export interface ActivitiesAttachmentResponse {
  attachment: AttachmentResponse;
}

export type ActionRowType = typeof ActionRowType[keyof typeof ActionRowType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ActionRowType = {
  NUMBER_1: 1,
} as const;

export type ActionRowComponentsItem = Button | ChannelSelect | InputText | MentionableSelect | RoleSelect | StringSelect | UserSelect;

export interface ActionRow {
  /**
   * @minItems 1
   * @maxItems 5
   */
  components: ActionRowComponentsItem[];
  type: ActionRowType;
}

export type AccountResponseName = string | null;

export interface AccountResponse {
  id: string;
  name?: AccountResponseName;
}





  export const getMyOauth2Application = <TData = AxiosResponse<PrivateApplicationResponse>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/oauth2/applications/@me`,options
    );
  }

export const listMyConnections = <TData = AxiosResponse<ListMyConnections200>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/users/@me/connections`,options
    );
  }

export const createDm = <TData = AxiosResponse<CreateDm200>>(
    createPrivateChannelRequest: CreatePrivateChannelRequest, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/users/@me/channels`,
      createPrivateChannelRequest,options
    );
  }

export const listMyGuilds = <TData = AxiosResponse<ListMyGuilds200>>(
    params?: ListMyGuildsParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/users/@me/guilds`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

export const getMyApplication = <TData = AxiosResponse<PrivateApplicationResponse>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/applications/@me`,options
    );
  }

export const updateMyApplication = <TData = AxiosResponse<PrivateApplicationResponse>>(
    applicationFormPartial: ApplicationFormPartial, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.patch(
      `/applications/@me`,
      applicationFormPartial,options
    );
  }

export const getBotGateway = <TData = AxiosResponse<GatewayBotResponse>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/gateway/bot`,options
    );
  }

export const getPublicKeys = <TData = AxiosResponse<OAuth2GetKeys>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/oauth2/keys`,options
    );
  }

export const getMyOauth2Authorization = <TData = AxiosResponse<OAuth2GetAuthorizationResponse>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/oauth2/@me`,options
    );
  }

export const listVoiceRegions = <TData = AxiosResponse<ListVoiceRegions200>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/voice/regions`,options
    );
  }

export const getMyUser = <TData = AxiosResponse<UserPIIResponse>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/users/@me`,options
    );
  }

export const updateMyUser = <TData = AxiosResponse<UserPIIResponse>>(
    botAccountPatchRequest: BotAccountPatchRequest, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.patch(
      `/users/@me`,
      botAccountPatchRequest,options
    );
  }

export const getSoundboardDefaultSounds = <TData = AxiosResponse<SoundboardSoundResponse[]>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/soundboard-default-sounds`,options
    );
  }

export const createStageInstance = <TData = AxiosResponse<StageInstanceResponse>>(
    createStageInstanceBody: CreateStageInstanceBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/stage-instances`,
      createStageInstanceBody,options
    );
  }

export const listStickerPacks = <TData = AxiosResponse<StickerPackCollectionResponse>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/sticker-packs`,options
    );
  }

export const getGateway = <TData = AxiosResponse<GatewayResponse>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/gateway`,options
    );
  }

export const createGuild = <TData = AxiosResponse<GuildResponse>>(
    guildCreateRequest: GuildCreateRequest, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/guilds`,
      guildCreateRequest,options
    );
  }

export const listMyPrivateArchivedThreads = <TData = AxiosResponse<ThreadsResponse>>(
    channelId: SnowflakeType,
    params?: ListMyPrivateArchivedThreadsParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/channels/${channelId}/users/@me/threads/archived/private`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

export const listGuildApplicationCommandPermissions = <TData = AxiosResponse<CommandPermissionsResponse[]>>(
    applicationId: SnowflakeType,
    guildId: SnowflakeType, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/applications/${applicationId}/guilds/${guildId}/commands/permissions`,options
    );
  }

export const getGuildApplicationCommandPermissions = <TData = AxiosResponse<CommandPermissionsResponse>>(
    applicationId: SnowflakeType,
    guildId: SnowflakeType,
    commandId: SnowflakeType, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/applications/${applicationId}/guilds/${guildId}/commands/${commandId}/permissions`,options
    );
  }

export const setGuildApplicationCommandPermissions = <TData = AxiosResponse<CommandPermissionsResponse>>(
    applicationId: SnowflakeType,
    guildId: SnowflakeType,
    commandId: SnowflakeType,
    setGuildApplicationCommandPermissionsBody: SetGuildApplicationCommandPermissionsBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.put(
      `/applications/${applicationId}/guilds/${guildId}/commands/${commandId}/permissions`,
      setGuildApplicationCommandPermissionsBody,options
    );
  }

export const addMyMessageReaction = <TData = AxiosResponse<void>>(
    channelId: SnowflakeType,
    messageId: SnowflakeType,
    emojiName: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.put(
      `/channels/${channelId}/messages/${messageId}/reactions/${emojiName}/@me`,undefined,options
    );
  }

export const deleteMyMessageReaction = <TData = AxiosResponse<void>>(
    channelId: SnowflakeType,
    messageId: SnowflakeType,
    emojiName: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.delete(
      `/channels/${channelId}/messages/${messageId}/reactions/${emojiName}/@me`,options
    );
  }

export const listPrivateArchivedThreads = <TData = AxiosResponse<ThreadsResponse>>(
    channelId: SnowflakeType,
    params?: ListPrivateArchivedThreadsParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/channels/${channelId}/threads/archived/private`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

export const listPublicArchivedThreads = <TData = AxiosResponse<ThreadsResponse>>(
    channelId: SnowflakeType,
    params?: ListPublicArchivedThreadsParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/channels/${channelId}/threads/archived/public`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

export const getApplicationUserRoleConnection = <TData = AxiosResponse<ApplicationUserRoleConnectionResponse>>(
    applicationId: SnowflakeType, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/users/@me/applications/${applicationId}/role-connection`,options
    );
  }

export const updateApplicationUserRoleConnection = <TData = AxiosResponse<ApplicationUserRoleConnectionResponse>>(
    applicationId: SnowflakeType,
    updateApplicationUserRoleConnectionBody: UpdateApplicationUserRoleConnectionBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.put(
      `/users/@me/applications/${applicationId}/role-connection`,
      updateApplicationUserRoleConnectionBody,options
    );
  }

export const deleteApplicationUserRoleConnection = <TData = AxiosResponse<void>>(
    applicationId: SnowflakeType, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.delete(
      `/users/@me/applications/${applicationId}/role-connection`,options
    );
  }

export const getMyGuildMember = <TData = AxiosResponse<PrivateGuildMemberResponse>>(
    guildId: SnowflakeType, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/users/@me/guilds/${guildId}/member`,options
    );
  }

export const getApplicationRoleConnectionsMetadata = <TData = AxiosResponse<GetApplicationRoleConnectionsMetadata200>>(
    applicationId: SnowflakeType, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/applications/${applicationId}/role-connections/metadata`,options
    );
  }

export const updateApplicationRoleConnectionsMetadata = <TData = AxiosResponse<UpdateApplicationRoleConnectionsMetadata200>>(
    applicationId: SnowflakeType,
    updateApplicationRoleConnectionsMetadataBody: UpdateApplicationRoleConnectionsMetadataBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.put(
      `/applications/${applicationId}/role-connections/metadata`,
      updateApplicationRoleConnectionsMetadataBody,options
    );
  }

export const consumeEntitlement = <TData = AxiosResponse<void>>(
    applicationId: SnowflakeType,
    entitlementId: SnowflakeType, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/applications/${applicationId}/entitlements/${entitlementId}/consume`,undefined,options
    );
  }

export const getGuildApplicationCommand = <TData = AxiosResponse<ApplicationCommandResponse>>(
    applicationId: SnowflakeType,
    guildId: SnowflakeType,
    commandId: SnowflakeType, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/applications/${applicationId}/guilds/${guildId}/commands/${commandId}`,options
    );
  }

export const deleteGuildApplicationCommand = <TData = AxiosResponse<void>>(
    applicationId: SnowflakeType,
    guildId: SnowflakeType,
    commandId: SnowflakeType, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.delete(
      `/applications/${applicationId}/guilds/${guildId}/commands/${commandId}`,options
    );
  }

export const updateGuildApplicationCommand = <TData = AxiosResponse<ApplicationCommandResponse>>(
    applicationId: SnowflakeType,
    guildId: SnowflakeType,
    commandId: SnowflakeType,
    applicationCommandPatchRequestPartial: ApplicationCommandPatchRequestPartial, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.patch(
      `/applications/${applicationId}/guilds/${guildId}/commands/${commandId}`,
      applicationCommandPatchRequestPartial,options
    );
  }

export const listGuildApplicationCommands = <TData = AxiosResponse<ListGuildApplicationCommands200>>(
    applicationId: SnowflakeType,
    guildId: SnowflakeType,
    params?: ListGuildApplicationCommandsParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/applications/${applicationId}/guilds/${guildId}/commands`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

export const bulkSetGuildApplicationCommands = <TData = AxiosResponse<BulkSetGuildApplicationCommands200>>(
    applicationId: SnowflakeType,
    guildId: SnowflakeType,
    bulkSetGuildApplicationCommandsBody: BulkSetGuildApplicationCommandsBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.put(
      `/applications/${applicationId}/guilds/${guildId}/commands`,
      bulkSetGuildApplicationCommandsBody,options
    );
  }

export const createGuildApplicationCommand = <TData = AxiosResponse<ApplicationCommandResponse>>(
    applicationId: SnowflakeType,
    guildId: SnowflakeType,
    applicationCommandCreateRequest: ApplicationCommandCreateRequest, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/applications/${applicationId}/guilds/${guildId}/commands`,
      applicationCommandCreateRequest,options
    );
  }

export const joinThread = <TData = AxiosResponse<void>>(
    channelId: SnowflakeType, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.put(
      `/channels/${channelId}/thread-members/@me`,undefined,options
    );
  }

export const leaveThread = <TData = AxiosResponse<void>>(
    channelId: SnowflakeType, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.delete(
      `/channels/${channelId}/thread-members/@me`,options
    );
  }

export const bulkDeleteMessages = <TData = AxiosResponse<void>>(
    channelId: SnowflakeType,
    bulkDeleteMessagesBody: BulkDeleteMessagesBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/channels/${channelId}/messages/bulk-delete`,
      bulkDeleteMessagesBody,options
    );
  }

export const deleteUserMessageReaction = <TData = AxiosResponse<void>>(
    channelId: SnowflakeType,
    messageId: SnowflakeType,
    emojiName: string,
    userId: SnowflakeType, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.delete(
      `/channels/${channelId}/messages/${messageId}/reactions/${emojiName}/${userId}`,options
    );
  }

export const listMessageReactionsByEmoji = <TData = AxiosResponse<UserResponse[]>>(
    channelId: SnowflakeType,
    messageId: SnowflakeType,
    emojiName: string,
    params?: ListMessageReactionsByEmojiParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/channels/${channelId}/messages/${messageId}/reactions/${emojiName}`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

export const deleteAllMessageReactionsByEmoji = <TData = AxiosResponse<void>>(
    channelId: SnowflakeType,
    messageId: SnowflakeType,
    emojiName: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.delete(
      `/channels/${channelId}/messages/${messageId}/reactions/${emojiName}`,options
    );
  }

export const deleteAllMessageReactions = <TData = AxiosResponse<void>>(
    channelId: SnowflakeType,
    messageId: SnowflakeType, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.delete(
      `/channels/${channelId}/messages/${messageId}/reactions`,options
    );
  }

export const crosspostMessage = <TData = AxiosResponse<MessageResponse>>(
    channelId: SnowflakeType,
    messageId: SnowflakeType, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/channels/${channelId}/messages/${messageId}/crosspost`,undefined,options
    );
  }

export const createThreadFromMessage = <TData = AxiosResponse<ThreadResponse>>(
    channelId: SnowflakeType,
    messageId: SnowflakeType,
    createTextThreadWithMessageRequest: CreateTextThreadWithMessageRequest, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/channels/${channelId}/messages/${messageId}/threads`,
      createTextThreadWithMessageRequest,options
    );
  }

export const getAnswerVoters = <TData = AxiosResponse<PollAnswerDetailsResponse>>(
    channelId: SnowflakeType,
    messageId: SnowflakeType,
    answerId: number,
    params?: GetAnswerVotersParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/channels/${channelId}/polls/${messageId}/answers/${answerId}`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

export const pollExpire = <TData = AxiosResponse<MessageResponse>>(
    channelId: SnowflakeType,
    messageId: SnowflakeType, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/channels/${channelId}/polls/${messageId}/expire`,undefined,options
    );
  }

export const getOriginalWebhookMessage = <TData = AxiosResponse<MessageResponse>>(
    webhookId: SnowflakeType,
    webhookToken: string,
    params?: GetOriginalWebhookMessageParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/webhooks/${webhookId}/${webhookToken}/messages/@original`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

export const deleteOriginalWebhookMessage = <TData = AxiosResponse<void>>(
    webhookId: SnowflakeType,
    webhookToken: string,
    params?: DeleteOriginalWebhookMessageParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.delete(
      `/webhooks/${webhookId}/${webhookToken}/messages/@original`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

export const updateOriginalWebhookMessage = <TData = AxiosResponse<MessageResponse>>(
    webhookId: SnowflakeType,
    webhookToken: string,
    updateOriginalWebhookMessageBody: IncomingWebhookUpdateRequestPartial | UpdateOriginalWebhookMessageBodyThree,
    params?: UpdateOriginalWebhookMessageParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.patch(
      `/webhooks/${webhookId}/${webhookToken}/messages/@original`,
      updateOriginalWebhookMessageBody,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

export const listGuildScheduledEventUsers = <TData = AxiosResponse<ListGuildScheduledEventUsers200>>(
    guildId: SnowflakeType,
    guildScheduledEventId: SnowflakeType,
    params?: ListGuildScheduledEventUsersParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/guilds/${guildId}/scheduled-events/${guildScheduledEventId}/users`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

export const getAutoModerationRule = <TData = AxiosResponse<GetAutoModerationRule200>>(
    guildId: SnowflakeType,
    ruleId: SnowflakeType, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/guilds/${guildId}/auto-moderation/rules/${ruleId}`,options
    );
  }

export const deleteAutoModerationRule = <TData = AxiosResponse<void>>(
    guildId: SnowflakeType,
    ruleId: SnowflakeType, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.delete(
      `/guilds/${guildId}/auto-moderation/rules/${ruleId}`,options
    );
  }

export const updateAutoModerationRule = <TData = AxiosResponse<UpdateAutoModerationRule200>>(
    guildId: SnowflakeType,
    ruleId: SnowflakeType,
    updateAutoModerationRuleBody: UpdateAutoModerationRuleBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.patch(
      `/guilds/${guildId}/auto-moderation/rules/${ruleId}`,
      updateAutoModerationRuleBody,options
    );
  }

export const listAutoModerationRules = <TData = AxiosResponse<ListAutoModerationRules200>>(
    guildId: SnowflakeType, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/guilds/${guildId}/auto-moderation/rules`,options
    );
  }

export const createAutoModerationRule = <TData = AxiosResponse<CreateAutoModerationRule200>>(
    guildId: SnowflakeType,
    createAutoModerationRuleBody: CreateAutoModerationRuleBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/guilds/${guildId}/auto-moderation/rules`,
      createAutoModerationRuleBody,options
    );
  }

export const getSelfVoiceState = <TData = AxiosResponse<VoiceStateResponse>>(
    guildId: SnowflakeType, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/guilds/${guildId}/voice-states/@me`,options
    );
  }

export const updateSelfVoiceState = <TData = AxiosResponse<void>>(
    guildId: SnowflakeType,
    updateSelfVoiceStateBody: UpdateSelfVoiceStateBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.patch(
      `/guilds/${guildId}/voice-states/@me`,
      updateSelfVoiceStateBody,options
    );
  }

export const searchGuildMembers = <TData = AxiosResponse<GuildMemberResponse[]>>(
    guildId: SnowflakeType,
    params: SearchGuildMembersParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/guilds/${guildId}/members/search`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

export const getActiveGuildThreads = <TData = AxiosResponse<ThreadsResponse>>(
    guildId: SnowflakeType, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/guilds/${guildId}/threads/active`,options
    );
  }

export const updateMyGuildMember = <TData = AxiosResponse<PrivateGuildMemberResponse>>(
    guildId: SnowflakeType,
    updateMyGuildMemberBody: UpdateMyGuildMemberBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.patch(
      `/guilds/${guildId}/members/@me`,
      updateMyGuildMemberBody,options
    );
  }

export const addGuildMemberRole = <TData = AxiosResponse<void>>(
    guildId: SnowflakeType,
    userId: SnowflakeType,
    roleId: SnowflakeType, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.put(
      `/guilds/${guildId}/members/${userId}/roles/${roleId}`,undefined,options
    );
  }

export const deleteGuildMemberRole = <TData = AxiosResponse<void>>(
    guildId: SnowflakeType,
    userId: SnowflakeType,
    roleId: SnowflakeType, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.delete(
      `/guilds/${guildId}/members/${userId}/roles/${roleId}`,options
    );
  }

export const leaveGuild = <TData = AxiosResponse<void>>(
    guildId: SnowflakeType, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.delete(
      `/users/@me/guilds/${guildId}`,options
    );
  }

export const applicationsGetActivityInstance = <TData = AxiosResponse<EmbeddedActivityInstance>>(
    applicationId: SnowflakeType,
    instanceId: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/applications/${applicationId}/activity-instances/${instanceId}`,options
    );
  }

export const getEntitlement = <TData = AxiosResponse<EntitlementResponse>>(
    applicationId: SnowflakeType,
    entitlementId: SnowflakeType, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/applications/${applicationId}/entitlements/${entitlementId}`,options
    );
  }

export const deleteEntitlement = <TData = AxiosResponse<void>>(
    applicationId: SnowflakeType,
    entitlementId: SnowflakeType, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.delete(
      `/applications/${applicationId}/entitlements/${entitlementId}`,options
    );
  }

export const getEntitlements = <TData = AxiosResponse<GetEntitlements200Item[]>>(
    applicationId: SnowflakeType,
    params: GetEntitlementsParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/applications/${applicationId}/entitlements`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

export const createEntitlement = <TData = AxiosResponse<EntitlementResponse>>(
    applicationId: SnowflakeType,
    createEntitlementRequestData: CreateEntitlementRequestData, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/applications/${applicationId}/entitlements`,
      createEntitlementRequestData,options
    );
  }

export const uploadApplicationAttachment = <TData = AxiosResponse<ActivitiesAttachmentResponse>>(
    applicationId: SnowflakeType,
    uploadApplicationAttachmentBody: UploadApplicationAttachmentBody, options?: AxiosRequestConfig
 ): Promise<TData> => {const formData = new FormData();
formData.append('file', uploadApplicationAttachmentBody.file)

    return axios.post(
      `/applications/${applicationId}/attachment`,
      formData,options
    );
  }

export const getApplicationCommand = <TData = AxiosResponse<ApplicationCommandResponse>>(
    applicationId: SnowflakeType,
    commandId: SnowflakeType, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/applications/${applicationId}/commands/${commandId}`,options
    );
  }

export const deleteApplicationCommand = <TData = AxiosResponse<void>>(
    applicationId: SnowflakeType,
    commandId: SnowflakeType, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.delete(
      `/applications/${applicationId}/commands/${commandId}`,options
    );
  }

export const updateApplicationCommand = <TData = AxiosResponse<ApplicationCommandResponse>>(
    applicationId: SnowflakeType,
    commandId: SnowflakeType,
    applicationCommandPatchRequestPartial: ApplicationCommandPatchRequestPartial, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.patch(
      `/applications/${applicationId}/commands/${commandId}`,
      applicationCommandPatchRequestPartial,options
    );
  }

export const listApplicationCommands = <TData = AxiosResponse<ListApplicationCommands200>>(
    applicationId: SnowflakeType,
    params?: ListApplicationCommandsParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/applications/${applicationId}/commands`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

export const bulkSetApplicationCommands = <TData = AxiosResponse<BulkSetApplicationCommands200>>(
    applicationId: SnowflakeType,
    bulkSetApplicationCommandsBody: BulkSetApplicationCommandsBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.put(
      `/applications/${applicationId}/commands`,
      bulkSetApplicationCommandsBody,options
    );
  }

export const createApplicationCommand = <TData = AxiosResponse<ApplicationCommandResponse>>(
    applicationId: SnowflakeType,
    applicationCommandCreateRequest: ApplicationCommandCreateRequest, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/applications/${applicationId}/commands`,
      applicationCommandCreateRequest,options
    );
  }

export const getApplicationEmoji = <TData = AxiosResponse<EmojiResponse>>(
    applicationId: SnowflakeType,
    emojiId: SnowflakeType, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/applications/${applicationId}/emojis/${emojiId}`,options
    );
  }

export const deleteApplicationEmoji = <TData = AxiosResponse<void>>(
    applicationId: SnowflakeType,
    emojiId: SnowflakeType, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.delete(
      `/applications/${applicationId}/emojis/${emojiId}`,options
    );
  }

export const updateApplicationEmoji = <TData = AxiosResponse<EmojiResponse>>(
    applicationId: SnowflakeType,
    emojiId: SnowflakeType,
    updateApplicationEmojiBody: UpdateApplicationEmojiBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.patch(
      `/applications/${applicationId}/emojis/${emojiId}`,
      updateApplicationEmojiBody,options
    );
  }

export const listApplicationEmojis = <TData = AxiosResponse<ListApplicationEmojisResponse>>(
    applicationId: SnowflakeType, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/applications/${applicationId}/emojis`,options
    );
  }

export const createApplicationEmoji = <TData = AxiosResponse<EmojiResponse>>(
    applicationId: SnowflakeType,
    createApplicationEmojiBody: CreateApplicationEmojiBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/applications/${applicationId}/emojis`,
      createApplicationEmojiBody,options
    );
  }

export const createInteractionResponse = <TData = AxiosResponse<InteractionCallbackResponse | void>>(
    interactionId: SnowflakeType,
    interactionToken: string,
    createInteractionResponseBody: CreateInteractionResponseBodyOne | CreateInteractionResponseBodyTwo | CreateInteractionResponseBodyThree,
    params?: CreateInteractionResponseParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/interactions/${interactionId}/${interactionToken}/callback`,
      createInteractionResponseBody,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

export const sendSoundboardSound = <TData = AxiosResponse<void>>(
    channelId: SnowflakeType,
    soundboardSoundSendRequest: SoundboardSoundSendRequest, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/channels/${channelId}/send-soundboard-sound`,
      soundboardSoundSendRequest,options
    );
  }

export const getThreadMember = <TData = AxiosResponse<ThreadMemberResponse>>(
    channelId: SnowflakeType,
    userId: SnowflakeType,
    params?: GetThreadMemberParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/channels/${channelId}/thread-members/${userId}`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

export const addThreadMember = <TData = AxiosResponse<void>>(
    channelId: SnowflakeType,
    userId: SnowflakeType, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.put(
      `/channels/${channelId}/thread-members/${userId}`,undefined,options
    );
  }

export const deleteThreadMember = <TData = AxiosResponse<void>>(
    channelId: SnowflakeType,
    userId: SnowflakeType, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.delete(
      `/channels/${channelId}/thread-members/${userId}`,options
    );
  }

export const listThreadMembers = <TData = AxiosResponse<ThreadMemberResponse[]>>(
    channelId: SnowflakeType,
    params?: ListThreadMembersParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/channels/${channelId}/thread-members`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

export const setChannelPermissionOverwrite = <TData = AxiosResponse<void>>(
    channelId: SnowflakeType,
    overwriteId: SnowflakeType,
    setChannelPermissionOverwriteBody: SetChannelPermissionOverwriteBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.put(
      `/channels/${channelId}/permissions/${overwriteId}`,
      setChannelPermissionOverwriteBody,options
    );
  }

export const deleteChannelPermissionOverwrite = <TData = AxiosResponse<void>>(
    channelId: SnowflakeType,
    overwriteId: SnowflakeType, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.delete(
      `/channels/${channelId}/permissions/${overwriteId}`,options
    );
  }

export const addGroupDmUser = <TData = AxiosResponse<AddGroupDmUser201 | void>>(
    channelId: SnowflakeType,
    userId: SnowflakeType,
    addGroupDmUserBody: AddGroupDmUserBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.put(
      `/channels/${channelId}/recipients/${userId}`,
      addGroupDmUserBody,options
    );
  }

export const deleteGroupDmUser = <TData = AxiosResponse<void>>(
    channelId: SnowflakeType,
    userId: SnowflakeType, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.delete(
      `/channels/${channelId}/recipients/${userId}`,options
    );
  }

export const followChannel = <TData = AxiosResponse<ChannelFollowerResponse>>(
    channelId: SnowflakeType,
    followChannelBody: FollowChannelBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/channels/${channelId}/followers`,
      followChannelBody,options
    );
  }

export const getMessage = <TData = AxiosResponse<MessageResponse>>(
    channelId: SnowflakeType,
    messageId: SnowflakeType, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/channels/${channelId}/messages/${messageId}`,options
    );
  }

export const deleteMessage = <TData = AxiosResponse<void>>(
    channelId: SnowflakeType,
    messageId: SnowflakeType, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.delete(
      `/channels/${channelId}/messages/${messageId}`,options
    );
  }

export const updateMessage = <TData = AxiosResponse<MessageResponse>>(
    channelId: SnowflakeType,
    messageId: SnowflakeType,
    updateMessageBody: MessageEditRequestPartial | UpdateMessageBodyThree, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.patch(
      `/channels/${channelId}/messages/${messageId}`,
      updateMessageBody,options
    );
  }

export const listMessages = <TData = AxiosResponse<ListMessages200>>(
    channelId: SnowflakeType,
    params?: ListMessagesParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/channels/${channelId}/messages`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

export const createMessage = <TData = AxiosResponse<MessageResponse>>(
    channelId: SnowflakeType,
    createMessageBody: MessageCreateRequest | CreateMessageBodyThree, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/channels/${channelId}/messages`,
      createMessageBody,options
    );
  }

export const listChannelWebhooks = <TData = AxiosResponse<ListChannelWebhooks200>>(
    channelId: SnowflakeType, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/channels/${channelId}/webhooks`,options
    );
  }

export const createWebhook = <TData = AxiosResponse<GuildIncomingWebhookResponse>>(
    channelId: SnowflakeType,
    createWebhookBody: CreateWebhookBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/channels/${channelId}/webhooks`,
      createWebhookBody,options
    );
  }

export const listChannelInvites = <TData = AxiosResponse<ListChannelInvites200>>(
    channelId: SnowflakeType, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/channels/${channelId}/invites`,options
    );
  }

export const createChannelInvite = <TData = AxiosResponse<CreateChannelInvite200 | void>>(
    channelId: SnowflakeType,
    createChannelInviteBody: CreateChannelInviteBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/channels/${channelId}/invites`,
      createChannelInviteBody,options
    );
  }

export const createThread = <TData = AxiosResponse<CreatedThreadResponse>>(
    channelId: SnowflakeType,
    createThreadBody: CreateThreadBodyOne | CreateThreadBodyTwo | CreateThreadBodyThree, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/channels/${channelId}/threads`,
      createThreadBody,options
    );
  }

export const triggerTypingIndicator = <TData = AxiosResponse<TypingIndicatorResponse | void>>(
    channelId: SnowflakeType, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/channels/${channelId}/typing`,undefined,options
    );
  }

export const pinMessage = <TData = AxiosResponse<void>>(
    channelId: SnowflakeType,
    messageId: SnowflakeType, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.put(
      `/channels/${channelId}/pins/${messageId}`,undefined,options
    );
  }

export const unpinMessage = <TData = AxiosResponse<void>>(
    channelId: SnowflakeType,
    messageId: SnowflakeType, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.delete(
      `/channels/${channelId}/pins/${messageId}`,options
    );
  }

export const listPinnedMessages = <TData = AxiosResponse<ListPinnedMessages200>>(
    channelId: SnowflakeType, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/channels/${channelId}/pins`,options
    );
  }

export const getWebhookMessage = <TData = AxiosResponse<MessageResponse>>(
    webhookId: SnowflakeType,
    webhookToken: string,
    messageId: SnowflakeType,
    params?: GetWebhookMessageParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/webhooks/${webhookId}/${webhookToken}/messages/${messageId}`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

export const deleteWebhookMessage = <TData = AxiosResponse<void>>(
    webhookId: SnowflakeType,
    webhookToken: string,
    messageId: SnowflakeType,
    params?: DeleteWebhookMessageParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.delete(
      `/webhooks/${webhookId}/${webhookToken}/messages/${messageId}`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

export const updateWebhookMessage = <TData = AxiosResponse<MessageResponse>>(
    webhookId: SnowflakeType,
    webhookToken: string,
    messageId: SnowflakeType,
    updateWebhookMessageBody: IncomingWebhookUpdateRequestPartial | UpdateWebhookMessageBodyThree,
    params?: UpdateWebhookMessageParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.patch(
      `/webhooks/${webhookId}/${webhookToken}/messages/${messageId}`,
      updateWebhookMessageBody,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

export const executeGithubCompatibleWebhook = <TData = AxiosResponse<void>>(
    webhookId: SnowflakeType,
    webhookToken: string,
    githubWebhook: GithubWebhook,
    params?: ExecuteGithubCompatibleWebhookParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/webhooks/${webhookId}/${webhookToken}/github`,
      githubWebhook,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

export const executeSlackCompatibleWebhook = <TData = AxiosResponse<ExecuteSlackCompatibleWebhook200>>(
    webhookId: SnowflakeType,
    webhookToken: string,
    slackWebhook: SlackWebhook,
    params?: ExecuteSlackCompatibleWebhookParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/webhooks/${webhookId}/${webhookToken}/slack`,
      slackWebhook,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

export const getGuildTemplate = <TData = AxiosResponse<GuildTemplateResponse>>(
    code: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/guilds/templates/${code}`,options
    );
  }

export const createGuildFromTemplate = <TData = AxiosResponse<GuildResponse>>(
    code: string,
    createGuildFromTemplateBody: CreateGuildFromTemplateBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/guilds/templates/${code}`,
      createGuildFromTemplateBody,options
    );
  }

export const getGuildNewMemberWelcome = <TData = AxiosResponse<GuildHomeSettingsResponse | void>>(
    guildId: SnowflakeType, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/guilds/${guildId}/new-member-welcome`,options
    );
  }

export const getGuildSoundboardSound = <TData = AxiosResponse<SoundboardSoundResponse>>(
    guildId: SnowflakeType,
    soundId: SnowflakeType, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/guilds/${guildId}/soundboard-sounds/${soundId}`,options
    );
  }

export const deleteGuildSoundboardSound = <TData = AxiosResponse<void>>(
    guildId: SnowflakeType,
    soundId: SnowflakeType, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.delete(
      `/guilds/${guildId}/soundboard-sounds/${soundId}`,options
    );
  }

export const updateGuildSoundboardSound = <TData = AxiosResponse<SoundboardSoundResponse>>(
    guildId: SnowflakeType,
    soundId: SnowflakeType,
    soundboardPatchRequestPartial: SoundboardPatchRequestPartial, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.patch(
      `/guilds/${guildId}/soundboard-sounds/${soundId}`,
      soundboardPatchRequestPartial,options
    );
  }

export const listGuildSoundboardSounds = <TData = AxiosResponse<ListGuildSoundboardSoundsResponse>>(
    guildId: SnowflakeType, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/guilds/${guildId}/soundboard-sounds`,options
    );
  }

export const createGuildSoundboardSound = <TData = AxiosResponse<SoundboardSoundResponse>>(
    guildId: SnowflakeType,
    soundboardCreateRequest: SoundboardCreateRequest, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/guilds/${guildId}/soundboard-sounds`,
      soundboardCreateRequest,options
    );
  }

export const getGuildScheduledEvent = <TData = AxiosResponse<GetGuildScheduledEvent200>>(
    guildId: SnowflakeType,
    guildScheduledEventId: SnowflakeType,
    params?: GetGuildScheduledEventParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/guilds/${guildId}/scheduled-events/${guildScheduledEventId}`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

export const deleteGuildScheduledEvent = <TData = AxiosResponse<void>>(
    guildId: SnowflakeType,
    guildScheduledEventId: SnowflakeType, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.delete(
      `/guilds/${guildId}/scheduled-events/${guildScheduledEventId}`,options
    );
  }

export const updateGuildScheduledEvent = <TData = AxiosResponse<UpdateGuildScheduledEvent200>>(
    guildId: SnowflakeType,
    guildScheduledEventId: SnowflakeType,
    updateGuildScheduledEventBody: UpdateGuildScheduledEventBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.patch(
      `/guilds/${guildId}/scheduled-events/${guildScheduledEventId}`,
      updateGuildScheduledEventBody,options
    );
  }

export const listGuildScheduledEvents = <TData = AxiosResponse<ListGuildScheduledEvents200>>(
    guildId: SnowflakeType,
    params?: ListGuildScheduledEventsParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/guilds/${guildId}/scheduled-events`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

export const createGuildScheduledEvent = <TData = AxiosResponse<CreateGuildScheduledEvent200>>(
    guildId: SnowflakeType,
    createGuildScheduledEventBody: CreateGuildScheduledEventBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/guilds/${guildId}/scheduled-events`,
      createGuildScheduledEventBody,options
    );
  }

export const getGuildWelcomeScreen = <TData = AxiosResponse<GuildWelcomeScreenResponse>>(
    guildId: SnowflakeType, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/guilds/${guildId}/welcome-screen`,options
    );
  }

export const updateGuildWelcomeScreen = <TData = AxiosResponse<GuildWelcomeScreenResponse>>(
    guildId: SnowflakeType,
    welcomeScreenPatchRequestPartial: WelcomeScreenPatchRequestPartial, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.patch(
      `/guilds/${guildId}/welcome-screen`,
      welcomeScreenPatchRequestPartial,options
    );
  }

export const getVoiceState = <TData = AxiosResponse<VoiceStateResponse>>(
    guildId: SnowflakeType,
    userId: SnowflakeType, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/guilds/${guildId}/voice-states/${userId}`,options
    );
  }

export const updateVoiceState = <TData = AxiosResponse<void>>(
    guildId: SnowflakeType,
    userId: SnowflakeType,
    updateVoiceStateBody: UpdateVoiceStateBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.patch(
      `/guilds/${guildId}/voice-states/${userId}`,
      updateVoiceStateBody,options
    );
  }

export const deleteGuildIntegration = <TData = AxiosResponse<void>>(
    guildId: SnowflakeType,
    integrationId: SnowflakeType, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.delete(
      `/guilds/${guildId}/integrations/${integrationId}`,options
    );
  }

export const listGuildIntegrations = <TData = AxiosResponse<ListGuildIntegrations200>>(
    guildId: SnowflakeType, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/guilds/${guildId}/integrations`,options
    );
  }

export const getGuildWidget = <TData = AxiosResponse<WidgetResponse>>(
    guildId: SnowflakeType, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/guilds/${guildId}/widget.json`,options
    );
  }

export const getGuildsOnboarding = <TData = AxiosResponse<UserGuildOnboardingResponse>>(
    guildId: SnowflakeType, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/guilds/${guildId}/onboarding`,options
    );
  }

export const putGuildsOnboarding = <TData = AxiosResponse<GuildOnboardingResponse>>(
    guildId: SnowflakeType,
    updateGuildOnboardingRequest: UpdateGuildOnboardingRequest, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.put(
      `/guilds/${guildId}/onboarding`,
      updateGuildOnboardingRequest,options
    );
  }

export const getGuildVanityUrl = <TData = AxiosResponse<VanityURLResponse>>(
    guildId: SnowflakeType, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/guilds/${guildId}/vanity-url`,options
    );
  }

export const listGuildAuditLogEntries = <TData = AxiosResponse<GuildAuditLogResponse>>(
    guildId: SnowflakeType,
    params?: ListGuildAuditLogEntriesParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/guilds/${guildId}/audit-logs`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

export const getGuildWidgetPng = <TData = AxiosResponse<string>>(
    guildId: SnowflakeType,
    params?: GetGuildWidgetPngParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/guilds/${guildId}/widget.png`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

export const syncGuildTemplate = <TData = AxiosResponse<GuildTemplateResponse>>(
    guildId: SnowflakeType,
    code: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.put(
      `/guilds/${guildId}/templates/${code}`,undefined,options
    );
  }

export const deleteGuildTemplate = <TData = AxiosResponse<GuildTemplateResponse>>(
    guildId: SnowflakeType,
    code: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.delete(
      `/guilds/${guildId}/templates/${code}`,options
    );
  }

export const updateGuildTemplate = <TData = AxiosResponse<GuildTemplateResponse>>(
    guildId: SnowflakeType,
    code: string,
    updateGuildTemplateBody: UpdateGuildTemplateBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.patch(
      `/guilds/${guildId}/templates/${code}`,
      updateGuildTemplateBody,options
    );
  }

export const listGuildTemplates = <TData = AxiosResponse<ListGuildTemplates200>>(
    guildId: SnowflakeType, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/guilds/${guildId}/templates`,options
    );
  }

export const createGuildTemplate = <TData = AxiosResponse<GuildTemplateResponse>>(
    guildId: SnowflakeType,
    createGuildTemplateBody: CreateGuildTemplateBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/guilds/${guildId}/templates`,
      createGuildTemplateBody,options
    );
  }

export const getGuildSticker = <TData = AxiosResponse<GuildStickerResponse>>(
    guildId: SnowflakeType,
    stickerId: SnowflakeType, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/guilds/${guildId}/stickers/${stickerId}`,options
    );
  }

export const deleteGuildSticker = <TData = AxiosResponse<void>>(
    guildId: SnowflakeType,
    stickerId: SnowflakeType, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.delete(
      `/guilds/${guildId}/stickers/${stickerId}`,options
    );
  }

export const updateGuildSticker = <TData = AxiosResponse<GuildStickerResponse>>(
    guildId: SnowflakeType,
    stickerId: SnowflakeType,
    updateGuildStickerBody: UpdateGuildStickerBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.patch(
      `/guilds/${guildId}/stickers/${stickerId}`,
      updateGuildStickerBody,options
    );
  }

export const bulkBanUsersFromGuild = <TData = AxiosResponse<BulkBanUsersResponse>>(
    guildId: SnowflakeType,
    bulkBanUsersFromGuildBody: BulkBanUsersFromGuildBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/guilds/${guildId}/bulk-ban`,
      bulkBanUsersFromGuildBody,options
    );
  }

export const listGuildStickers = <TData = AxiosResponse<GuildStickerResponse[]>>(
    guildId: SnowflakeType, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/guilds/${guildId}/stickers`,options
    );
  }

export const createGuildSticker = <TData = AxiosResponse<GuildStickerResponse>>(
    guildId: SnowflakeType,
    createGuildStickerBody: CreateGuildStickerBody, options?: AxiosRequestConfig
 ): Promise<TData> => {const formData = new FormData();
formData.append('name', createGuildStickerBody.name)
formData.append('tags', createGuildStickerBody.tags)
if(createGuildStickerBody.description !== undefined && createGuildStickerBody.description !== null) {
 formData.append('description', createGuildStickerBody.description)
 }
formData.append('file', createGuildStickerBody.file)

    return axios.post(
      `/guilds/${guildId}/stickers`,
      formData,options
    );
  }

export const getGuildWebhooks = <TData = AxiosResponse<GetGuildWebhooks200>>(
    guildId: SnowflakeType, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/guilds/${guildId}/webhooks`,options
    );
  }

export const listGuildChannels = <TData = AxiosResponse<ListGuildChannels200>>(
    guildId: SnowflakeType, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/guilds/${guildId}/channels`,options
    );
  }

export const createGuildChannel = <TData = AxiosResponse<GuildChannelResponse>>(
    guildId: SnowflakeType,
    createGuildChannelRequest: CreateGuildChannelRequest, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/guilds/${guildId}/channels`,
      createGuildChannelRequest,options
    );
  }

export const bulkUpdateGuildChannels = <TData = AxiosResponse<void>>(
    guildId: SnowflakeType,
    bulkUpdateGuildChannelsBodyItem: BulkUpdateGuildChannelsBodyItem[], options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.patch(
      `/guilds/${guildId}/channels`,
      bulkUpdateGuildChannelsBodyItem,options
    );
  }

export const getGuildMember = <TData = AxiosResponse<GuildMemberResponse>>(
    guildId: SnowflakeType,
    userId: SnowflakeType, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/guilds/${guildId}/members/${userId}`,options
    );
  }

export const addGuildMember = <TData = AxiosResponse<GuildMemberResponse | void>>(
    guildId: SnowflakeType,
    userId: SnowflakeType,
    addGuildMemberBody: AddGuildMemberBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.put(
      `/guilds/${guildId}/members/${userId}`,
      addGuildMemberBody,options
    );
  }

export const deleteGuildMember = <TData = AxiosResponse<void>>(
    guildId: SnowflakeType,
    userId: SnowflakeType, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.delete(
      `/guilds/${guildId}/members/${userId}`,options
    );
  }

export const updateGuildMember = <TData = AxiosResponse<GuildMemberResponse | void>>(
    guildId: SnowflakeType,
    userId: SnowflakeType,
    updateGuildMemberBody: UpdateGuildMemberBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.patch(
      `/guilds/${guildId}/members/${userId}`,
      updateGuildMemberBody,options
    );
  }

export const listGuildMembers = <TData = AxiosResponse<GuildMemberResponse[]>>(
    guildId: SnowflakeType,
    params?: ListGuildMembersParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/guilds/${guildId}/members`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

export const getGuildPreview = <TData = AxiosResponse<GuildPreviewResponse>>(
    guildId: SnowflakeType, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/guilds/${guildId}/preview`,options
    );
  }

export const listGuildInvites = <TData = AxiosResponse<ListGuildInvites200>>(
    guildId: SnowflakeType, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/guilds/${guildId}/invites`,options
    );
  }

export const listGuildVoiceRegions = <TData = AxiosResponse<ListGuildVoiceRegions200>>(
    guildId: SnowflakeType, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/guilds/${guildId}/regions`,options
    );
  }

export const getGuildEmoji = <TData = AxiosResponse<EmojiResponse>>(
    guildId: SnowflakeType,
    emojiId: SnowflakeType, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/guilds/${guildId}/emojis/${emojiId}`,options
    );
  }

export const deleteGuildEmoji = <TData = AxiosResponse<void>>(
    guildId: SnowflakeType,
    emojiId: SnowflakeType, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.delete(
      `/guilds/${guildId}/emojis/${emojiId}`,options
    );
  }

export const updateGuildEmoji = <TData = AxiosResponse<EmojiResponse>>(
    guildId: SnowflakeType,
    emojiId: SnowflakeType,
    updateGuildEmojiBody: UpdateGuildEmojiBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.patch(
      `/guilds/${guildId}/emojis/${emojiId}`,
      updateGuildEmojiBody,options
    );
  }

export const listGuildEmojis = <TData = AxiosResponse<ListGuildEmojis200>>(
    guildId: SnowflakeType, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/guilds/${guildId}/emojis`,options
    );
  }

export const createGuildEmoji = <TData = AxiosResponse<EmojiResponse>>(
    guildId: SnowflakeType,
    createGuildEmojiBody: CreateGuildEmojiBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/guilds/${guildId}/emojis`,
      createGuildEmojiBody,options
    );
  }

export const getGuildWidgetSettings = <TData = AxiosResponse<WidgetSettingsResponse>>(
    guildId: SnowflakeType, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/guilds/${guildId}/widget`,options
    );
  }

export const updateGuildWidgetSettings = <TData = AxiosResponse<WidgetSettingsResponse>>(
    guildId: SnowflakeType,
    updateGuildWidgetSettingsBody: UpdateGuildWidgetSettingsBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.patch(
      `/guilds/${guildId}/widget`,
      updateGuildWidgetSettingsBody,options
    );
  }

export const getGuildRole = <TData = AxiosResponse<GuildRoleResponse>>(
    guildId: SnowflakeType,
    roleId: SnowflakeType, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/guilds/${guildId}/roles/${roleId}`,options
    );
  }

export const deleteGuildRole = <TData = AxiosResponse<void>>(
    guildId: SnowflakeType,
    roleId: SnowflakeType, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.delete(
      `/guilds/${guildId}/roles/${roleId}`,options
    );
  }

export const updateGuildRole = <TData = AxiosResponse<GuildRoleResponse>>(
    guildId: SnowflakeType,
    roleId: SnowflakeType,
    updateGuildRoleBody: UpdateGuildRoleBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.patch(
      `/guilds/${guildId}/roles/${roleId}`,
      updateGuildRoleBody,options
    );
  }

export const listGuildRoles = <TData = AxiosResponse<GuildRoleResponse[]>>(
    guildId: SnowflakeType, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/guilds/${guildId}/roles`,options
    );
  }

export const createGuildRole = <TData = AxiosResponse<GuildRoleResponse>>(
    guildId: SnowflakeType,
    createGuildRoleBody: CreateGuildRoleBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/guilds/${guildId}/roles`,
      createGuildRoleBody,options
    );
  }

export const bulkUpdateGuildRoles = <TData = AxiosResponse<GuildRoleResponse[]>>(
    guildId: SnowflakeType,
    bulkUpdateGuildRolesBodyItem: BulkUpdateGuildRolesBodyItem[], options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.patch(
      `/guilds/${guildId}/roles`,
      bulkUpdateGuildRolesBodyItem,options
    );
  }

export const previewPruneGuild = <TData = AxiosResponse<GuildPruneResponse>>(
    guildId: SnowflakeType,
    params?: PreviewPruneGuildParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/guilds/${guildId}/prune`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

export const pruneGuild = <TData = AxiosResponse<GuildPruneResponse>>(
    guildId: SnowflakeType,
    pruneGuildBody: PruneGuildBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/guilds/${guildId}/prune`,
      pruneGuildBody,options
    );
  }

export const getGuildBan = <TData = AxiosResponse<GuildBanResponse>>(
    guildId: SnowflakeType,
    userId: SnowflakeType, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/guilds/${guildId}/bans/${userId}`,options
    );
  }

export const banUserFromGuild = <TData = AxiosResponse<void>>(
    guildId: SnowflakeType,
    userId: SnowflakeType,
    banUserFromGuildBody: BanUserFromGuildBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.put(
      `/guilds/${guildId}/bans/${userId}`,
      banUserFromGuildBody,options
    );
  }

export const unbanUserFromGuild = <TData = AxiosResponse<void>>(
    guildId: SnowflakeType,
    userId: SnowflakeType, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.delete(
      `/guilds/${guildId}/bans/${userId}`,options
    );
  }

export const listGuildBans = <TData = AxiosResponse<ListGuildBans200>>(
    guildId: SnowflakeType,
    params?: ListGuildBansParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/guilds/${guildId}/bans`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

export const setGuildMfaLevel = <TData = AxiosResponse<GuildMFALevelResponse>>(
    guildId: SnowflakeType,
    setGuildMfaLevelBody: SetGuildMfaLevelBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/guilds/${guildId}/mfa`,
      setGuildMfaLevelBody,options
    );
  }

export const getStageInstance = <TData = AxiosResponse<StageInstanceResponse>>(
    channelId: SnowflakeType, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/stage-instances/${channelId}`,options
    );
  }

export const deleteStageInstance = <TData = AxiosResponse<void>>(
    channelId: SnowflakeType, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.delete(
      `/stage-instances/${channelId}`,options
    );
  }

export const updateStageInstance = <TData = AxiosResponse<StageInstanceResponse>>(
    channelId: SnowflakeType,
    updateStageInstanceBody: UpdateStageInstanceBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.patch(
      `/stage-instances/${channelId}`,
      updateStageInstanceBody,options
    );
  }

export const getStickerPack = <TData = AxiosResponse<StickerPackResponse>>(
    packId: SnowflakeType, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/sticker-packs/${packId}`,options
    );
  }

export const getApplication = <TData = AxiosResponse<PrivateApplicationResponse>>(
    applicationId: SnowflakeType, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/applications/${applicationId}`,options
    );
  }

export const updateApplication = <TData = AxiosResponse<PrivateApplicationResponse>>(
    applicationId: SnowflakeType,
    applicationFormPartial: ApplicationFormPartial, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.patch(
      `/applications/${applicationId}`,
      applicationFormPartial,options
    );
  }

export const getWebhookByToken = <TData = AxiosResponse<GetWebhookByToken200>>(
    webhookId: SnowflakeType,
    webhookToken: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/webhooks/${webhookId}/${webhookToken}`,options
    );
  }

export const executeWebhook = <TData = AxiosResponse<MessageResponse | void>>(
    webhookId: SnowflakeType,
    webhookToken: string,
    executeWebhookBody: ExecuteWebhookBodyOne | ExecuteWebhookBodyTwo | ExecuteWebhookBodyThree,
    params?: ExecuteWebhookParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/webhooks/${webhookId}/${webhookToken}`,
      executeWebhookBody,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

export const deleteWebhookByToken = <TData = AxiosResponse<void>>(
    webhookId: SnowflakeType,
    webhookToken: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.delete(
      `/webhooks/${webhookId}/${webhookToken}`,options
    );
  }

export const updateWebhookByToken = <TData = AxiosResponse<UpdateWebhookByToken200>>(
    webhookId: SnowflakeType,
    webhookToken: string,
    updateWebhookByTokenBody: UpdateWebhookByTokenBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.patch(
      `/webhooks/${webhookId}/${webhookToken}`,
      updateWebhookByTokenBody,options
    );
  }

export const getSticker = <TData = AxiosResponse<GetSticker200>>(
    stickerId: SnowflakeType, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/stickers/${stickerId}`,options
    );
  }

export const getWebhook = <TData = AxiosResponse<GetWebhook200>>(
    webhookId: SnowflakeType, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/webhooks/${webhookId}`,options
    );
  }

export const deleteWebhook = <TData = AxiosResponse<void>>(
    webhookId: SnowflakeType, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.delete(
      `/webhooks/${webhookId}`,options
    );
  }

export const updateWebhook = <TData = AxiosResponse<UpdateWebhook200>>(
    webhookId: SnowflakeType,
    updateWebhookBody: UpdateWebhookBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.patch(
      `/webhooks/${webhookId}`,
      updateWebhookBody,options
    );
  }

export const getChannel = <TData = AxiosResponse<GetChannel200>>(
    channelId: SnowflakeType, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/channels/${channelId}`,options
    );
  }

export const deleteChannel = <TData = AxiosResponse<DeleteChannel200>>(
    channelId: SnowflakeType, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.delete(
      `/channels/${channelId}`,options
    );
  }

export const updateChannel = <TData = AxiosResponse<UpdateChannel200>>(
    channelId: SnowflakeType,
    updateChannelBody: UpdateChannelBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.patch(
      `/channels/${channelId}`,
      updateChannelBody,options
    );
  }

export const inviteResolve = <TData = AxiosResponse<InviteResolve200>>(
    code: string,
    params?: InviteResolveParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/invites/${code}`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

export const inviteRevoke = <TData = AxiosResponse<InviteRevoke200>>(
    code: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.delete(
      `/invites/${code}`,options
    );
  }

export const getGuild = <TData = AxiosResponse<GuildWithCountsResponse>>(
    guildId: SnowflakeType,
    params?: GetGuildParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/guilds/${guildId}`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

export const deleteGuild = <TData = AxiosResponse<void>>(
    guildId: SnowflakeType, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.delete(
      `/guilds/${guildId}`,options
    );
  }

export const updateGuild = <TData = AxiosResponse<GuildResponse>>(
    guildId: SnowflakeType,
    guildPatchRequestPartial: GuildPatchRequestPartial, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.patch(
      `/guilds/${guildId}`,
      guildPatchRequestPartial,options
    );
  }

export const getUser = <TData = AxiosResponse<UserResponse>>(
    userId: SnowflakeType, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/users/${userId}`,options
    );
  }

export type GetMyOauth2ApplicationResult = AxiosResponse<PrivateApplicationResponse>
export type ListMyConnectionsResult = AxiosResponse<ListMyConnections200>
export type CreateDmResult = AxiosResponse<CreateDm200>
export type ListMyGuildsResult = AxiosResponse<ListMyGuilds200>
export type GetMyApplicationResult = AxiosResponse<PrivateApplicationResponse>
export type UpdateMyApplicationResult = AxiosResponse<PrivateApplicationResponse>
export type GetBotGatewayResult = AxiosResponse<GatewayBotResponse>
export type GetPublicKeysResult = AxiosResponse<OAuth2GetKeys>
export type GetMyOauth2AuthorizationResult = AxiosResponse<OAuth2GetAuthorizationResponse>
export type ListVoiceRegionsResult = AxiosResponse<ListVoiceRegions200>
export type GetMyUserResult = AxiosResponse<UserPIIResponse>
export type UpdateMyUserResult = AxiosResponse<UserPIIResponse>
export type GetSoundboardDefaultSoundsResult = AxiosResponse<SoundboardSoundResponse[]>
export type CreateStageInstanceResult = AxiosResponse<StageInstanceResponse>
export type ListStickerPacksResult = AxiosResponse<StickerPackCollectionResponse>
export type GetGatewayResult = AxiosResponse<GatewayResponse>
export type CreateGuildResult = AxiosResponse<GuildResponse>
export type ListMyPrivateArchivedThreadsResult = AxiosResponse<ThreadsResponse>
export type ListGuildApplicationCommandPermissionsResult = AxiosResponse<CommandPermissionsResponse[]>
export type GetGuildApplicationCommandPermissionsResult = AxiosResponse<CommandPermissionsResponse>
export type SetGuildApplicationCommandPermissionsResult = AxiosResponse<CommandPermissionsResponse>
export type AddMyMessageReactionResult = AxiosResponse<void>
export type DeleteMyMessageReactionResult = AxiosResponse<void>
export type ListPrivateArchivedThreadsResult = AxiosResponse<ThreadsResponse>
export type ListPublicArchivedThreadsResult = AxiosResponse<ThreadsResponse>
export type GetApplicationUserRoleConnectionResult = AxiosResponse<ApplicationUserRoleConnectionResponse>
export type UpdateApplicationUserRoleConnectionResult = AxiosResponse<ApplicationUserRoleConnectionResponse>
export type DeleteApplicationUserRoleConnectionResult = AxiosResponse<void>
export type GetMyGuildMemberResult = AxiosResponse<PrivateGuildMemberResponse>
export type GetApplicationRoleConnectionsMetadataResult = AxiosResponse<GetApplicationRoleConnectionsMetadata200>
export type UpdateApplicationRoleConnectionsMetadataResult = AxiosResponse<UpdateApplicationRoleConnectionsMetadata200>
export type ConsumeEntitlementResult = AxiosResponse<void>
export type GetGuildApplicationCommandResult = AxiosResponse<ApplicationCommandResponse>
export type DeleteGuildApplicationCommandResult = AxiosResponse<void>
export type UpdateGuildApplicationCommandResult = AxiosResponse<ApplicationCommandResponse>
export type ListGuildApplicationCommandsResult = AxiosResponse<ListGuildApplicationCommands200>
export type BulkSetGuildApplicationCommandsResult = AxiosResponse<BulkSetGuildApplicationCommands200>
export type CreateGuildApplicationCommandResult = AxiosResponse<ApplicationCommandResponse>
export type JoinThreadResult = AxiosResponse<void>
export type LeaveThreadResult = AxiosResponse<void>
export type BulkDeleteMessagesResult = AxiosResponse<void>
export type DeleteUserMessageReactionResult = AxiosResponse<void>
export type ListMessageReactionsByEmojiResult = AxiosResponse<UserResponse[]>
export type DeleteAllMessageReactionsByEmojiResult = AxiosResponse<void>
export type DeleteAllMessageReactionsResult = AxiosResponse<void>
export type CrosspostMessageResult = AxiosResponse<MessageResponse>
export type CreateThreadFromMessageResult = AxiosResponse<ThreadResponse>
export type GetAnswerVotersResult = AxiosResponse<PollAnswerDetailsResponse>
export type PollExpireResult = AxiosResponse<MessageResponse>
export type GetOriginalWebhookMessageResult = AxiosResponse<MessageResponse>
export type DeleteOriginalWebhookMessageResult = AxiosResponse<void>
export type UpdateOriginalWebhookMessageResult = AxiosResponse<MessageResponse>
export type ListGuildScheduledEventUsersResult = AxiosResponse<ListGuildScheduledEventUsers200>
export type GetAutoModerationRuleResult = AxiosResponse<GetAutoModerationRule200>
export type DeleteAutoModerationRuleResult = AxiosResponse<void>
export type UpdateAutoModerationRuleResult = AxiosResponse<UpdateAutoModerationRule200>
export type ListAutoModerationRulesResult = AxiosResponse<ListAutoModerationRules200>
export type CreateAutoModerationRuleResult = AxiosResponse<CreateAutoModerationRule200>
export type GetSelfVoiceStateResult = AxiosResponse<VoiceStateResponse>
export type UpdateSelfVoiceStateResult = AxiosResponse<void>
export type SearchGuildMembersResult = AxiosResponse<GuildMemberResponse[]>
export type GetActiveGuildThreadsResult = AxiosResponse<ThreadsResponse>
export type UpdateMyGuildMemberResult = AxiosResponse<PrivateGuildMemberResponse>
export type AddGuildMemberRoleResult = AxiosResponse<void>
export type DeleteGuildMemberRoleResult = AxiosResponse<void>
export type LeaveGuildResult = AxiosResponse<void>
export type ApplicationsGetActivityInstanceResult = AxiosResponse<EmbeddedActivityInstance>
export type GetEntitlementResult = AxiosResponse<EntitlementResponse>
export type DeleteEntitlementResult = AxiosResponse<void>
export type GetEntitlementsResult = AxiosResponse<GetEntitlements200Item[]>
export type CreateEntitlementResult = AxiosResponse<EntitlementResponse>
export type UploadApplicationAttachmentResult = AxiosResponse<ActivitiesAttachmentResponse>
export type GetApplicationCommandResult = AxiosResponse<ApplicationCommandResponse>
export type DeleteApplicationCommandResult = AxiosResponse<void>
export type UpdateApplicationCommandResult = AxiosResponse<ApplicationCommandResponse>
export type ListApplicationCommandsResult = AxiosResponse<ListApplicationCommands200>
export type BulkSetApplicationCommandsResult = AxiosResponse<BulkSetApplicationCommands200>
export type CreateApplicationCommandResult = AxiosResponse<ApplicationCommandResponse>
export type GetApplicationEmojiResult = AxiosResponse<EmojiResponse>
export type DeleteApplicationEmojiResult = AxiosResponse<void>
export type UpdateApplicationEmojiResult = AxiosResponse<EmojiResponse>
export type ListApplicationEmojisResult = AxiosResponse<ListApplicationEmojisResponse>
export type CreateApplicationEmojiResult = AxiosResponse<EmojiResponse>
export type CreateInteractionResponseResult = AxiosResponse<InteractionCallbackResponse | void>
export type SendSoundboardSoundResult = AxiosResponse<void>
export type GetThreadMemberResult = AxiosResponse<ThreadMemberResponse>
export type AddThreadMemberResult = AxiosResponse<void>
export type DeleteThreadMemberResult = AxiosResponse<void>
export type ListThreadMembersResult = AxiosResponse<ThreadMemberResponse[]>
export type SetChannelPermissionOverwriteResult = AxiosResponse<void>
export type DeleteChannelPermissionOverwriteResult = AxiosResponse<void>
export type AddGroupDmUserResult = AxiosResponse<AddGroupDmUser201 | void>
export type DeleteGroupDmUserResult = AxiosResponse<void>
export type FollowChannelResult = AxiosResponse<ChannelFollowerResponse>
export type GetMessageResult = AxiosResponse<MessageResponse>
export type DeleteMessageResult = AxiosResponse<void>
export type UpdateMessageResult = AxiosResponse<MessageResponse>
export type ListMessagesResult = AxiosResponse<ListMessages200>
export type CreateMessageResult = AxiosResponse<MessageResponse>
export type ListChannelWebhooksResult = AxiosResponse<ListChannelWebhooks200>
export type CreateWebhookResult = AxiosResponse<GuildIncomingWebhookResponse>
export type ListChannelInvitesResult = AxiosResponse<ListChannelInvites200>
export type CreateChannelInviteResult = AxiosResponse<CreateChannelInvite200 | void>
export type CreateThreadResult = AxiosResponse<CreatedThreadResponse>
export type TriggerTypingIndicatorResult = AxiosResponse<TypingIndicatorResponse | void>
export type PinMessageResult = AxiosResponse<void>
export type UnpinMessageResult = AxiosResponse<void>
export type ListPinnedMessagesResult = AxiosResponse<ListPinnedMessages200>
export type GetWebhookMessageResult = AxiosResponse<MessageResponse>
export type DeleteWebhookMessageResult = AxiosResponse<void>
export type UpdateWebhookMessageResult = AxiosResponse<MessageResponse>
export type ExecuteGithubCompatibleWebhookResult = AxiosResponse<void>
export type ExecuteSlackCompatibleWebhookResult = AxiosResponse<ExecuteSlackCompatibleWebhook200>
export type GetGuildTemplateResult = AxiosResponse<GuildTemplateResponse>
export type CreateGuildFromTemplateResult = AxiosResponse<GuildResponse>
export type GetGuildNewMemberWelcomeResult = AxiosResponse<GuildHomeSettingsResponse | void>
export type GetGuildSoundboardSoundResult = AxiosResponse<SoundboardSoundResponse>
export type DeleteGuildSoundboardSoundResult = AxiosResponse<void>
export type UpdateGuildSoundboardSoundResult = AxiosResponse<SoundboardSoundResponse>
export type ListGuildSoundboardSoundsResult = AxiosResponse<ListGuildSoundboardSoundsResponse>
export type CreateGuildSoundboardSoundResult = AxiosResponse<SoundboardSoundResponse>
export type GetGuildScheduledEventResult = AxiosResponse<GetGuildScheduledEvent200>
export type DeleteGuildScheduledEventResult = AxiosResponse<void>
export type UpdateGuildScheduledEventResult = AxiosResponse<UpdateGuildScheduledEvent200>
export type ListGuildScheduledEventsResult = AxiosResponse<ListGuildScheduledEvents200>
export type CreateGuildScheduledEventResult = AxiosResponse<CreateGuildScheduledEvent200>
export type GetGuildWelcomeScreenResult = AxiosResponse<GuildWelcomeScreenResponse>
export type UpdateGuildWelcomeScreenResult = AxiosResponse<GuildWelcomeScreenResponse>
export type GetVoiceStateResult = AxiosResponse<VoiceStateResponse>
export type UpdateVoiceStateResult = AxiosResponse<void>
export type DeleteGuildIntegrationResult = AxiosResponse<void>
export type ListGuildIntegrationsResult = AxiosResponse<ListGuildIntegrations200>
export type GetGuildWidgetResult = AxiosResponse<WidgetResponse>
export type GetGuildsOnboardingResult = AxiosResponse<UserGuildOnboardingResponse>
export type PutGuildsOnboardingResult = AxiosResponse<GuildOnboardingResponse>
export type GetGuildVanityUrlResult = AxiosResponse<VanityURLResponse>
export type ListGuildAuditLogEntriesResult = AxiosResponse<GuildAuditLogResponse>
export type GetGuildWidgetPngResult = AxiosResponse<string>
export type SyncGuildTemplateResult = AxiosResponse<GuildTemplateResponse>
export type DeleteGuildTemplateResult = AxiosResponse<GuildTemplateResponse>
export type UpdateGuildTemplateResult = AxiosResponse<GuildTemplateResponse>
export type ListGuildTemplatesResult = AxiosResponse<ListGuildTemplates200>
export type CreateGuildTemplateResult = AxiosResponse<GuildTemplateResponse>
export type GetGuildStickerResult = AxiosResponse<GuildStickerResponse>
export type DeleteGuildStickerResult = AxiosResponse<void>
export type UpdateGuildStickerResult = AxiosResponse<GuildStickerResponse>
export type BulkBanUsersFromGuildResult = AxiosResponse<BulkBanUsersResponse>
export type ListGuildStickersResult = AxiosResponse<GuildStickerResponse[]>
export type CreateGuildStickerResult = AxiosResponse<GuildStickerResponse>
export type GetGuildWebhooksResult = AxiosResponse<GetGuildWebhooks200>
export type ListGuildChannelsResult = AxiosResponse<ListGuildChannels200>
export type CreateGuildChannelResult = AxiosResponse<GuildChannelResponse>
export type BulkUpdateGuildChannelsResult = AxiosResponse<void>
export type GetGuildMemberResult = AxiosResponse<GuildMemberResponse>
export type AddGuildMemberResult = AxiosResponse<GuildMemberResponse | void>
export type DeleteGuildMemberResult = AxiosResponse<void>
export type UpdateGuildMemberResult = AxiosResponse<GuildMemberResponse | void>
export type ListGuildMembersResult = AxiosResponse<GuildMemberResponse[]>
export type GetGuildPreviewResult = AxiosResponse<GuildPreviewResponse>
export type ListGuildInvitesResult = AxiosResponse<ListGuildInvites200>
export type ListGuildVoiceRegionsResult = AxiosResponse<ListGuildVoiceRegions200>
export type GetGuildEmojiResult = AxiosResponse<EmojiResponse>
export type DeleteGuildEmojiResult = AxiosResponse<void>
export type UpdateGuildEmojiResult = AxiosResponse<EmojiResponse>
export type ListGuildEmojisResult = AxiosResponse<ListGuildEmojis200>
export type CreateGuildEmojiResult = AxiosResponse<EmojiResponse>
export type GetGuildWidgetSettingsResult = AxiosResponse<WidgetSettingsResponse>
export type UpdateGuildWidgetSettingsResult = AxiosResponse<WidgetSettingsResponse>
export type GetGuildRoleResult = AxiosResponse<GuildRoleResponse>
export type DeleteGuildRoleResult = AxiosResponse<void>
export type UpdateGuildRoleResult = AxiosResponse<GuildRoleResponse>
export type ListGuildRolesResult = AxiosResponse<GuildRoleResponse[]>
export type CreateGuildRoleResult = AxiosResponse<GuildRoleResponse>
export type BulkUpdateGuildRolesResult = AxiosResponse<GuildRoleResponse[]>
export type PreviewPruneGuildResult = AxiosResponse<GuildPruneResponse>
export type PruneGuildResult = AxiosResponse<GuildPruneResponse>
export type GetGuildBanResult = AxiosResponse<GuildBanResponse>
export type BanUserFromGuildResult = AxiosResponse<void>
export type UnbanUserFromGuildResult = AxiosResponse<void>
export type ListGuildBansResult = AxiosResponse<ListGuildBans200>
export type SetGuildMfaLevelResult = AxiosResponse<GuildMFALevelResponse>
export type GetStageInstanceResult = AxiosResponse<StageInstanceResponse>
export type DeleteStageInstanceResult = AxiosResponse<void>
export type UpdateStageInstanceResult = AxiosResponse<StageInstanceResponse>
export type GetStickerPackResult = AxiosResponse<StickerPackResponse>
export type GetApplicationResult = AxiosResponse<PrivateApplicationResponse>
export type UpdateApplicationResult = AxiosResponse<PrivateApplicationResponse>
export type GetWebhookByTokenResult = AxiosResponse<GetWebhookByToken200>
export type ExecuteWebhookResult = AxiosResponse<MessageResponse | void>
export type DeleteWebhookByTokenResult = AxiosResponse<void>
export type UpdateWebhookByTokenResult = AxiosResponse<UpdateWebhookByToken200>
export type GetStickerResult = AxiosResponse<GetSticker200>
export type GetWebhookResult = AxiosResponse<GetWebhook200>
export type DeleteWebhookResult = AxiosResponse<void>
export type UpdateWebhookResult = AxiosResponse<UpdateWebhook200>
export type GetChannelResult = AxiosResponse<GetChannel200>
export type DeleteChannelResult = AxiosResponse<DeleteChannel200>
export type UpdateChannelResult = AxiosResponse<UpdateChannel200>
export type InviteResolveResult = AxiosResponse<InviteResolve200>
export type InviteRevokeResult = AxiosResponse<InviteRevoke200>
export type GetGuildResult = AxiosResponse<GuildWithCountsResponse>
export type DeleteGuildResult = AxiosResponse<void>
export type UpdateGuildResult = AxiosResponse<GuildResponse>
export type GetUserResult = AxiosResponse<UserResponse>
